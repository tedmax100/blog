{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/7844224.jpeg","path":"images/7844224.jpeg","modified":0,"renderable":0},{"_id":"source/images/DP/3ANdROM.jpg","path":"images/DP/3ANdROM.jpg","modified":0,"renderable":0},{"_id":"source/images/DP/1g0WOw3.jpg","path":"images/DP/1g0WOw3.jpg","modified":0,"renderable":0},{"_id":"source/images/DP/Nkwi064.jpg","path":"images/DP/Nkwi064.jpg","modified":0,"renderable":0},{"_id":"source/images/DP/K0UJ66B.jpg","path":"images/DP/K0UJ66B.jpg","modified":0,"renderable":0},{"_id":"source/images/DP/6Zx2ffj.jpg","path":"images/DP/6Zx2ffj.jpg","modified":0,"renderable":0},{"_id":"source/images/DP/ZwtEQJ4.png","path":"images/DP/ZwtEQJ4.png","modified":0,"renderable":0},{"_id":"source/images/DP/aDtcx6P.png","path":"images/DP/aDtcx6P.png","modified":0,"renderable":0},{"_id":"source/images/DP/P81JUXV.jpg","path":"images/DP/P81JUXV.jpg","modified":0,"renderable":0},{"_id":"source/images/DP/jC5J5vp.png","path":"images/DP/jC5J5vp.png","modified":0,"renderable":0},{"_id":"source/images/DP/xZEF4gP.png","path":"images/DP/xZEF4gP.png","modified":0,"renderable":0},{"_id":"source/images/DP/dRe0ZjY.jpg","path":"images/DP/dRe0ZjY.jpg","modified":0,"renderable":0},{"_id":"source/images/Docker01/640.jpg","path":"images/Docker01/640.jpg","modified":0,"renderable":0},{"_id":"source/images/DP/yFCmo8g.png","path":"images/DP/yFCmo8g.png","modified":0,"renderable":0},{"_id":"source/images/Go/go-packages.jpg","path":"images/Go/go-packages.jpg","modified":0,"renderable":0},{"_id":"source/images/MQ/bindings.webp","path":"images/MQ/bindings.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/consumer.png","path":"images/MQ/consumer.png","modified":0,"renderable":0},{"_id":"source/images/MQ/exchanges (1).webp","path":"images/MQ/exchanges (1).webp","modified":0,"renderable":0},{"_id":"source/images/MQ/direct-exchange-multiple.webp","path":"images/MQ/direct-exchange-multiple.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/exchanges.webp","path":"images/MQ/exchanges.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/direct-exchange.png","path":"images/MQ/direct-exchange.png","modified":0,"renderable":0},{"_id":"source/images/MQ/RabbitMQRouting.png","path":"images/MQ/RabbitMQRouting.png","modified":0,"renderable":0},{"_id":"source/images/MQ/producer.webp","path":"images/MQ/producer.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/python-five.webp","path":"images/MQ/python-five.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/python-four.webp","path":"images/MQ/python-four.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/queue.webp","path":"images/MQ/queue.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/python-six.webp","path":"images/MQ/python-six.webp","modified":0,"renderable":0},{"_id":"source/images/MQ/python-three-overall.png","path":"images/MQ/python-three-overall.png","modified":0,"renderable":0},{"_id":"source/images/Redis/Qqmv4m2.png","path":"images/Redis/Qqmv4m2.png","modified":0,"renderable":0},{"_id":"source/images/Redis/TbzqlS7.png","path":"images/Redis/TbzqlS7.png","modified":0,"renderable":0},{"_id":"source/images/Redis/j6fwoVP.png","path":"images/Redis/j6fwoVP.png","modified":0,"renderable":0},{"_id":"source/images/Rx/1333383604_7864.gif","path":"images/Rx/1333383604_7864.gif","modified":0,"renderable":0},{"_id":"source/images/Redis/x21LwjK.png","path":"images/Redis/x21LwjK.png","modified":0,"renderable":0},{"_id":"source/images/Rx/1334422958_4462.gif","path":"images/Rx/1334422958_4462.gif","modified":0,"renderable":0},{"_id":"source/images/Refactor/51ta2ZRmPeL.jpg","path":"images/Refactor/51ta2ZRmPeL.jpg","modified":0,"renderable":0},{"_id":"source/images/Rx/fXMFsde.png","path":"images/Rx/fXMFsde.png","modified":0,"renderable":0},{"_id":"source/images/Rx/Img244356699.jpg","path":"images/Rx/Img244356699.jpg","modified":0,"renderable":0},{"_id":"source/images/Rx/ofzzCyr.png","path":"images/Rx/ofzzCyr.png","modified":0,"renderable":0},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/images/AWS/how-you-configure-cf.png","path":"images/AWS/how-you-configure-cf.png","modified":0,"renderable":0},{"_id":"source/images/MQ/exchanges-topic-fanout-direct.png","path":"images/MQ/exchanges-topic-fanout-direct.png","modified":0,"renderable":0},{"_id":"source/images/Redis/VDOhrRC.png","path":"images/Redis/VDOhrRC.png","modified":0,"renderable":0},{"_id":"themes/hueman/source/css/images/7844224.jpeg","path":"css/images/7844224.jpeg","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","path":"libs/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"source/images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg","path":"images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg","modified":0,"renderable":0},{"_id":"source/images/Go/source-files-to-package.001.png","path":"images/Go/source-files-to-package.001.png","modified":0,"renderable":0},{"_id":"source/images/DP/xqVWxxO.png","path":"images/DP/xqVWxxO.png","modified":0,"renderable":0},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/jquery/3.5.0/jquery.min.js","path":"libs/jquery/3.5.0/jquery.min.js","modified":0,"renderable":1},{"_id":"source/images/News-Hero-Crop.jpg","path":"images/News-Hero-Crop.jpg","modified":0,"renderable":0},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hueman/.gitignore","hash":"cd089ae45ce870c45e434019e8f1ed4f066cd425","modified":1608451101839},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1608451101839},{"_id":"themes/hueman/README.md","hash":"096d3c5c90b77bb69e5ea5230c60b9fe8c04746b","modified":1608451101839},{"_id":"themes/hueman/_config.yml","hash":"6a14f5f3535dcede705c595673c9d7e65f11d662","modified":1608469393082},{"_id":"themes/hueman/_config.yml.example","hash":"32dc691a594ac54b196807aa770534d2d69cfb84","modified":1608451101839},{"_id":"themes/hueman/package.json","hash":"1dda3c209f51d6d6a3b4f112f787915d3add726a","modified":1608451101843},{"_id":"source/_posts/AWS-CloudFront.md","hash":"08144fea5d86e8d3441c7b70265b01e66b01d5e4","modified":1608450976169},{"_id":"source/_posts/Decorator-Pattern.md","hash":"cc4cc405ba149cf441b25c9a600e6ac5e176f6eb","modified":1608450976169},{"_id":"source/_posts/Docker-Multi-Stage-Build.md","hash":"14b6d950a16ca550f4978fcc5f8efee0749e88d9","modified":1608450976169},{"_id":"source/_posts/Docker入門-01.md","hash":"2dab41f289838ba43d0c8e8d38d7eef965536316","modified":1608450976169},{"_id":"source/_posts/Factory-Pattern-Cont’d.md","hash":"96cbf5608660076a5f4cb7b3f266419cb21acca9","modified":1608450976169},{"_id":"source/_posts/Factory-Pattern.md","hash":"74c3005adeedc9ffdd0a1478aa404f83d3fffd2a","modified":1608450976169},{"_id":"source/_posts/Go-Context.md","hash":"7194dba262530786af66dfb555e549d910c19d92","modified":1608450976169},{"_id":"source/_posts/Go-Module-Go-Vendor.md","hash":"7527da6d94c721a9994683198a0874e01c015e3d","modified":1608450976169},{"_id":"source/_posts/Go-Package.md","hash":"ae723786316efbadaa3a2d1114cb048fcfebdcdc","modified":1608450976169},{"_id":"source/_posts/Go環境安裝.md","hash":"2b39e3349fc28710f9099221adc5aecaf1e917c9","modified":1608450976169},{"_id":"source/_posts/Introduce-to-RabbitMQ.md","hash":"cd60a2def3aa64a38749caacfd4b362384b632e3","modified":1608450976169},{"_id":"source/_posts/JS-Clean-Code訓練營.md","hash":"f9c83545a6a0fa477b18347d858474881b5e7bb1","modified":1608450976169},{"_id":"source/_posts/JS30-JavaScript-Drum-Kit.md","hash":"a9e8a793ed80808c2f672eadc10b4ebd9a6e1283","modified":1608450976169},{"_id":"source/_posts/Multi-and-LuaScript-for-Redis.md","hash":"093d96ee5196388f2e6e8c46e3df2cc42788cc20","modified":1608450976169},{"_id":"source/_posts/Odds-Margin-Market.md","hash":"eaf62c3daf9dd4241ea0f487f835a91977262e2b","modified":1608450976169},{"_id":"source/_posts/PixiJS-簡介.md","hash":"70ca2b2388e9fc7af081bdeb14ced39d22dc6ed4","modified":1608450976169},{"_id":"source/_posts/Rx-IEnumberbale和IObservable.md","hash":"8dc5e2e2f687ae8d5e401c7ae1f6e7f64df04cc2","modified":1608450976169},{"_id":"source/_posts/Rx-and-Pormise.md","hash":"d30403135a40b3987442d928ea52cfa02b173b83","modified":1608450976169},{"_id":"source/_posts/Rx簡介.md","hash":"fb2a0a374dda5820a16516cb3bf1ca72d5728b1f","modified":1608450976169},{"_id":"source/_posts/State-Pattern.md","hash":"371a7fe038dd77b471b1d2e8b0712f4c4b267306","modified":1608450976169},{"_id":"source/_posts/Strtegy-Pattern.md","hash":"4bc08cace0e1bce15f9d16f222495758d7472996","modified":1608450976169},{"_id":"source/_posts/Weekly.md","hash":"128314adbcbaa35c5fe552a9faf1c05d57ce2a2d","modified":1608450976169},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1608450976169},{"_id":"source/_posts/學Golang的緣由.md","hash":"5bb3d41672d0992d49fc64f7181736b07a5d9954","modified":1608467074446},{"_id":"source/_posts/第一隻Go程式.md","hash":"612a815e5d74cdc5b483f690a2b5316b9bc69fc4","modified":1608467080646},{"_id":"source/about/index.md","hash":"59b1c28954ef0d1fa3e684eec96b1e7fee7387a2","modified":1608450976169},{"_id":"source/categories/index.md","hash":"1bb96bc83a47886672092864ad0932e784382948","modified":1608450976169},{"_id":"source/images/7844224.jpeg","hash":"6674814b7720546d5297372e5ab54ef9d508c15e","modified":1608455171782},{"_id":"themes/hueman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1608451101827},{"_id":"themes/hueman/.git/config","hash":"72d8fc221fb043f592de55f830346b5c8cda0068","modified":1608451101827},{"_id":"themes/hueman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1608451098559},{"_id":"themes/hueman/.git/index","hash":"ce0774575597a72b87371b23945983097dfa0ac1","modified":1608452546282},{"_id":"themes/hueman/.git/packed-refs","hash":"10ed9ebcae9001f06f9571988799095aa1955ddd","modified":1608451101827},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"1ce6c6330e2e37fcf4764d69ed2c43670e30eb23","modified":1608451101839},{"_id":"themes/hueman/languages/ca.yml","hash":"deb751cd834e928a218cd4dff25f9b8a4f1597f4","modified":1608451101839},{"_id":"themes/hueman/languages/en.yml","hash":"26a3d8c89a257a4e8b84e3b5214d0f184cb8ad79","modified":1608451101839},{"_id":"themes/hueman/languages/es.yml","hash":"8bfab5d3e889fe2959ee469263c19951aab08fad","modified":1608451101839},{"_id":"themes/hueman/languages/fr.yml","hash":"8ab415076d01d069c24c9bc60e448ef258834dec","modified":1608451101839},{"_id":"themes/hueman/languages/hu.yml","hash":"b612b0d3329aa205e5903576018194e44d5f8d22","modified":1608451101839},{"_id":"themes/hueman/languages/id.yml","hash":"36fa092fe362ffffe1db67afb35d2bab1f04e2f0","modified":1608451101839},{"_id":"themes/hueman/languages/ja.yml","hash":"3695f6c76b48195881419e69fbeb8c25bd985119","modified":1608451101839},{"_id":"themes/hueman/languages/ko.yml","hash":"09703bf440a4de3f7aec02357bc46079b7d99b77","modified":1608451101839},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"2b65116ff36781cc130138ee8cb209095e5ba5df","modified":1608451101839},{"_id":"themes/hueman/languages/ru.yml","hash":"2878b42646ddea60ce1236f68f4b907c436cf26e","modified":1608451101839},{"_id":"themes/hueman/languages/tr.yml","hash":"c6bd8d946213d0a1dd05c033669513d1ab67a66e","modified":1608451101839},{"_id":"themes/hueman/languages/vi.yml","hash":"c2d23b1034e1e51355f97224ad7bda8066d597a2","modified":1608451101839},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"38c119ff77bb4eaa22403dde4f1303920260e9a3","modified":1608451101839},{"_id":"themes/hueman/languages/zh-TW.yml","hash":"343d3589f6c8449319c872c03e028a92682fce35","modified":1608451101839},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1608451101839},{"_id":"themes/hueman/layout/author.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1608451101839},{"_id":"themes/hueman/layout/authors.ejs","hash":"8946d0d1a70ac470b3ee56dd36b4f9da2b73ed76","modified":1608451101839},{"_id":"themes/hueman/layout/categories.ejs","hash":"8946d0d1a70ac470b3ee56dd36b4f9da2b73ed76","modified":1608451101839},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1608451101839},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1608451101839},{"_id":"themes/hueman/layout/layout.ejs","hash":"2c8cdd3a857a4b35e89b354931909186eaa91853","modified":1608451101839},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1608451101839},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1608451101839},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1608451101843},{"_id":"themes/hueman/layout/tags.ejs","hash":"8946d0d1a70ac470b3ee56dd36b4f9da2b73ed76","modified":1608451101843},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1608451101843},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"e78b1b978fa1acad5409afc685d13f669e80b24f","modified":1608451101843},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1608451101843},{"_id":"themes/hueman/scripts/md5.js","hash":"7712232a328daf1797a3dd313bfce124f7df67ff","modified":1608451101843},{"_id":"source/images/DP/3ANdROM.jpg","hash":"af3bb19a2e29cb64c4a2c2e84687eb0b81f2407e","modified":1608450976169},{"_id":"source/images/DP/1g0WOw3.jpg","hash":"cae4260b5d9c936000f73f23b1ed5d6696e8d443","modified":1608450976169},{"_id":"source/images/DP/Nkwi064.jpg","hash":"e21b19e42c04a1b4311692538883cc15d3aa322b","modified":1608450976169},{"_id":"source/images/DP/K0UJ66B.jpg","hash":"df15536b7ee4b2b747400921c9730c595a2531a0","modified":1608450976169},{"_id":"source/images/DP/6Zx2ffj.jpg","hash":"715096bab705d4154a04960163751ce18a70ade6","modified":1608450976169},{"_id":"source/images/DP/ZwtEQJ4.png","hash":"1b2bf30c03ac17dde632e1d1913b4a60ec26d8dd","modified":1608450976173},{"_id":"source/images/DP/aDtcx6P.png","hash":"0a282430f6e61041eb657aff38b85d4ae1d47b45","modified":1608450976173},{"_id":"source/images/DP/P81JUXV.jpg","hash":"1f54d7c0846370f155e1be4bdc65342fbfb98564","modified":1608450976173},{"_id":"source/images/DP/jC5J5vp.png","hash":"4ff6e3587627eb5e406bc458b63be4641972fe90","modified":1608450976173},{"_id":"source/images/DP/xZEF4gP.png","hash":"933bdceff7bc52ad23df4111d8c88e2e55cb3be3","modified":1608450976173},{"_id":"source/images/DP/dRe0ZjY.jpg","hash":"8657fb2d8bd792e1719d350ab41e994a6f5d3519","modified":1608450976173},{"_id":"source/images/Docker01/640.jpg","hash":"5a0766302ba67d5ff82ba6b0ea72d586e2166d9f","modified":1608450976173},{"_id":"source/images/DP/yFCmo8g.png","hash":"19664946ca99e07030e1dc5b8a49da355ad7aa74","modified":1608450976173},{"_id":"source/images/Go/go-packages.jpg","hash":"d6ba2091f16df9f11f0537cc10d3d0fedf56ff89","modified":1608450976173},{"_id":"source/images/MQ/bindings.webp","hash":"cbe2dba23462e6fd347921d0a05a276fd0f507ba","modified":1608450976177},{"_id":"source/images/MQ/consumer.png","hash":"a539ac951a0cc71fb7d816415ec9aea432ed023f","modified":1608450976177},{"_id":"source/images/MQ/exchanges (1).webp","hash":"09252e13d62444883369142218a2417cbb1f1961","modified":1608450976177},{"_id":"source/images/MQ/direct-exchange-multiple.webp","hash":"eb3fc94976c915c5b50da70bb1e0bff1ff8282be","modified":1608450976177},{"_id":"source/images/MQ/exchanges.webp","hash":"09252e13d62444883369142218a2417cbb1f1961","modified":1608450976177},{"_id":"source/images/MQ/direct-exchange.png","hash":"936cf5ed800ccd2fd9b9ab3989b606fd37d9799b","modified":1608450976177},{"_id":"source/images/MQ/RabbitMQRouting.png","hash":"303e310c096b7316d18bb9e6bb74fd39d28ec272","modified":1608450976177},{"_id":"source/images/MQ/producer.webp","hash":"d4e47d7e7f0ba61bf02d5f6faccfed1f5e5d3f75","modified":1608450976177},{"_id":"source/images/MQ/python-five.webp","hash":"dcf3d64968f6ba2fe2613ad7c784c296c3e70636","modified":1608450976177},{"_id":"source/images/MQ/python-four.webp","hash":"06fdf2a09185f1323a866255d10b371d631bf583","modified":1608450976177},{"_id":"source/images/MQ/queue.webp","hash":"56a9d5d458352461a6575e3126ce48d66129dd67","modified":1608450976177},{"_id":"source/images/MQ/python-six.webp","hash":"5bcbf740e73476b71f57168b19f0b70c4f8e6af0","modified":1608450976177},{"_id":"source/images/MQ/python-three-overall.png","hash":"723a8a707d1c971f75ebbe6d060206628f4f2ab7","modified":1608450976177},{"_id":"source/images/Redis/Qqmv4m2.png","hash":"4340421c1686e0b7b805b430856db59a893d2651","modified":1608450976177},{"_id":"source/images/Redis/TbzqlS7.png","hash":"a2b12fd4c64b3432b0bda08a70bdbb4ad90d160c","modified":1608450976177},{"_id":"source/images/Redis/j6fwoVP.png","hash":"e597b8c99961fab3642ac2dcc10e598d2144d74c","modified":1608450976177},{"_id":"source/images/Rx/1333383604_7864.gif","hash":"129504dd6f64098f9018bba4b76fbb818a5ae0d8","modified":1608450976177},{"_id":"source/images/Redis/x21LwjK.png","hash":"99ca29205d767ae0f611795257eff584e215c912","modified":1608450976177},{"_id":"source/images/Rx/1334422958_4462.gif","hash":"428370a2df6ce52657da22d69c99b3719c544890","modified":1608450976177},{"_id":"source/images/Refactor/51ta2ZRmPeL.jpg","hash":"c2e4771603df340153d5b984d0a20ad6ba56b172","modified":1608450976177},{"_id":"source/images/Rx/fXMFsde.png","hash":"57e7cb3c8dec43ff08e6ad4b23d0e2173be2149e","modified":1608450976177},{"_id":"themes/hueman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1608451098559},{"_id":"themes/hueman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1608451098559},{"_id":"themes/hueman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1608451098559},{"_id":"source/images/Rx/Img244356699.jpg","hash":"8b7f59d5cffcf6c3d9c00dc8170e81de72e56bad","modified":1608450976177},{"_id":"themes/hueman/.git/logs/HEAD","hash":"f131082cb4bb3b40b40c9e48227fb27759b18f09","modified":1608451101827},{"_id":"source/images/Rx/ofzzCyr.png","hash":"fb6cb375974455b4ac6e7fb66d0b3f4e10a9eead","modified":1608450976177},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"237fe2f89c128fe4f7c1edb9187f504f42cb5e74","modified":1608451101839},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"936ded56d044e5f0a2f4c5d773d41965b2bea145","modified":1608451101839},{"_id":"themes/hueman/layout/comment/changyan.ejs","hash":"4dbfefe8c9ed9b824a6bc4952d2a0a72e9166b61","modified":1608451101839},{"_id":"themes/hueman/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1608451101839},{"_id":"themes/hueman/layout/comment/gitalk.ejs","hash":"915124de9806cf92bbe1af1b77e6580d0eaa8ac3","modified":1608451101839},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1608451101839},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"058f7dc27f700d083841e3d7a251e57ccbc4706e","modified":1608451101839},{"_id":"themes/hueman/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1608451101839},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"48212bc99b046a67a1027024efecda8c79eb7fa9","modified":1608451101839},{"_id":"themes/hueman/layout/comment/valine.ejs","hash":"00502e24843fab3cad0d99d2ac66144685fd39ce","modified":1608451101839},{"_id":"themes/hueman/layout/comment/isso.ejs","hash":"c196dbd522a3969d75ce5e61bc7ce7cec52d462f","modified":1608451101839},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"ef6c37f535d4897679823143ce37c25d556cd729","modified":1608451101839},{"_id":"themes/hueman/layout/common/authors.ejs","hash":"dc9adbd9fa759c80614feaa499433de1b76f8d83","modified":1608451101839},{"_id":"themes/hueman/layout/common/article.ejs","hash":"3aec000ae8c5ea1d1c729214fe5c35c1c620cd0c","modified":1608451101839},{"_id":"themes/hueman/layout/common/categories.ejs","hash":"b408e91026ebbb324b7e4f517242f22903e3992b","modified":1608451101839},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"e4d32fa38c969db0d0f66463bc67a3020ed979f7","modified":1608451101839},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"4e1a92448207b8e3d1695df855f6be7c70576248","modified":1608451101839},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"d62dc97ec079d8ef5d0af401b56dceec1ffb64f7","modified":1608451101839},{"_id":"themes/hueman/layout/common/header.ejs","hash":"ee7b3d8e28114c9acdd28a37bf57559dbc452307","modified":1608451101839},{"_id":"themes/hueman/layout/common/head.ejs","hash":"20d27432498ec723a685b989917d9b2d2c3f8b92","modified":1608451101839},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"db677ab336d31292bffc071b2115e25e9c6f198d","modified":1608451101839},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"f582cd96ce6fa3b0340a1642695fec1632391e25","modified":1608451101839},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"42d6f99906ae96a6d00ee9a727405e47ec5e7c81","modified":1608451101839},{"_id":"themes/hueman/layout/common/tags.ejs","hash":"20769fc8213091770e5b5dac16e4528f9104e244","modified":1608451101839},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"c5fba5d5287f49e02040c530cd92312b2221a2c1","modified":1608451101839},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1608451101839},{"_id":"themes/hueman/layout/plugin/google-adsense.ejs","hash":"8b3870371d6554777b3323389cdeb8a287467ed3","modified":1608451101839},{"_id":"themes/hueman/layout/plugin/cookie-consent.ejs","hash":"6baf0d836b2c1ddc757b047f014c08fbbf008ee8","modified":1608451101839},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"9ae10a0ff00a5bfe2bb6ad2ce2f882ae9074ad2b","modified":1608451101839},{"_id":"themes/hueman/layout/plugin/statcounter.ejs","hash":"7773a7ef15dbaf4ead2485eb7e5c394d20789438","modified":1608451101839},{"_id":"themes/hueman/layout/plugin/twitter-conversion.ejs","hash":"b9bc79727c9790b868e52ce2bd80536a04407a7e","modified":1608451101839},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"7d011d257cabf47c8faacbb1ca98381db4ace71c","modified":1608451101839},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1608451101839},{"_id":"themes/hueman/layout/pwa/index.ejs","hash":"6db63250679a4fdf8113d57f302a50d848a408cf","modified":1608451101839},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1608451101839},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1608451101839},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1608451101839},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"5fd8c82a40d957e9481540a0b7d3ffca874e14a7","modified":1608451101839},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1608451101839},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1608451101843},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1608451101839},{"_id":"themes/hueman/layout/widget/catalog.ejs","hash":"b95f91c7b3b26236ea675482b173b29fecf3e7f4","modified":1608451101843},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1608451101843},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1608451101839},{"_id":"themes/hueman/layout/widget/google_adsense.ejs","hash":"c83ea7f18b970c48c90994cb96be2f659f7744fa","modified":1608451101843},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1608451101843},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1608451101843},{"_id":"themes/hueman/layout/widget/sticky_posts.ejs","hash":"6bad4126bed652f5f9e93027cbe3ee03b67b034a","modified":1608451101843},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1608451101843},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1608451101843},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"b80332a1e0c8d230fabcf5e696edae349925ae17","modified":1608451101839},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1608451101843},{"_id":"themes/hueman/source/css/_extend.styl","hash":"c2160499dc89c524ff17cd2e3fcbb8df83ebca1a","modified":1608451101843},{"_id":"themes/hueman/source/css/_variables.styl","hash":"c077e2412dd38c40e68ecc763c0b8c5e3254808a","modified":1608451101843},{"_id":"themes/hueman/source/css/style.styl","hash":"b76d43839bda01ee791e71093f009ad2c8b093b2","modified":1608451101843},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1608451101843},{"_id":"themes/hueman/source/js/main.js","hash":"2ef5449478816096cdd0e9dde4d1fc1c2f33ab87","modified":1608451101843},{"_id":"source/images/AWS/how-you-configure-cf.png","hash":"e00cb113249178c961b624953d953ec94af07056","modified":1608450976169},{"_id":"source/images/MQ/exchanges-topic-fanout-direct.png","hash":"0233ff82197809ccb8020a7819563afa074b4dab","modified":1608450976177},{"_id":"source/images/Redis/VDOhrRC.png","hash":"279db1031ad0d8b3409bb5afb9e7b00dea2221e9","modified":1608450976177},{"_id":"themes/hueman/.git/refs/heads/master","hash":"6b9f8e0a1e0ad4552c94cb9f9c358f0bf0a31930","modified":1608451101827},{"_id":"themes/hueman/layout/common/post/author.ejs","hash":"d27178a76c95949f537def3d16ae42ef68437b2b","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/counter.ejs","hash":"708566f1fb93062201e51fc1ce2a251078985437","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"62600215be93098d88f3ef949cc9d5264167810c","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/ld_json.ejs","hash":"b33214e00cf9972382ff0c2c93c0fc9e411f921f","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1608451101839},{"_id":"themes/hueman/layout/common/post/valinecounter.ejs","hash":"9d7bb963286520690dc4e0a2ffae44560f013a1e","modified":1608451101839},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"5f93edada8ba08100e1fee6a9f6f5cf4a35b6c7f","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"219f881c937735869ac4a1af1259e0d234aea9f3","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1608451101843},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"2217aa9c746107426d4830058aa67ea73f69f449","modified":1608451101843},{"_id":"themes/hueman/source/css/images/7844224.jpeg","hash":"6674814b7720546d5297372e5ab54ef9d508c15e","modified":1608455268469},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1608451101843},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1608451101843},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1608451101843},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1608451101843},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1608451101843},{"_id":"themes/hueman/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1608451101851},{"_id":"themes/hueman/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1608451101851},{"_id":"themes/hueman/source/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1608451101851},{"_id":"themes/hueman/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1608451101851},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d421ed06c84f7a561b293f662a670bf132d41c63","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1608451101843},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1608451101843},{"_id":"source/images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg","hash":"4b2d10e2b8128b3c5d8fb38235e08b4793f150f8","modified":1608450976173},{"_id":"source/images/Go/source-files-to-package.001.png","hash":"5440f854626dbc26ed52f8e300f94d1e576e079d","modified":1608450976173},{"_id":"themes/hueman/.git/objects/pack/pack-ec0281d9e0b92a071e3bb5fc683ba358d3b8c1f1.idx","hash":"93992e3534e220343804699c80b85119c5aabf4b","modified":1608451101815},{"_id":"source/images/DP/xqVWxxO.png","hash":"c244230f08032186139cf93482011a45e7d3063c","modified":1608450976173},{"_id":"themes/hueman/.git/logs/refs/heads/master","hash":"f131082cb4bb3b40b40c9e48227fb27759b18f09","modified":1608451101827},{"_id":"themes/hueman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1608451101827},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1608451101843},{"_id":"themes/hueman/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1608451101843},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1608451101851},{"_id":"themes/hueman/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1608451101851},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1608451101851},{"_id":"themes/hueman/source/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1608451101851},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1608451101851},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1608451101851},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1608451101851},{"_id":"themes/hueman/source/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1608451101851},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1608451101851},{"_id":"themes/hueman/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1608451101851},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1608451101847},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1608451101847},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1608451101851},{"_id":"themes/hueman/.git/logs/refs/remotes/origin/HEAD","hash":"f131082cb4bb3b40b40c9e48227fb27759b18f09","modified":1608451101827},{"_id":"themes/hueman/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1608451101847},{"_id":"themes/hueman/source/libs/jquery/3.5.0/jquery.min.js","hash":"206ed314e32bca5b801434367d742c898572aea6","modified":1608451101851},{"_id":"source/images/News-Hero-Crop.jpg","hash":"fc9f3575bfbd7437d60c43247f72308f48576fc7","modified":1608450976177},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1608451101847},{"_id":"themes/hueman/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1608451101847},{"_id":"themes/hueman/.git/objects/pack/pack-ec0281d9e0b92a071e3bb5fc683ba358d3b8c1f1.pack","hash":"175be8bb221a0899dc579256542543a05e1d73f6","modified":1608451101815},{"_id":"public/content.json","hash":"6e155f0dbcac68162f65733951ef412d27376168","modified":1608469396313},{"_id":"public/about/index.html","hash":"a9d042d2722a3488d0075633c9713fa24b792f22","modified":1608469397138},{"_id":"public/categories/index.html","hash":"cc4e4a85dfebe0ff28f1c944ab1f1f708c15b3b3","modified":1608469397138},{"_id":"public/2020/12/20/第一隻Go程式/index.html","hash":"62eaa38c0a863107f0e2142c8beb1c43231796db","modified":1608469397138},{"_id":"public/2020/12/20/學Golang的緣由/index.html","hash":"526601a5706f1dd655d9ea8c910f32a98ad254a2","modified":1608469397138},{"_id":"public/2020/12/20/hello-world/index.html","hash":"f53e6ef56574e4c1d83697f23cf0b7d4885fd292","modified":1608469397138},{"_id":"public/2019/08/08/Docker-Multi-Stage-Build/index.html","hash":"399b254b28e5e99798b59127a3b409a79a1fd8fc","modified":1608469397138},{"_id":"public/2019/07/28/Go-Context/index.html","hash":"c60139ba4c45da5552c10420d37fe5edad5a8e77","modified":1608469397139},{"_id":"public/2019/07/18/Odds-Margin-Market/index.html","hash":"639d6e49975b669e38aed5dc4d893f16fe57cb24","modified":1608469397139},{"_id":"public/2019/07/15/Weekly/index.html","hash":"1c9aa06a50e16943b0cb37c6bda8a894d484d7bf","modified":1608469397139},{"_id":"public/2019/07/14/Go-Module-Go-Vendor/index.html","hash":"76d321ba9320532f68d8eaf6ff8b2a208d31b637","modified":1608469397139},{"_id":"public/2019/07/14/Go-Package/index.html","hash":"ae76179427de62267e368006c80b1063c389a5f3","modified":1608469397139},{"_id":"public/2019/07/14/Go環境安裝/index.html","hash":"5b9ded219550d4ca86fbdd95f20fc25d5006d5a9","modified":1608469397139},{"_id":"public/2019/07/14/Rx簡介/index.html","hash":"b18b16e4cbb448efc5aa0fe970fd7d4ccf163af3","modified":1608469397139},{"_id":"public/2019/04/23/Decorator-Pattern/index.html","hash":"018130c6213c8e4e9e9ac3e7671d7623a0199e4f","modified":1608469397139},{"_id":"public/2019/03/16/Multi-and-LuaScript-for-Redis/index.html","hash":"36935d46f1bb7713c12a3f813d67910d431c9931","modified":1608469397139},{"_id":"public/2019/02/23/Strtegy-Pattern/index.html","hash":"2079288b8d99b098b485b053f2c66f5437f714c8","modified":1608469397139},{"_id":"public/2019/02/20/Factory-Pattern-Cont’d/index.html","hash":"d894fdede9870af45e79663c6888cb7a3a28709a","modified":1608469397139},{"_id":"public/2019/02/19/Factory-Pattern/index.html","hash":"a1465d77d20d0ef62b6de10bf899c7ac2bcf54d3","modified":1608469397139},{"_id":"public/2019/02/14/Rx-and-Pormise/index.html","hash":"eefdca3432a5682b81b12caefcb883121dab19b2","modified":1608469397139},{"_id":"public/2018/12/15/AWS-CloudFront/index.html","hash":"7f8d4fe9df82a82928535adc58a2d300febc314b","modified":1608469397140},{"_id":"public/2018/10/09/JS-Clean-Code訓練營/index.html","hash":"177b78cb6cb19bfd84d040869d6da2ac4d3ab5c3","modified":1608469397140},{"_id":"public/2017/12/13/Introduce-to-RabbitMQ/index.html","hash":"00e3bb7b8e6749ea5eef55c7745eb4313898536a","modified":1608469397140},{"_id":"public/2017/11/26/Rx-IEnumberbale和IObservable/index.html","hash":"349b386dd6008e16cba75da67becf920a191099e","modified":1608469397140},{"_id":"public/2017/11/21/State-Pattern/index.html","hash":"0ba8886b45287ceddcb6c8a52a6e1b83013adba4","modified":1608469397140},{"_id":"public/2017/11/13/Docker入門-01/index.html","hash":"8af37e059fb21f8ce6ca0e3a6e53ac772661ef20","modified":1608469397140},{"_id":"public/2017/06/05/PixiJS-簡介/index.html","hash":"63e50f8c303d0696112f5b21ef182ee0e8bede58","modified":1608469397140},{"_id":"public/2017/06/04/JS30-JavaScript-Drum-Kit/index.html","hash":"b5a6b031e67b40d019676ecfa4f7d17749460ace","modified":1608469397140},{"_id":"public/index.html","hash":"19a02a48d313d7af0604079747380b27665df490","modified":1608469397140},{"_id":"public/page/2/index.html","hash":"a90f26323633aacfbd05ce7beec028f12d64a0a8","modified":1608469397140},{"_id":"public/page/3/index.html","hash":"16ab3449c2b58f83c6aea05e741dc4a841299c03","modified":1608469397140},{"_id":"public/categories/Docker/index.html","hash":"eeea5741241e225f75913853c010f5b10a79f034","modified":1608469397140},{"_id":"public/categories/Go/index.html","hash":"967bc9892e29504af4d7c16e96f91f4b83bc5456","modified":1608469397140},{"_id":"public/categories/TechWeekly/index.html","hash":"20cff3e0ce375a6ac1d507760927bfcb441e3bb3","modified":1608469397140},{"_id":"public/archives/index.html","hash":"e4e5ed9a3c7ec6aa692d66f20ed7da705c409deb","modified":1608469397140},{"_id":"public/archives/page/2/index.html","hash":"7baccb1c6860d30ce162e2bc0ec8b091986ede08","modified":1608469397141},{"_id":"public/archives/page/3/index.html","hash":"44a9965b0289b83a057cc8d7b0e61caac8b2cb1b","modified":1608469397141},{"_id":"public/archives/2017/index.html","hash":"c0b52208e191c75c0e8df008136f5b30d65b96e3","modified":1608469397141},{"_id":"public/archives/2017/06/index.html","hash":"4f26382b503d25442a6b82b16a70deca29164455","modified":1608469397141},{"_id":"public/archives/2017/11/index.html","hash":"5311d0cc58cb7dd17c6c96d35008524de39a39ae","modified":1608469397141},{"_id":"public/archives/2017/12/index.html","hash":"ebfd0e13d12e8577dd0150ea8b2a443203d070f8","modified":1608469397141},{"_id":"public/archives/2018/index.html","hash":"b9773694feb223d337d237e60af5f8cbbc3108ca","modified":1608469397141},{"_id":"public/archives/2018/10/index.html","hash":"89f06ac57759542e44e53da616a1211bb1fe93fa","modified":1608469397141},{"_id":"public/archives/2018/12/index.html","hash":"d6c6e589d80a9b78de352dec32a09e3292afcca9","modified":1608469397141},{"_id":"public/archives/2019/index.html","hash":"ce8d28eb9a4f8779c9fa239a7bf985853a360013","modified":1608469397141},{"_id":"public/archives/2019/page/2/index.html","hash":"dcc0a52322a25fa2f1f4b10d4208fff77ae32312","modified":1608469397141},{"_id":"public/archives/2019/02/index.html","hash":"b73a5a0e4773ecae4ef11bb58790596ed03a8902","modified":1608469397141},{"_id":"public/archives/2019/03/index.html","hash":"0ad712b21f4696c5a5b4e7067c25f09818517dee","modified":1608469397141},{"_id":"public/archives/2019/04/index.html","hash":"7a1780323ad1ec3dae4c8b611356630bf7f24c58","modified":1608469397141},{"_id":"public/archives/2019/07/index.html","hash":"4e8008aff3d3ee35394bec0181943b7f1b3ca27c","modified":1608469397141},{"_id":"public/archives/2019/08/index.html","hash":"0002dd135a3f24214a57480a5d31fd4245cd1900","modified":1608469397141},{"_id":"public/archives/2020/index.html","hash":"b9260a65883b7a4995c8c9b8f8f9f2f3808dbcde","modified":1608469397142},{"_id":"public/archives/2020/12/index.html","hash":"0a25ceb67f798bada68a03f122012956940293b7","modified":1608469397142},{"_id":"public/tags/AWS/index.html","hash":"d24a5c164a98d7533f9ffec55325adcf0243296f","modified":1608469397142},{"_id":"public/tags/Design-Pattern/index.html","hash":"89309589a36d7949e301a7121428e4ba4c74b738","modified":1608469397142},{"_id":"public/tags/TypeScript/index.html","hash":"0b61d106c19d7f8d55fe32a11f2d04451d6eeca8","modified":1608469397142},{"_id":"public/tags/JavaScript/index.html","hash":"cb85add76281f80d3d4cdf7edca5d3ed9154f2b4","modified":1608469397142},{"_id":"public/tags/Docker/index.html","hash":"3de9257f3ff2027ad7bcf08120887335d22fa574","modified":1608469397142},{"_id":"public/tags/Go/index.html","hash":"421a280b6ee5dd18203e138f872c77fbfc6b3a51","modified":1608469397142},{"_id":"public/tags/MQ/index.html","hash":"cda00db319d5264065dccd9a7d1edea97b57b8b8","modified":1608469397142},{"_id":"public/tags/RabbitMQ/index.html","hash":"64274b8a11240c69011180f2dbfd9aea30936914","modified":1608469397142},{"_id":"public/tags/JavaSCript/index.html","hash":"de9800e8704b480d83925e5df8ee59a6956a56b2","modified":1608469397142},{"_id":"public/tags/JS30Day/index.html","hash":"1297bfca5ea5b96c3f5dc98489da65c675fad354","modified":1608469397142},{"_id":"public/tags/CleanCode/index.html","hash":"3a7c256ae02d0913c4f7e8143b69200f78186435","modified":1608469397142},{"_id":"public/tags/Redis/index.html","hash":"af2b107b427de57ca9c467f424b95da89f70778f","modified":1608469397142},{"_id":"public/tags/Lua/index.html","hash":"462894da99b5af72583527367a368f7b5f97be67","modified":1608469397142},{"_id":"public/tags/Sportsbook/index.html","hash":"f25151f953d73ff58c9d38544e1da4f5d6e6f15f","modified":1608469397143},{"_id":"public/tags/Pixi/index.html","hash":"714b9e9783ae9fc5870da4fd0e8db43a7542e167","modified":1608469397143},{"_id":"public/tags/Rx/index.html","hash":"45a56cc5068330b0b8798e73c43182ffd181a461","modified":1608469397143},{"_id":"public/tags/TechWeekly/index.html","hash":"c8d7a96c6a7e8504d1de2e5720ef9646e9fe631b","modified":1608469397143},{"_id":"public/tags/iT邦鐵人賽11Th/index.html","hash":"27a5300b0fcecaf3ba47c4a520e10f304504e181","modified":1608469397143},{"_id":"public/images/DP/3ANdROM.jpg","hash":"af3bb19a2e29cb64c4a2c2e84687eb0b81f2407e","modified":1608469397162},{"_id":"public/images/DP/1g0WOw3.jpg","hash":"cae4260b5d9c936000f73f23b1ed5d6696e8d443","modified":1608469397162},{"_id":"public/images/DP/K0UJ66B.jpg","hash":"df15536b7ee4b2b747400921c9730c595a2531a0","modified":1608469397162},{"_id":"public/images/DP/Nkwi064.jpg","hash":"e21b19e42c04a1b4311692538883cc15d3aa322b","modified":1608469397162},{"_id":"public/images/DP/ZwtEQJ4.png","hash":"1b2bf30c03ac17dde632e1d1913b4a60ec26d8dd","modified":1608469397162},{"_id":"public/images/DP/6Zx2ffj.jpg","hash":"715096bab705d4154a04960163751ce18a70ade6","modified":1608469397162},{"_id":"public/images/DP/aDtcx6P.png","hash":"0a282430f6e61041eb657aff38b85d4ae1d47b45","modified":1608469397162},{"_id":"public/images/DP/jC5J5vp.png","hash":"4ff6e3587627eb5e406bc458b63be4641972fe90","modified":1608469397162},{"_id":"public/images/DP/P81JUXV.jpg","hash":"1f54d7c0846370f155e1be4bdc65342fbfb98564","modified":1608469397162},{"_id":"public/images/DP/xZEF4gP.png","hash":"933bdceff7bc52ad23df4111d8c88e2e55cb3be3","modified":1608469397162},{"_id":"public/images/DP/dRe0ZjY.jpg","hash":"8657fb2d8bd792e1719d350ab41e994a6f5d3519","modified":1608469397162},{"_id":"public/images/Docker01/640.jpg","hash":"5a0766302ba67d5ff82ba6b0ea72d586e2166d9f","modified":1608469397162},{"_id":"public/images/DP/yFCmo8g.png","hash":"19664946ca99e07030e1dc5b8a49da355ad7aa74","modified":1608469397162},{"_id":"public/images/MQ/bindings.webp","hash":"cbe2dba23462e6fd347921d0a05a276fd0f507ba","modified":1608469397162},{"_id":"public/images/MQ/consumer.png","hash":"a539ac951a0cc71fb7d816415ec9aea432ed023f","modified":1608469397163},{"_id":"public/images/MQ/exchanges (1).webp","hash":"09252e13d62444883369142218a2417cbb1f1961","modified":1608469397163},{"_id":"public/images/Go/go-packages.jpg","hash":"d6ba2091f16df9f11f0537cc10d3d0fedf56ff89","modified":1608469397163},{"_id":"public/images/MQ/direct-exchange-multiple.webp","hash":"eb3fc94976c915c5b50da70bb1e0bff1ff8282be","modified":1608469397163},{"_id":"public/images/MQ/exchanges.webp","hash":"09252e13d62444883369142218a2417cbb1f1961","modified":1608469397163},{"_id":"public/images/MQ/direct-exchange.png","hash":"936cf5ed800ccd2fd9b9ab3989b606fd37d9799b","modified":1608469397163},{"_id":"public/images/MQ/producer.webp","hash":"d4e47d7e7f0ba61bf02d5f6faccfed1f5e5d3f75","modified":1608469397163},{"_id":"public/images/MQ/RabbitMQRouting.png","hash":"303e310c096b7316d18bb9e6bb74fd39d28ec272","modified":1608469397163},{"_id":"public/images/MQ/python-five.webp","hash":"dcf3d64968f6ba2fe2613ad7c784c296c3e70636","modified":1608469397163},{"_id":"public/images/MQ/python-four.webp","hash":"06fdf2a09185f1323a866255d10b371d631bf583","modified":1608469397163},{"_id":"public/images/MQ/queue.webp","hash":"56a9d5d458352461a6575e3126ce48d66129dd67","modified":1608469397163},{"_id":"public/images/MQ/python-six.webp","hash":"5bcbf740e73476b71f57168b19f0b70c4f8e6af0","modified":1608469397163},{"_id":"public/images/MQ/python-three-overall.png","hash":"723a8a707d1c971f75ebbe6d060206628f4f2ab7","modified":1608469397163},{"_id":"public/images/Redis/Qqmv4m2.png","hash":"4340421c1686e0b7b805b430856db59a893d2651","modified":1608469397163},{"_id":"public/images/Rx/1333383604_7864.gif","hash":"129504dd6f64098f9018bba4b76fbb818a5ae0d8","modified":1608469397163},{"_id":"public/images/Redis/TbzqlS7.png","hash":"a2b12fd4c64b3432b0bda08a70bdbb4ad90d160c","modified":1608469397163},{"_id":"public/images/Redis/j6fwoVP.png","hash":"e597b8c99961fab3642ac2dcc10e598d2144d74c","modified":1608469397163},{"_id":"public/images/Redis/x21LwjK.png","hash":"99ca29205d767ae0f611795257eff584e215c912","modified":1608469397163},{"_id":"public/images/Rx/1334422958_4462.gif","hash":"428370a2df6ce52657da22d69c99b3719c544890","modified":1608469397163},{"_id":"public/images/Rx/fXMFsde.png","hash":"57e7cb3c8dec43ff08e6ad4b23d0e2173be2149e","modified":1608469397163},{"_id":"public/images/Refactor/51ta2ZRmPeL.jpg","hash":"c2e4771603df340153d5b984d0a20ad6ba56b172","modified":1608469397163},{"_id":"public/images/Rx/ofzzCyr.png","hash":"fb6cb375974455b4ac6e7fb66d0b3f4e10a9eead","modified":1608469397163},{"_id":"public/images/Rx/Img244356699.jpg","hash":"8b7f59d5cffcf6c3d9c00dc8170e81de72e56bad","modified":1608469397163},{"_id":"public/images/AWS/how-you-configure-cf.png","hash":"e00cb113249178c961b624953d953ec94af07056","modified":1608469397163},{"_id":"public/css/images/logo-header.png","hash":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1608469397164},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1608469397164},{"_id":"public/css/images/7844224.jpeg","hash":"6674814b7720546d5297372e5ab54ef9d508c15e","modified":1608469397164},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1608469397164},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1608469397164},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1608469397164},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1608469397164},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1608469397164},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1608469397164},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1608469397164},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1608469397164},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1608469397164},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1608469397164},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1608469397164},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1608469397164},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1608469397164},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1608469397164},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1608469397164},{"_id":"public/libs/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1608469397164},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1608469397165},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1608469397165},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1608469397165},{"_id":"public/libs/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1608469397165},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1608469397165},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1608469397165},{"_id":"public/images/7844224.jpeg","hash":"6674814b7720546d5297372e5ab54ef9d508c15e","modified":1608469397516},{"_id":"public/images/Redis/VDOhrRC.png","hash":"279db1031ad0d8b3409bb5afb9e7b00dea2221e9","modified":1608469397516},{"_id":"public/images/MQ/exchanges-topic-fanout-direct.png","hash":"0233ff82197809ccb8020a7819563afa074b4dab","modified":1608469397517},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1608469397517},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1608469397517},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1608469397517},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1608469397517},{"_id":"public/js/main.js","hash":"2ef5449478816096cdd0e9dde4d1fc1c2f33ab87","modified":1608469397523},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1608469397523},{"_id":"public/libs/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1608469397523},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1608469397523},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1608469397523},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1608469397523},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1608469397523},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1608469397524},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1608469397524},{"_id":"public/css/style.css","hash":"fa7b72183d6c4c2d2a59fb5c26e475666bef2322","modified":1608469397524},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1608469397524},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1608469397524},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1608469397524},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1608469397524},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1608469397524},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1608469397524},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1608469397524},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1608469397524},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1608469397524},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1608469397524},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1608469397524},{"_id":"public/libs/jquery/3.5.0/jquery.min.js","hash":"206ed314e32bca5b801434367d742c898572aea6","modified":1608469397524},{"_id":"public/images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg","hash":"4b2d10e2b8128b3c5d8fb38235e08b4793f150f8","modified":1608469397524},{"_id":"public/images/Go/source-files-to-package.001.png","hash":"5440f854626dbc26ed52f8e300f94d1e576e079d","modified":1608469397524},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1608469397524},{"_id":"public/images/DP/xqVWxxO.png","hash":"c244230f08032186139cf93482011a45e7d3063c","modified":1608469397527},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1608469397530},{"_id":"public/images/News-Hero-Crop.jpg","hash":"fc9f3575bfbd7437d60c43247f72308f48576fc7","modified":1608469397532}],"Category":[{"name":"Docker","_id":"ckix55cm30007ck6xat9t2typ"},{"name":"Go","_id":"ckix55cm9000hck6xhg5yka3p"},{"name":"TechWeekly","_id":"ckix55cml001hck6xlp738xyf"}],"Data":[],"Page":[{"title":"about","date":"2019-07-14T07:18:51.000Z","_content":"汪洋中的一位迷途攻城屍\n\n個人學習筆記及讀書心得","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-14 15:18:51\n---\n汪洋中的一位迷途攻城屍\n\n個人學習筆記及讀書心得","updated":"2020-12-20T07:56:16.169Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckix55clu0001ck6xvt3cdyha","content":"<p>汪洋中的一位迷途攻城屍</p>\n<p>個人學習筆記及讀書心得</p>\n","site":{"data":{}},"excerpt":"","more":"<p>汪洋中的一位迷途攻城屍</p>\n<p>個人學習筆記及讀書心得</p>\n"},{"title":"categories","date":"2019-07-14T16:26:19.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-15 00:26:19\n---\n","updated":"2020-12-20T07:56:16.169Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckix55clw0003ck6x2ljq1hln","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"AWS CloudFront","date":"2018-12-15T04:56:46.000Z","_content":"AWS CloudFront\n* CloudFront\n加快靜態和動態web內容分配給用戶的Web服務。 透過全球數據中心(edge location)來傳輸內容。當user向CloudFront請求提供內容時，user會被陸游到提供最低延遲的edge location，以最佳的速度傳送內容。\n如果內容已經存在edge location十，則cloudfront將直接提供它。(但我們的情境不需要去快取資料)\n如果請求的內容不再edge，則會對web server進行查找。\n\n* 配置CloudFront\n配置source server，CloudFront將從這些server獲取資料。\nsource server儲存的對象是當下最終的版本。\n建立CloudFront distribution，user通過你的網站或api在請求資料時，告訴cloudfront從那些source server來獲取資料。還需要指定cloudfront是否記錄所有請求以及該分配建立後立即啟用。\n將配置發送到所有edge location。\n![](/images/AWS/how-you-configure-cf.png)\n\n* Optional configuration:\n可以配置source server對response添加header;header能設置希望資料再edge location保留的時限。默認是保留24hr。minimum expiration = 0s\n\n* HTTP Methods\nPOST/PUT/PATCH/OPTIONS/DELETE，將直接從edge location站點直接會到連source server，並不會流過regional edge location做快取查找。\n\n[指定對象在CloudFront edge location的expiration](https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)\n[Values That You Specify When You Create or Update a Web Distribution](https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior)\n\n-----------------------------------------------\n**Lab**\n* CloudFront +　S3 :\n    * Staging config :\n** Restrict Bucket Access： 選擇”Yes”，因為希望網站是向CloudFront存取，而不是向S3。\n    * Query String Forwarding and Caching : only for API\nCertifacate type : TLS11","source":"_posts/AWS-CloudFront.md","raw":"---\ntitle: AWS CloudFront\ndate: 2018-12-15 12:56:46\ntags:\n    - AWS\n---\nAWS CloudFront\n* CloudFront\n加快靜態和動態web內容分配給用戶的Web服務。 透過全球數據中心(edge location)來傳輸內容。當user向CloudFront請求提供內容時，user會被陸游到提供最低延遲的edge location，以最佳的速度傳送內容。\n如果內容已經存在edge location十，則cloudfront將直接提供它。(但我們的情境不需要去快取資料)\n如果請求的內容不再edge，則會對web server進行查找。\n\n* 配置CloudFront\n配置source server，CloudFront將從這些server獲取資料。\nsource server儲存的對象是當下最終的版本。\n建立CloudFront distribution，user通過你的網站或api在請求資料時，告訴cloudfront從那些source server來獲取資料。還需要指定cloudfront是否記錄所有請求以及該分配建立後立即啟用。\n將配置發送到所有edge location。\n![](/images/AWS/how-you-configure-cf.png)\n\n* Optional configuration:\n可以配置source server對response添加header;header能設置希望資料再edge location保留的時限。默認是保留24hr。minimum expiration = 0s\n\n* HTTP Methods\nPOST/PUT/PATCH/OPTIONS/DELETE，將直接從edge location站點直接會到連source server，並不會流過regional edge location做快取查找。\n\n[指定對象在CloudFront edge location的expiration](https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/Expiration.html)\n[Values That You Specify When You Create or Update a Web Distribution](https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior)\n\n-----------------------------------------------\n**Lab**\n* CloudFront +　S3 :\n    * Staging config :\n** Restrict Bucket Access： 選擇”Yes”，因為希望網站是向CloudFront存取，而不是向S3。\n    * Query String Forwarding and Caching : only for API\nCertifacate type : TLS11","slug":"AWS-CloudFront","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55clr0000ck6x5i3chx6q","content":"<p>AWS CloudFront</p>\n<ul>\n<li><p>CloudFront<br>加快靜態和動態web內容分配給用戶的Web服務。 透過全球數據中心(edge location)來傳輸內容。當user向CloudFront請求提供內容時，user會被陸游到提供最低延遲的edge location，以最佳的速度傳送內容。<br>如果內容已經存在edge location十，則cloudfront將直接提供它。(但我們的情境不需要去快取資料)<br>如果請求的內容不再edge，則會對web server進行查找。</p>\n</li>\n<li><p>配置CloudFront<br>配置source server，CloudFront將從這些server獲取資料。<br>source server儲存的對象是當下最終的版本。<br>建立CloudFront distribution，user通過你的網站或api在請求資料時，告訴cloudfront從那些source server來獲取資料。還需要指定cloudfront是否記錄所有請求以及該分配建立後立即啟用。<br>將配置發送到所有edge location。<br><img src=\"/images/AWS/how-you-configure-cf.png\" alt></p>\n</li>\n<li><p>Optional configuration:<br>可以配置source server對response添加header;header能設置希望資料再edge location保留的時限。默認是保留24hr。minimum expiration = 0s</p>\n</li>\n<li><p>HTTP Methods<br>POST/PUT/PATCH/OPTIONS/DELETE，將直接從edge location站點直接會到連source server，並不會流過regional edge location做快取查找。</p>\n</li>\n</ul>\n<p><a href=\"https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/Expiration.html\" target=\"_blank\" rel=\"noopener\">指定對象在CloudFront edge location的expiration</a><br><a href=\"https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior\" target=\"_blank\" rel=\"noopener\">Values That You Specify When You Create or Update a Web Distribution</a></p>\n<hr>\n<p><strong>Lab</strong></p>\n<ul>\n<li>CloudFront +　S3 :<ul>\n<li>Staging config :</li>\n</ul>\n</li>\n<li><ul>\n<li>Restrict Bucket Access： 選擇”Yes”，因為希望網站是向CloudFront存取，而不是向S3。<ul>\n<li>Query String Forwarding and Caching : only for API<br>Certifacate type : TLS11</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>AWS CloudFront</p>\n<ul>\n<li><p>CloudFront<br>加快靜態和動態web內容分配給用戶的Web服務。 透過全球數據中心(edge location)來傳輸內容。當user向CloudFront請求提供內容時，user會被陸游到提供最低延遲的edge location，以最佳的速度傳送內容。<br>如果內容已經存在edge location十，則cloudfront將直接提供它。(但我們的情境不需要去快取資料)<br>如果請求的內容不再edge，則會對web server進行查找。</p>\n</li>\n<li><p>配置CloudFront<br>配置source server，CloudFront將從這些server獲取資料。<br>source server儲存的對象是當下最終的版本。<br>建立CloudFront distribution，user通過你的網站或api在請求資料時，告訴cloudfront從那些source server來獲取資料。還需要指定cloudfront是否記錄所有請求以及該分配建立後立即啟用。<br>將配置發送到所有edge location。<br><img src=\"/images/AWS/how-you-configure-cf.png\" alt></p>\n</li>\n<li><p>Optional configuration:<br>可以配置source server對response添加header;header能設置希望資料再edge location保留的時限。默認是保留24hr。minimum expiration = 0s</p>\n</li>\n<li><p>HTTP Methods<br>POST/PUT/PATCH/OPTIONS/DELETE，將直接從edge location站點直接會到連source server，並不會流過regional edge location做快取查找。</p>\n</li>\n</ul>\n<p><a href=\"https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/Expiration.html\" target=\"_blank\" rel=\"noopener\">指定對象在CloudFront edge location的expiration</a><br><a href=\"https://docs.aws.amazon.com/zh_cn/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesCacheBehavior\" target=\"_blank\" rel=\"noopener\">Values That You Specify When You Create or Update a Web Distribution</a></p>\n<hr>\n<p><strong>Lab</strong></p>\n<ul>\n<li>CloudFront +　S3 :<ul>\n<li>Staging config :</li>\n</ul>\n</li>\n<li><ul>\n<li>Restrict Bucket Access： 選擇”Yes”，因為希望網站是向CloudFront存取，而不是向S3。<ul>\n<li>Query String Forwarding and Caching : only for API<br>Certifacate type : TLS11</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Decorator_Pattern","date":"2019-04-23T06:09:19.000Z","_content":"做武器系統\n今天想模仿暗黑破壞神的武器系統那樣\n![](/images/DP/xqVWxxO.png)\n\n利用前綴詞為武器加上能力。\n[D2魔法前綴詞表](http://wiki.d.163.com/index.php?title=Magic_Prefixes_and_Suffixes_(Diablo2)\n\n首先我先建立一個基礎類別，然後各種武器(刀、劍、斧 等等)繼承於它。\n```javascript\nexport abstract class BaseWeapon {\n    private name: string;\n    private attackPower: number;\n    constructor(name: string, attackPower: number) {\n        this.name = name;\n        this.attackPower = attackPower;\n    }\n    public Name = (): string => this.name;\n    public AttackPower = (): number => this.attackPower;\n}\n```\n\n\n再來建立了一個劍和匕首類別\n```javascript\nimport { BaseWeapon } from \"./BaseWeapon\";\nexport  class Sword extends BaseWeapon {\n    constructor() {\n        super(\"Sword\", 9);\n    }\n    public Name = (): string => super.Name();\n    public  AttackPower = (): number => super.AttackPower();\n}\nexport  class Gull extends BaseWeapon {\n    constructor() {\n        super(\"Gull\", 2);\n    }\n    public Name = (): string => super.Name();\n    public  AttackPower = (): number => super.AttackPower();\n}\n```\n\n然後透過繼承生成出了Flery Gull、Flery Sword、Static Gull、Static Sword\n```javascript\nimport { Gull } from \"./Gull\";\nimport { Sword } from \"./Sword\";\nexport  class FleryGull extends Gull {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `烈焰的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 16;\n}\nexport  class FlerySword extends Sword {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `烈焰的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 16;\n}\nexport  class StaticGull extends Gull {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `靜電的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 4;\n}\nexport  class StaticSword extends Sword {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `靜電的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 4;\n}\n```\n```javascript\nlet sword = new Sword();\nconsole.log(`${sword.Name} : ${sword.AttackPower}`);\nlet gull = new Gull();\nconsole.log(`${gull.Name} : ${gull.AttackPower}`);\nlet flerySword = new FlerySword();\nconsole.log(`${flerySword.Name} : ${flerySword.AttackPower}`);\nlet staicGull = new StaticGull();\nconsole.log(`${staicGull.Name} : ${staicGull.AttackPower}`);\n```\n```\nSword : 9\nGull : 2\n烈焰的Sword : 25\n靜電的Gull : 6\n```\n\nClass Diagram\n![](/images/DP/aDtcx6P.png)\n\n**But!!!**\n這才2種武器，2個特效，我已經有4個類別(2*2)。 2層繼承。\n當我前綴又再一層時，或者有後綴的出現，整個很難維護。\n再這情境上，我很可能會有一把是”靜電的烈焰”或”烈焰的靜電”\n這樣在現在設計上是不同類別，太多本質相似的類別需要維護了。\n\n整理發生幾個現象 : **繼承層數過多**、**類別數量激增**\n繼承超過兩層，可以想想是不是自己設計上出了問題，因為這樣維護成本只會越來越繁重。\n\n為解決這些問題，增加一個抽象方法或介面類別來封裝武器類別。\n從上面可發現，我第二層跟第三層的類別基本上都是有共同的介面去實作一些行為。\n\nComponents: (要被裝飾物件)\n```javascript\nexport interface BaseWeapon {\n    Name(): string;\n    AttackPower(): number;\n    Attack(): void;\n}\nexport  class Sword implements BaseWeapon {\n    private name: string;\n    private attackPower: number;\n    constructor() {\n        this.name = \"Sword\";\n        this.attackPower = 9;\n    }\n    public Name = (): string => this.name;\n    public  AttackPower = (): number => this.attackPower;\n    public Attack = (): void => console.log(`${this.name}打出了${this.attackPower}點傷害!`);\n}\nexport  class Gull implements BaseWeapon {\n    private name: string;\n    private attackPower: number;\n    constructor() {\n        this.name = \"Gull\";\n        this.attackPower = 2;\n    }\n    public Name = (): string => this.name;\n    public  AttackPower = (): number => this.attackPower;\n    public Attack = (): void => console.log(`${this.name}打出了${this.attackPower}點傷害!`);\n}\n```\n\nDecorators : 要加上的動態職責，需要有跟Components一樣的介面。\n```javascript\nexport abstract class WeaponDecorator implements BaseWeapon{\n    protected name: string;\n    protected attackPower: number;\n    protected weapon: BaseWeapon;\n    constructor(name: string, attackPower: number, weapon: BaseWeapon) {\n        this.name = name;\n        this.attackPower = attackPower;\n        this.weapon = weapon;\n    }\n    public Name = (): string => this.name + this.weapon.Name();\n    public AttackPower = (): number => this.attackPower + this.weapon.AttackPower();\n    public Attack = (): void => console.log(`${this.Name()}打出了${this.AttackPower()}點傷害!`);\n}\nexport class FleryDecorator extends WeaponDecorator{\n    constructor(weapon: BaseWeapon) {\n        debugger;\n        if(weapon.Name().indexOf(\"烈焰的\") === -1)\n            super(\"烈焰的\", 16, weapon);\n        else  super(\"\", 0, weapon);\n    }\n}\nexport class StaticDecorator extends WeaponDecorator{\n    constructor(weapon: BaseWeapon) {\n        if(weapon.Name().indexOf(\"靜電的\") === -1)\n            super(\"靜電的\", 4, weapon);\n        else super(\"\", 0, weapon);\n    }\n}\n```\n\n```javascript\nconst sword = new Sword();\n    const flerySword = new FleryDecorator(sword);\n    flerySword.Attack();\n    const staticFleryword = new StaticDecorator(flerySword);\n    staticFleryword.Attack();\n    const gull = new Gull();\n    const staticGull = new StaticDecorator(gull);\n    staticGull.Attack();\n    const fleryStaticGull = new FleryDecorator(staticGull);\n    fleryStaticGull.Attack();\n```\n```\n烈焰的Sword打出了25點傷害!\n靜電的烈焰的Sword打出了29點傷害!\n靜電的Gull打出了6點傷害!\n烈焰的靜電的Gull打出了22點傷害!\n```\n\nClass Diagram :\n![](/images/DP/ZwtEQJ4.png)\n可以看到繼承關係被簡化了，組件跟功能之間變成組合關係。\n\n## 裝飾者模式的定義\nAttach additional responsibilities to an object **dynamically** keeping **the same interface**.\nDecorators provide a flexible alternative to subclassing for extending functionality.\n(動態的給一個對象添加一些額外的職責，就功能面來說，裝是者模式 比 增加子類別靈活)\n\nCompoent抽象類別(BaseWeapon): 原有類別的抽象類或是一組介面\nConcreteCompoent : 被裝飾的具体對象，需要去實現Compoent。\nDecorator : 也是一個抽象類別，實現Compontet，且裡面一定要有一個變數指向Componet抽象物件實體。 舉例: WeaponDecorator中的protected weapon: BaseWeapon 。\nConcreteDecorator : Decorator的實作。主要就把基本的東西裝飾成其他東西。\n\n### Pros :\n* ConcreteDecorator跟ConcreteComponent可以獨立發展，而不會相互耦合。In other words, 兩方不需要知道彼此的存在。Decorator類是從外部來擴展Component類別的功能，而Decorator也不知道具體的物件。舉例: Decorator依賴的其實是Compoenent的抽象或介面，且是組合關係。\n* 是繼承關係的一種替代方案。看Decorator，不管裝飾多少層，返回的對象還是Component的抽象。實現的是is-a的關係。\n* 可以動態的擴展一個類別的功能，就是該模式的定義。\n* 裝飾者可以擴充Component的狀態，或是修改原有實作方法。  \n\n### Cons :\n* 除錯比較困難，多層裝飾下，因為會像是剝洋蔥一樣，可能要撥到最裡面那層，才發現出了問題。  \n\n###使用場景\n* 需要擴展一個類別的功能，又或者需要付加給它時。\n* 需要動態的給一個對象增加功能，或者是動態的撤回。\n* 需要為一大群兄弟類別進行改裝或加裝功能時。\n\n## 使用Curry的概念來練習\n```javascript\nclass Sword {\n    private name: string;\n    private attackPower: number;\n    constructor() {\n        this.name = \"Sword\";\n        this.attackPower = 9;\n    }\n    public Name = (): string => this.name;\n    public AddPrefixAndAttackPower = (prefix: string, power: number) => {\n        this.name = prefix + this.name; \n        this.attackPower += power;\n    }\n    public AttackPower = (): number => this.attackPower;\n    public Attack = (): void => console.log(`${this.name}打出了${this.attackPower}點傷害!`);\n}\ninterface PrefixValue {\n    prefix: string,\n    attachPower: number\n}\nconst Prefix = (prefixValue: PrefixValue) => {\n    return function(sword: Sword) {\n        sword.AddPrefixAndAttackPower(prefixValue.prefix, prefixValue.attachPower);\n        return sword;\n    }\n}\nconst FleryValue: PrefixValue = {prefix:\"烈焰的\", attachPower: 16};\nPrefix(FleryValue)(new Sword()).Attack();\n```\n```\n烈焰的Sword打出了25點傷害!\n```\n\n### 與Proxy的差異?\n等Proxy pattern寫完文章，再來一起比較。\n\n### ES6的Decorator?\ntodo XD","source":"_posts/Decorator-Pattern.md","raw":"---\ntitle: Decorator_Pattern\ndate: 2019-04-23 14:09:19\ntags:\n    - Design Pattern\n    - TypeScript\n    - JavaScript\n---\n做武器系統\n今天想模仿暗黑破壞神的武器系統那樣\n![](/images/DP/xqVWxxO.png)\n\n利用前綴詞為武器加上能力。\n[D2魔法前綴詞表](http://wiki.d.163.com/index.php?title=Magic_Prefixes_and_Suffixes_(Diablo2)\n\n首先我先建立一個基礎類別，然後各種武器(刀、劍、斧 等等)繼承於它。\n```javascript\nexport abstract class BaseWeapon {\n    private name: string;\n    private attackPower: number;\n    constructor(name: string, attackPower: number) {\n        this.name = name;\n        this.attackPower = attackPower;\n    }\n    public Name = (): string => this.name;\n    public AttackPower = (): number => this.attackPower;\n}\n```\n\n\n再來建立了一個劍和匕首類別\n```javascript\nimport { BaseWeapon } from \"./BaseWeapon\";\nexport  class Sword extends BaseWeapon {\n    constructor() {\n        super(\"Sword\", 9);\n    }\n    public Name = (): string => super.Name();\n    public  AttackPower = (): number => super.AttackPower();\n}\nexport  class Gull extends BaseWeapon {\n    constructor() {\n        super(\"Gull\", 2);\n    }\n    public Name = (): string => super.Name();\n    public  AttackPower = (): number => super.AttackPower();\n}\n```\n\n然後透過繼承生成出了Flery Gull、Flery Sword、Static Gull、Static Sword\n```javascript\nimport { Gull } from \"./Gull\";\nimport { Sword } from \"./Sword\";\nexport  class FleryGull extends Gull {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `烈焰的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 16;\n}\nexport  class FlerySword extends Sword {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `烈焰的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 16;\n}\nexport  class StaticGull extends Gull {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `靜電的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 4;\n}\nexport  class StaticSword extends Sword {\n    constructor()  {\n        super()\n    }\n    public Name = (): string => `靜電的${super.Name}`;\n    public  AttackPower = (): number => super.AttackPower() + 4;\n}\n```\n```javascript\nlet sword = new Sword();\nconsole.log(`${sword.Name} : ${sword.AttackPower}`);\nlet gull = new Gull();\nconsole.log(`${gull.Name} : ${gull.AttackPower}`);\nlet flerySword = new FlerySword();\nconsole.log(`${flerySword.Name} : ${flerySword.AttackPower}`);\nlet staicGull = new StaticGull();\nconsole.log(`${staicGull.Name} : ${staicGull.AttackPower}`);\n```\n```\nSword : 9\nGull : 2\n烈焰的Sword : 25\n靜電的Gull : 6\n```\n\nClass Diagram\n![](/images/DP/aDtcx6P.png)\n\n**But!!!**\n這才2種武器，2個特效，我已經有4個類別(2*2)。 2層繼承。\n當我前綴又再一層時，或者有後綴的出現，整個很難維護。\n再這情境上，我很可能會有一把是”靜電的烈焰”或”烈焰的靜電”\n這樣在現在設計上是不同類別，太多本質相似的類別需要維護了。\n\n整理發生幾個現象 : **繼承層數過多**、**類別數量激增**\n繼承超過兩層，可以想想是不是自己設計上出了問題，因為這樣維護成本只會越來越繁重。\n\n為解決這些問題，增加一個抽象方法或介面類別來封裝武器類別。\n從上面可發現，我第二層跟第三層的類別基本上都是有共同的介面去實作一些行為。\n\nComponents: (要被裝飾物件)\n```javascript\nexport interface BaseWeapon {\n    Name(): string;\n    AttackPower(): number;\n    Attack(): void;\n}\nexport  class Sword implements BaseWeapon {\n    private name: string;\n    private attackPower: number;\n    constructor() {\n        this.name = \"Sword\";\n        this.attackPower = 9;\n    }\n    public Name = (): string => this.name;\n    public  AttackPower = (): number => this.attackPower;\n    public Attack = (): void => console.log(`${this.name}打出了${this.attackPower}點傷害!`);\n}\nexport  class Gull implements BaseWeapon {\n    private name: string;\n    private attackPower: number;\n    constructor() {\n        this.name = \"Gull\";\n        this.attackPower = 2;\n    }\n    public Name = (): string => this.name;\n    public  AttackPower = (): number => this.attackPower;\n    public Attack = (): void => console.log(`${this.name}打出了${this.attackPower}點傷害!`);\n}\n```\n\nDecorators : 要加上的動態職責，需要有跟Components一樣的介面。\n```javascript\nexport abstract class WeaponDecorator implements BaseWeapon{\n    protected name: string;\n    protected attackPower: number;\n    protected weapon: BaseWeapon;\n    constructor(name: string, attackPower: number, weapon: BaseWeapon) {\n        this.name = name;\n        this.attackPower = attackPower;\n        this.weapon = weapon;\n    }\n    public Name = (): string => this.name + this.weapon.Name();\n    public AttackPower = (): number => this.attackPower + this.weapon.AttackPower();\n    public Attack = (): void => console.log(`${this.Name()}打出了${this.AttackPower()}點傷害!`);\n}\nexport class FleryDecorator extends WeaponDecorator{\n    constructor(weapon: BaseWeapon) {\n        debugger;\n        if(weapon.Name().indexOf(\"烈焰的\") === -1)\n            super(\"烈焰的\", 16, weapon);\n        else  super(\"\", 0, weapon);\n    }\n}\nexport class StaticDecorator extends WeaponDecorator{\n    constructor(weapon: BaseWeapon) {\n        if(weapon.Name().indexOf(\"靜電的\") === -1)\n            super(\"靜電的\", 4, weapon);\n        else super(\"\", 0, weapon);\n    }\n}\n```\n\n```javascript\nconst sword = new Sword();\n    const flerySword = new FleryDecorator(sword);\n    flerySword.Attack();\n    const staticFleryword = new StaticDecorator(flerySword);\n    staticFleryword.Attack();\n    const gull = new Gull();\n    const staticGull = new StaticDecorator(gull);\n    staticGull.Attack();\n    const fleryStaticGull = new FleryDecorator(staticGull);\n    fleryStaticGull.Attack();\n```\n```\n烈焰的Sword打出了25點傷害!\n靜電的烈焰的Sword打出了29點傷害!\n靜電的Gull打出了6點傷害!\n烈焰的靜電的Gull打出了22點傷害!\n```\n\nClass Diagram :\n![](/images/DP/ZwtEQJ4.png)\n可以看到繼承關係被簡化了，組件跟功能之間變成組合關係。\n\n## 裝飾者模式的定義\nAttach additional responsibilities to an object **dynamically** keeping **the same interface**.\nDecorators provide a flexible alternative to subclassing for extending functionality.\n(動態的給一個對象添加一些額外的職責，就功能面來說，裝是者模式 比 增加子類別靈活)\n\nCompoent抽象類別(BaseWeapon): 原有類別的抽象類或是一組介面\nConcreteCompoent : 被裝飾的具体對象，需要去實現Compoent。\nDecorator : 也是一個抽象類別，實現Compontet，且裡面一定要有一個變數指向Componet抽象物件實體。 舉例: WeaponDecorator中的protected weapon: BaseWeapon 。\nConcreteDecorator : Decorator的實作。主要就把基本的東西裝飾成其他東西。\n\n### Pros :\n* ConcreteDecorator跟ConcreteComponent可以獨立發展，而不會相互耦合。In other words, 兩方不需要知道彼此的存在。Decorator類是從外部來擴展Component類別的功能，而Decorator也不知道具體的物件。舉例: Decorator依賴的其實是Compoenent的抽象或介面，且是組合關係。\n* 是繼承關係的一種替代方案。看Decorator，不管裝飾多少層，返回的對象還是Component的抽象。實現的是is-a的關係。\n* 可以動態的擴展一個類別的功能，就是該模式的定義。\n* 裝飾者可以擴充Component的狀態，或是修改原有實作方法。  \n\n### Cons :\n* 除錯比較困難，多層裝飾下，因為會像是剝洋蔥一樣，可能要撥到最裡面那層，才發現出了問題。  \n\n###使用場景\n* 需要擴展一個類別的功能，又或者需要付加給它時。\n* 需要動態的給一個對象增加功能，或者是動態的撤回。\n* 需要為一大群兄弟類別進行改裝或加裝功能時。\n\n## 使用Curry的概念來練習\n```javascript\nclass Sword {\n    private name: string;\n    private attackPower: number;\n    constructor() {\n        this.name = \"Sword\";\n        this.attackPower = 9;\n    }\n    public Name = (): string => this.name;\n    public AddPrefixAndAttackPower = (prefix: string, power: number) => {\n        this.name = prefix + this.name; \n        this.attackPower += power;\n    }\n    public AttackPower = (): number => this.attackPower;\n    public Attack = (): void => console.log(`${this.name}打出了${this.attackPower}點傷害!`);\n}\ninterface PrefixValue {\n    prefix: string,\n    attachPower: number\n}\nconst Prefix = (prefixValue: PrefixValue) => {\n    return function(sword: Sword) {\n        sword.AddPrefixAndAttackPower(prefixValue.prefix, prefixValue.attachPower);\n        return sword;\n    }\n}\nconst FleryValue: PrefixValue = {prefix:\"烈焰的\", attachPower: 16};\nPrefix(FleryValue)(new Sword()).Attack();\n```\n```\n烈焰的Sword打出了25點傷害!\n```\n\n### 與Proxy的差異?\n等Proxy pattern寫完文章，再來一起比較。\n\n### ES6的Decorator?\ntodo XD","slug":"Decorator-Pattern","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55clv0002ck6xqc0bpn5l","content":"<p>做武器系統<br>今天想模仿暗黑破壞神的武器系統那樣<br><img src=\"/images/DP/xqVWxxO.png\" alt></p>\n<p>利用前綴詞為武器加上能力。<br><a href=\"http://wiki.d.163.com/index.php?title=Magic_Prefixes_and_Suffixes_(Diablo2\" target=\"_blank\" rel=\"noopener\">D2魔法前綴詞表</a></p>\n<p>首先我先建立一個基礎類別，然後各種武器(刀、劍、斧 等等)繼承於它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, attackPower: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = attackPower;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再來建立了一個劍和匕首類別</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BaseWeapon &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./BaseWeapon\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sword</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"Sword\"</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">super</span>.Name();</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gull</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"Gull\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">super</span>.Name();</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後透過繼承生成出了Flery Gull、Flery Sword、Static Gull、Static Sword</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Gull &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./Gull\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Sword &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./Sword\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FleryGull</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gull</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`烈焰的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlerySword</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sword</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`烈焰的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticGull</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gull</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`靜電的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticSword</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sword</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`靜電的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sword = <span class=\"keyword\">new</span> Sword();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;sword.Name&#125;</span> : <span class=\"subst\">$&#123;sword.AttackPower&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> gull = <span class=\"keyword\">new</span> Gull();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;gull.Name&#125;</span> : <span class=\"subst\">$&#123;gull.AttackPower&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> flerySword = <span class=\"keyword\">new</span> FlerySword();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;flerySword.Name&#125;</span> : <span class=\"subst\">$&#123;flerySword.AttackPower&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> staicGull = <span class=\"keyword\">new</span> StaticGull();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;staicGull.Name&#125;</span> : <span class=\"subst\">$&#123;staicGull.AttackPower&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sword : 9</span><br><span class=\"line\">Gull : 2</span><br><span class=\"line\">烈焰的Sword : 25</span><br><span class=\"line\">靜電的Gull : 6</span><br></pre></td></tr></table></figure>\n\n<p>Class Diagram<br><img src=\"/images/DP/aDtcx6P.png\" alt></p>\n<p><strong>But!!!</strong><br>這才2種武器，2個特效，我已經有4個類別(2*2)。 2層繼承。<br>當我前綴又再一層時，或者有後綴的出現，整個很難維護。<br>再這情境上，我很可能會有一把是”靜電的烈焰”或”烈焰的靜電”<br>這樣在現在設計上是不同類別，太多本質相似的類別需要維護了。</p>\n<p>整理發生幾個現象 : <strong>繼承層數過多</strong>、<strong>類別數量激增</strong><br>繼承超過兩層，可以想想是不是自己設計上出了問題，因為這樣維護成本只會越來越繁重。</p>\n<p>為解決這些問題，增加一個抽象方法或介面類別來封裝武器類別。<br>從上面可發現，我第二層跟第三層的類別基本上都是有共同的介面去實作一些行為。</p>\n<p>Components: (要被裝飾物件)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> interface BaseWeapon &#123;</span><br><span class=\"line\">    Name(): string;</span><br><span class=\"line\">    AttackPower(): number;</span><br><span class=\"line\">    Attack(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sword</span> <span class=\"title\">implements</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Sword\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.attackPower&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gull</span> <span class=\"title\">implements</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Gull\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.attackPower&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Decorators : 要加上的動態職責，需要有跟Components一樣的介面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeaponDecorator</span> <span class=\"title\">implements</span> <span class=\"title\">BaseWeapon</span></span>&#123;</span><br><span class=\"line\">    protected name: string;</span><br><span class=\"line\">    protected attackPower: number;</span><br><span class=\"line\">    protected weapon: BaseWeapon;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, attackPower: number, weapon: BaseWeapon) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = attackPower;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.weapon = weapon;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name + <span class=\"keyword\">this</span>.weapon.Name();</span><br><span class=\"line\">    public AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower + <span class=\"keyword\">this</span>.weapon.AttackPower();</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.Name()&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.AttackPower()&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FleryDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeaponDecorator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(weapon: BaseWeapon) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(weapon.Name().indexOf(<span class=\"string\">\"烈焰的\"</span>) === <span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"烈焰的\"</span>, <span class=\"number\">16</span>, weapon);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"keyword\">super</span>(<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, weapon);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeaponDecorator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(weapon: BaseWeapon) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(weapon.Name().indexOf(<span class=\"string\">\"靜電的\"</span>) === <span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"靜電的\"</span>, <span class=\"number\">4</span>, weapon);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">super</span>(<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, weapon);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sword = <span class=\"keyword\">new</span> Sword();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> flerySword = <span class=\"keyword\">new</span> FleryDecorator(sword);</span><br><span class=\"line\">    flerySword.Attack();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> staticFleryword = <span class=\"keyword\">new</span> StaticDecorator(flerySword);</span><br><span class=\"line\">    staticFleryword.Attack();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> gull = <span class=\"keyword\">new</span> Gull();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> staticGull = <span class=\"keyword\">new</span> StaticDecorator(gull);</span><br><span class=\"line\">    staticGull.Attack();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fleryStaticGull = <span class=\"keyword\">new</span> FleryDecorator(staticGull);</span><br><span class=\"line\">    fleryStaticGull.Attack();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">烈焰的Sword打出了25點傷害!</span><br><span class=\"line\">靜電的烈焰的Sword打出了29點傷害!</span><br><span class=\"line\">靜電的Gull打出了6點傷害!</span><br><span class=\"line\">烈焰的靜電的Gull打出了22點傷害!</span><br></pre></td></tr></table></figure>\n\n<p>Class Diagram :<br><img src=\"/images/DP/ZwtEQJ4.png\" alt><br>可以看到繼承關係被簡化了，組件跟功能之間變成組合關係。</p>\n<h2 id=\"裝飾者模式的定義\"><a href=\"#裝飾者模式的定義\" class=\"headerlink\" title=\"裝飾者模式的定義\"></a>裝飾者模式的定義</h2><p>Attach additional responsibilities to an object <strong>dynamically</strong> keeping <strong>the same interface</strong>.<br>Decorators provide a flexible alternative to subclassing for extending functionality.<br>(動態的給一個對象添加一些額外的職責，就功能面來說，裝是者模式 比 增加子類別靈活)</p>\n<p>Compoent抽象類別(BaseWeapon): 原有類別的抽象類或是一組介面<br>ConcreteCompoent : 被裝飾的具体對象，需要去實現Compoent。<br>Decorator : 也是一個抽象類別，實現Compontet，且裡面一定要有一個變數指向Componet抽象物件實體。 舉例: WeaponDecorator中的protected weapon: BaseWeapon 。<br>ConcreteDecorator : Decorator的實作。主要就把基本的東西裝飾成其他東西。</p>\n<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h3><ul>\n<li>ConcreteDecorator跟ConcreteComponent可以獨立發展，而不會相互耦合。In other words, 兩方不需要知道彼此的存在。Decorator類是從外部來擴展Component類別的功能，而Decorator也不知道具體的物件。舉例: Decorator依賴的其實是Compoenent的抽象或介面，且是組合關係。</li>\n<li>是繼承關係的一種替代方案。看Decorator，不管裝飾多少層，返回的對象還是Component的抽象。實現的是is-a的關係。</li>\n<li>可以動態的擴展一個類別的功能，就是該模式的定義。</li>\n<li>裝飾者可以擴充Component的狀態，或是修改原有實作方法。  </li>\n</ul>\n<h3 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons :\"></a>Cons :</h3><ul>\n<li>除錯比較困難，多層裝飾下，因為會像是剝洋蔥一樣，可能要撥到最裡面那層，才發現出了問題。  </li>\n</ul>\n<p>###使用場景</p>\n<ul>\n<li>需要擴展一個類別的功能，又或者需要付加給它時。</li>\n<li>需要動態的給一個對象增加功能，或者是動態的撤回。</li>\n<li>需要為一大群兄弟類別進行改裝或加裝功能時。</li>\n</ul>\n<h2 id=\"使用Curry的概念來練習\"><a href=\"#使用Curry的概念來練習\" class=\"headerlink\" title=\"使用Curry的概念來練習\"></a>使用Curry的概念來練習</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sword</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Sword\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public AddPrefixAndAttackPower = <span class=\"function\">(<span class=\"params\">prefix: string, power: number</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = prefix + <span class=\"keyword\">this</span>.name; </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower += power;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.attackPower&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface PrefixValue &#123;</span><br><span class=\"line\">    prefix: string,</span><br><span class=\"line\">    attachPower: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Prefix = <span class=\"function\">(<span class=\"params\">prefixValue: PrefixValue</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sword: Sword</span>) </span>&#123;</span><br><span class=\"line\">        sword.AddPrefixAndAttackPower(prefixValue.prefix, prefixValue.attachPower);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sword;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FleryValue: PrefixValue = &#123;<span class=\"attr\">prefix</span>:<span class=\"string\">\"烈焰的\"</span>, <span class=\"attr\">attachPower</span>: <span class=\"number\">16</span>&#125;;</span><br><span class=\"line\">Prefix(FleryValue)(<span class=\"keyword\">new</span> Sword()).Attack();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">烈焰的Sword打出了25點傷害!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"與Proxy的差異\"><a href=\"#與Proxy的差異\" class=\"headerlink\" title=\"與Proxy的差異?\"></a>與Proxy的差異?</h3><p>等Proxy pattern寫完文章，再來一起比較。</p>\n<h3 id=\"ES6的Decorator\"><a href=\"#ES6的Decorator\" class=\"headerlink\" title=\"ES6的Decorator?\"></a>ES6的Decorator?</h3><p>todo XD</p>\n","site":{"data":{}},"excerpt":"","more":"<p>做武器系統<br>今天想模仿暗黑破壞神的武器系統那樣<br><img src=\"/images/DP/xqVWxxO.png\" alt></p>\n<p>利用前綴詞為武器加上能力。<br><a href=\"http://wiki.d.163.com/index.php?title=Magic_Prefixes_and_Suffixes_(Diablo2\" target=\"_blank\" rel=\"noopener\">D2魔法前綴詞表</a></p>\n<p>首先我先建立一個基礎類別，然後各種武器(刀、劍、斧 等等)繼承於它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, attackPower: number) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = attackPower;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再來建立了一個劍和匕首類別</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; BaseWeapon &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./BaseWeapon\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sword</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"Sword\"</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">super</span>.Name();</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gull</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"Gull\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">super</span>.Name();</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然後透過繼承生成出了Flery Gull、Flery Sword、Static Gull、Static Sword</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Gull &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./Gull\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Sword &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./Sword\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FleryGull</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gull</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`烈焰的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlerySword</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sword</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`烈焰的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">16</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticGull</span> <span class=\"keyword\">extends</span> <span class=\"title\">Gull</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`靜電的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticSword</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sword</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>()  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"string\">`靜電的<span class=\"subst\">$&#123;<span class=\"keyword\">super</span>.Name&#125;</span>`</span>;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">super</span>.AttackPower() + <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sword = <span class=\"keyword\">new</span> Sword();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;sword.Name&#125;</span> : <span class=\"subst\">$&#123;sword.AttackPower&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> gull = <span class=\"keyword\">new</span> Gull();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;gull.Name&#125;</span> : <span class=\"subst\">$&#123;gull.AttackPower&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> flerySword = <span class=\"keyword\">new</span> FlerySword();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;flerySword.Name&#125;</span> : <span class=\"subst\">$&#123;flerySword.AttackPower&#125;</span>`</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> staicGull = <span class=\"keyword\">new</span> StaticGull();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;staicGull.Name&#125;</span> : <span class=\"subst\">$&#123;staicGull.AttackPower&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sword : 9</span><br><span class=\"line\">Gull : 2</span><br><span class=\"line\">烈焰的Sword : 25</span><br><span class=\"line\">靜電的Gull : 6</span><br></pre></td></tr></table></figure>\n\n<p>Class Diagram<br><img src=\"/images/DP/aDtcx6P.png\" alt></p>\n<p><strong>But!!!</strong><br>這才2種武器，2個特效，我已經有4個類別(2*2)。 2層繼承。<br>當我前綴又再一層時，或者有後綴的出現，整個很難維護。<br>再這情境上，我很可能會有一把是”靜電的烈焰”或”烈焰的靜電”<br>這樣在現在設計上是不同類別，太多本質相似的類別需要維護了。</p>\n<p>整理發生幾個現象 : <strong>繼承層數過多</strong>、<strong>類別數量激增</strong><br>繼承超過兩層，可以想想是不是自己設計上出了問題，因為這樣維護成本只會越來越繁重。</p>\n<p>為解決這些問題，增加一個抽象方法或介面類別來封裝武器類別。<br>從上面可發現，我第二層跟第三層的類別基本上都是有共同的介面去實作一些行為。</p>\n<p>Components: (要被裝飾物件)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> interface BaseWeapon &#123;</span><br><span class=\"line\">    Name(): string;</span><br><span class=\"line\">    AttackPower(): number;</span><br><span class=\"line\">    Attack(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sword</span> <span class=\"title\">implements</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Sword\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.attackPower&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Gull</span> <span class=\"title\">implements</span> <span class=\"title\">BaseWeapon</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Gull\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public  AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.attackPower&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Decorators : 要加上的動態職責，需要有跟Components一樣的介面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeaponDecorator</span> <span class=\"title\">implements</span> <span class=\"title\">BaseWeapon</span></span>&#123;</span><br><span class=\"line\">    protected name: string;</span><br><span class=\"line\">    protected attackPower: number;</span><br><span class=\"line\">    protected weapon: BaseWeapon;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, attackPower: number, weapon: BaseWeapon) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = attackPower;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.weapon = weapon;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name + <span class=\"keyword\">this</span>.weapon.Name();</span><br><span class=\"line\">    public AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower + <span class=\"keyword\">this</span>.weapon.AttackPower();</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.Name()&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.AttackPower()&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FleryDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeaponDecorator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(weapon: BaseWeapon) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(weapon.Name().indexOf(<span class=\"string\">\"烈焰的\"</span>) === <span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"烈焰的\"</span>, <span class=\"number\">16</span>, weapon);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"keyword\">super</span>(<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, weapon);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeaponDecorator</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(weapon: BaseWeapon) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(weapon.Name().indexOf(<span class=\"string\">\"靜電的\"</span>) === <span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(<span class=\"string\">\"靜電的\"</span>, <span class=\"number\">4</span>, weapon);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">super</span>(<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, weapon);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sword = <span class=\"keyword\">new</span> Sword();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> flerySword = <span class=\"keyword\">new</span> FleryDecorator(sword);</span><br><span class=\"line\">    flerySword.Attack();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> staticFleryword = <span class=\"keyword\">new</span> StaticDecorator(flerySword);</span><br><span class=\"line\">    staticFleryword.Attack();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> gull = <span class=\"keyword\">new</span> Gull();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> staticGull = <span class=\"keyword\">new</span> StaticDecorator(gull);</span><br><span class=\"line\">    staticGull.Attack();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fleryStaticGull = <span class=\"keyword\">new</span> FleryDecorator(staticGull);</span><br><span class=\"line\">    fleryStaticGull.Attack();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">烈焰的Sword打出了25點傷害!</span><br><span class=\"line\">靜電的烈焰的Sword打出了29點傷害!</span><br><span class=\"line\">靜電的Gull打出了6點傷害!</span><br><span class=\"line\">烈焰的靜電的Gull打出了22點傷害!</span><br></pre></td></tr></table></figure>\n\n<p>Class Diagram :<br><img src=\"/images/DP/ZwtEQJ4.png\" alt><br>可以看到繼承關係被簡化了，組件跟功能之間變成組合關係。</p>\n<h2 id=\"裝飾者模式的定義\"><a href=\"#裝飾者模式的定義\" class=\"headerlink\" title=\"裝飾者模式的定義\"></a>裝飾者模式的定義</h2><p>Attach additional responsibilities to an object <strong>dynamically</strong> keeping <strong>the same interface</strong>.<br>Decorators provide a flexible alternative to subclassing for extending functionality.<br>(動態的給一個對象添加一些額外的職責，就功能面來說，裝是者模式 比 增加子類別靈活)</p>\n<p>Compoent抽象類別(BaseWeapon): 原有類別的抽象類或是一組介面<br>ConcreteCompoent : 被裝飾的具体對象，需要去實現Compoent。<br>Decorator : 也是一個抽象類別，實現Compontet，且裡面一定要有一個變數指向Componet抽象物件實體。 舉例: WeaponDecorator中的protected weapon: BaseWeapon 。<br>ConcreteDecorator : Decorator的實作。主要就把基本的東西裝飾成其他東西。</p>\n<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h3><ul>\n<li>ConcreteDecorator跟ConcreteComponent可以獨立發展，而不會相互耦合。In other words, 兩方不需要知道彼此的存在。Decorator類是從外部來擴展Component類別的功能，而Decorator也不知道具體的物件。舉例: Decorator依賴的其實是Compoenent的抽象或介面，且是組合關係。</li>\n<li>是繼承關係的一種替代方案。看Decorator，不管裝飾多少層，返回的對象還是Component的抽象。實現的是is-a的關係。</li>\n<li>可以動態的擴展一個類別的功能，就是該模式的定義。</li>\n<li>裝飾者可以擴充Component的狀態，或是修改原有實作方法。  </li>\n</ul>\n<h3 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons :\"></a>Cons :</h3><ul>\n<li>除錯比較困難，多層裝飾下，因為會像是剝洋蔥一樣，可能要撥到最裡面那層，才發現出了問題。  </li>\n</ul>\n<p>###使用場景</p>\n<ul>\n<li>需要擴展一個類別的功能，又或者需要付加給它時。</li>\n<li>需要動態的給一個對象增加功能，或者是動態的撤回。</li>\n<li>需要為一大群兄弟類別進行改裝或加裝功能時。</li>\n</ul>\n<h2 id=\"使用Curry的概念來練習\"><a href=\"#使用Curry的概念來練習\" class=\"headerlink\" title=\"使用Curry的概念來練習\"></a>使用Curry的概念來練習</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sword</span> </span>&#123;</span><br><span class=\"line\">    private name: string;</span><br><span class=\"line\">    private attackPower: number;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = <span class=\"string\">\"Sword\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower = <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public Name = (): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    public AddPrefixAndAttackPower = <span class=\"function\">(<span class=\"params\">prefix: string, power: number</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = prefix + <span class=\"keyword\">this</span>.name; </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.attackPower += power;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public AttackPower = (): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> <span class=\"keyword\">this</span>.attackPower;</span><br><span class=\"line\">    public Attack = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>打出了<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.attackPower&#125;</span>點傷害!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface PrefixValue &#123;</span><br><span class=\"line\">    prefix: string,</span><br><span class=\"line\">    attachPower: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Prefix = <span class=\"function\">(<span class=\"params\">prefixValue: PrefixValue</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sword: Sword</span>) </span>&#123;</span><br><span class=\"line\">        sword.AddPrefixAndAttackPower(prefixValue.prefix, prefixValue.attachPower);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sword;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FleryValue: PrefixValue = &#123;<span class=\"attr\">prefix</span>:<span class=\"string\">\"烈焰的\"</span>, <span class=\"attr\">attachPower</span>: <span class=\"number\">16</span>&#125;;</span><br><span class=\"line\">Prefix(FleryValue)(<span class=\"keyword\">new</span> Sword()).Attack();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">烈焰的Sword打出了25點傷害!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"與Proxy的差異\"><a href=\"#與Proxy的差異\" class=\"headerlink\" title=\"與Proxy的差異?\"></a>與Proxy的差異?</h3><p>等Proxy pattern寫完文章，再來一起比較。</p>\n<h3 id=\"ES6的Decorator\"><a href=\"#ES6的Decorator\" class=\"headerlink\" title=\"ES6的Decorator?\"></a>ES6的Decorator?</h3><p>todo XD</p>\n"},{"title":"Docker入門_01","date":"2017-11-12T16:01:59.000Z","_content":"# What is Docker?\n<!--more-->\n![](/images/Docker01/640.jpg)\n\nDocker從廣義上是個服務容器(Application Container)，基本上跟一般系統中執行的Process並無不同，特別的是它負責操作鏡像檔案(images)。\n所以Docker+構建昇成出來的image file == Docker Container。\n\n## Windows上的Docker有何不同\nDocker在Windows上安裝好時，會自動安裝一個Docker專用的Linux虛擬機，透過Hyper-V來管理。透過這個Linux虛擬基在背後提供和運行Container的方式來達成使用。\n\n也正因為如此，所以目前找到的打包好的image file都是以Linux為主的原因了。\n所以基本上，Docker上的容器都是跑在Linux內核中，只是單獨包成一隻應用程式檔，掛載進去Docker的進程內。\n\nDocker images鏡像 ，就類似於VM中的快照，但容量卻小上許多，Docker透過ID或是容易識別的別名+tag來抓到唯一的目標鏡像檔。ImagesID是一個64bit長度的字串，但通常只要使用前4碼即可。\n\n## Ubuntu上安裝Docker\n[Link](https://docs.docker.com/install/linux/docker-ce/ubuntu/)","source":"_posts/Docker入門-01.md","raw":"---\ntitle: Docker入門_01\ndate: 2017-11-13 00:01:59\ncategories: \"Docker\"\ntags:\n    - Docker\n---\n# What is Docker?\n<!--more-->\n![](/images/Docker01/640.jpg)\n\nDocker從廣義上是個服務容器(Application Container)，基本上跟一般系統中執行的Process並無不同，特別的是它負責操作鏡像檔案(images)。\n所以Docker+構建昇成出來的image file == Docker Container。\n\n## Windows上的Docker有何不同\nDocker在Windows上安裝好時，會自動安裝一個Docker專用的Linux虛擬機，透過Hyper-V來管理。透過這個Linux虛擬基在背後提供和運行Container的方式來達成使用。\n\n也正因為如此，所以目前找到的打包好的image file都是以Linux為主的原因了。\n所以基本上，Docker上的容器都是跑在Linux內核中，只是單獨包成一隻應用程式檔，掛載進去Docker的進程內。\n\nDocker images鏡像 ，就類似於VM中的快照，但容量卻小上許多，Docker透過ID或是容易識別的別名+tag來抓到唯一的目標鏡像檔。ImagesID是一個64bit長度的字串，但通常只要使用前4碼即可。\n\n## Ubuntu上安裝Docker\n[Link](https://docs.docker.com/install/linux/docker-ce/ubuntu/)","slug":"Docker入門-01","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cly0005ck6xb7r4m354","content":"<h1 id=\"What-is-Docker\"><a href=\"#What-is-Docker\" class=\"headerlink\" title=\"What is Docker?\"></a>What is Docker?</h1><a id=\"more\"></a>\n<p><img src=\"/images/Docker01/640.jpg\" alt></p>\n<p>Docker從廣義上是個服務容器(Application Container)，基本上跟一般系統中執行的Process並無不同，特別的是它負責操作鏡像檔案(images)。<br>所以Docker+構建昇成出來的image file == Docker Container。</p>\n<h2 id=\"Windows上的Docker有何不同\"><a href=\"#Windows上的Docker有何不同\" class=\"headerlink\" title=\"Windows上的Docker有何不同\"></a>Windows上的Docker有何不同</h2><p>Docker在Windows上安裝好時，會自動安裝一個Docker專用的Linux虛擬機，透過Hyper-V來管理。透過這個Linux虛擬基在背後提供和運行Container的方式來達成使用。</p>\n<p>也正因為如此，所以目前找到的打包好的image file都是以Linux為主的原因了。<br>所以基本上，Docker上的容器都是跑在Linux內核中，只是單獨包成一隻應用程式檔，掛載進去Docker的進程內。</p>\n<p>Docker images鏡像 ，就類似於VM中的快照，但容量卻小上許多，Docker透過ID或是容易識別的別名+tag來抓到唯一的目標鏡像檔。ImagesID是一個64bit長度的字串，但通常只要使用前4碼即可。</p>\n<h2 id=\"Ubuntu上安裝Docker\"><a href=\"#Ubuntu上安裝Docker\" class=\"headerlink\" title=\"Ubuntu上安裝Docker\"></a>Ubuntu上安裝Docker</h2><p><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" target=\"_blank\" rel=\"noopener\">Link</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"What-is-Docker\"><a href=\"#What-is-Docker\" class=\"headerlink\" title=\"What is Docker?\"></a>What is Docker?</h1>","more":"<p><img src=\"/images/Docker01/640.jpg\" alt></p>\n<p>Docker從廣義上是個服務容器(Application Container)，基本上跟一般系統中執行的Process並無不同，特別的是它負責操作鏡像檔案(images)。<br>所以Docker+構建昇成出來的image file == Docker Container。</p>\n<h2 id=\"Windows上的Docker有何不同\"><a href=\"#Windows上的Docker有何不同\" class=\"headerlink\" title=\"Windows上的Docker有何不同\"></a>Windows上的Docker有何不同</h2><p>Docker在Windows上安裝好時，會自動安裝一個Docker專用的Linux虛擬機，透過Hyper-V來管理。透過這個Linux虛擬基在背後提供和運行Container的方式來達成使用。</p>\n<p>也正因為如此，所以目前找到的打包好的image file都是以Linux為主的原因了。<br>所以基本上，Docker上的容器都是跑在Linux內核中，只是單獨包成一隻應用程式檔，掛載進去Docker的進程內。</p>\n<p>Docker images鏡像 ，就類似於VM中的快照，但容量卻小上許多，Docker透過ID或是容易識別的別名+tag來抓到唯一的目標鏡像檔。ImagesID是一個64bit長度的字串，但通常只要使用前4碼即可。</p>\n<h2 id=\"Ubuntu上安裝Docker\"><a href=\"#Ubuntu上安裝Docker\" class=\"headerlink\" title=\"Ubuntu上安裝Docker\"></a>Ubuntu上安裝Docker</h2><p><a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" target=\"_blank\" rel=\"noopener\">Link</a></p>"},{"title":"Docker Multi Stage Build","date":"2019-08-07T16:06:18.000Z","_content":"![](/images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg)\nDocker 17.05版的發布了Multi-stage build, 讓image肥大的問題有了優雅的解法.\n<!--more--> \n# Our Go program :\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello world!\")\n}\n```\n\n# Single-stage build\nDockerfile :\n```dockerfile=\nFROM golang:alpine\nWORKDIR /app\nADD . /app\nRUN cd /app && go build -o goapp\nENTRYPOINT ./goapp\n```\n\n```bash\n# build image\ndocker build -t main .\n```\n```bash\ndocker images | grep main\n```\n![](https://i.imgur.com/iMNta0E.png)\n![](https://i.imgur.com/2V3QnYD.png)\n**352MB**的鏡像大小, 這對於要快速佈署是相當的肥大的. \n因為Go只需要編譯完成的binary檔, Go image其實只是輔助編譯source code用的.\n所以透過Multi-Stage build 來減少程式的鏡像檔大小.\n\n# Multi-Stage Build\n適用在需要編譯環境的應用上(GO, C, JAVA...)\n至少都會需要兩個環境的Docker image:\n* 編譯環境鏡像\n    * 完整的編譯引擎, 依賴庫等等\n* 運行環境鏡像\n    * 編譯好的二進制檔, 用來執行app, 因為沒有編譯環境, 所以體機會小上很多\n使用multi-stage build, 可以使用單一的dockerfile, 降低維護複雜度.\n\n```dockerfile=\n# build stage\nFROM golang:alpine AS build-env\nADD . /src\nRUN cd /src && go build -o goapp\n\n#final stage\nFROM alpine\nWORKDIR /app\nCOPY --from=build-env /src/goapp /app/\nENTRYPOINT ./goapp\n```\n\n![](https://i.imgur.com/a3B55jj.png)\n**7.58MB**\n\n# More Examples\n### Import \"time\"\n* main.go\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\tlocation, err := time.LoadLocation(\"Europe/Berlin\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tt := time.Now().In(location)\n\n\tfmt.Println(\"Time in Berlin:\", t.Format(\"02.01.2006 15:04\"))\n}\n```\nbuild 完之後執行會出錯\n![](https://i.imgur.com/IJr0Xxb.png)\n\n搜尋該錯誤 panic: time: missing Location in call to Time.In\n搜尋Google後得知, 原來時區位置是從本地文件讀取出的.\n可以透過安裝tzdata, 在/usr/share/zoneinfo產生各時區的資訊; 或者複製機器上的\n修改Dockefile\n\n```dockerfile=\n# build stage\nFROM golang:alpine AS build-env\nADD . /src\nWORKDIR /src\nRUN go build -o goapp\n\n#final stage\nFROM alpine\nWORKDIR /app\n# RUN apk add --no-cache tzdata\n# COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=build-env /usr/share/zoneinfo /usr/share/zoneinfo\nCOPY --from=build-env /src/goapp /app/\nENTRYPOINT ./goapp\n```\n\n### Go Module\nApp Code + go.mod + go.sum\n```go\n// main.go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run()\n}\n```\n\n### 1. Build Golang App\n準備官方的Golang image, 並且取別名為builder-env, 方便在之後的階段來使用\n設定工作目錄, \n因為我是用go module作套件依賴管理,\n這裡把路徑設定成跟我們開發環境中一樣, 都是GOPATH下(go/src)的路徑.\n複製代碼, 並且安裝依賴, 編譯go app\n```dockerfile=\nFROM golang  AS build-env\nWORKDIR /go/src/github.com/tedmax100/docker-multistage-build-demo\nCOPY . .\nENV GO111MODULE=on\nRUN CGO_ENABLED=0 GOOS=linux go build -o main\n```\n### 2. Deployment image\n使用scratch 來作基礎image\n把編譯好的程式放在裡面;\nscratch大小 比alpine還小.\n如果app 需要SSL/TLS來進行訪問, 則需要複製ca-certificates\n```dockerfile=\nFROM scratch\nWORKDIR /bin\n# COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=build-env /go/src/github.com/tedmax100/mahjong .\nCMD [\"./main\"]\n```\n僅產生出15.Mb的image\n![](https://i.imgur.com/KFvPRRt.png)\n\n### docker build\n透過--rm 刪除中間過程產生的容器\n```bash\ndocker build --rm -t main .\n```\n### docker run\n```bash=\ndocker run --rm -d -p 8081:8080 main\n```\n![](https://i.imgur.com/HVJsI0E.png)\n\n[source code](https://gitlab.com/tedmax100/demo)","source":"_posts/Docker-Multi-Stage-Build.md","raw":"---\ntitle: Docker Multi Stage Build\ndate: 2019-08-08 00:06:18\ncategories: \"Docker\"\ntags:\n    - Docker\n    - Go\n---\n![](/images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg)\nDocker 17.05版的發布了Multi-stage build, 讓image肥大的問題有了優雅的解法.\n<!--more--> \n# Our Go program :\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello world!\")\n}\n```\n\n# Single-stage build\nDockerfile :\n```dockerfile=\nFROM golang:alpine\nWORKDIR /app\nADD . /app\nRUN cd /app && go build -o goapp\nENTRYPOINT ./goapp\n```\n\n```bash\n# build image\ndocker build -t main .\n```\n```bash\ndocker images | grep main\n```\n![](https://i.imgur.com/iMNta0E.png)\n![](https://i.imgur.com/2V3QnYD.png)\n**352MB**的鏡像大小, 這對於要快速佈署是相當的肥大的. \n因為Go只需要編譯完成的binary檔, Go image其實只是輔助編譯source code用的.\n所以透過Multi-Stage build 來減少程式的鏡像檔大小.\n\n# Multi-Stage Build\n適用在需要編譯環境的應用上(GO, C, JAVA...)\n至少都會需要兩個環境的Docker image:\n* 編譯環境鏡像\n    * 完整的編譯引擎, 依賴庫等等\n* 運行環境鏡像\n    * 編譯好的二進制檔, 用來執行app, 因為沒有編譯環境, 所以體機會小上很多\n使用multi-stage build, 可以使用單一的dockerfile, 降低維護複雜度.\n\n```dockerfile=\n# build stage\nFROM golang:alpine AS build-env\nADD . /src\nRUN cd /src && go build -o goapp\n\n#final stage\nFROM alpine\nWORKDIR /app\nCOPY --from=build-env /src/goapp /app/\nENTRYPOINT ./goapp\n```\n\n![](https://i.imgur.com/a3B55jj.png)\n**7.58MB**\n\n# More Examples\n### Import \"time\"\n* main.go\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\n\tlocation, err := time.LoadLocation(\"Europe/Berlin\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\tt := time.Now().In(location)\n\n\tfmt.Println(\"Time in Berlin:\", t.Format(\"02.01.2006 15:04\"))\n}\n```\nbuild 完之後執行會出錯\n![](https://i.imgur.com/IJr0Xxb.png)\n\n搜尋該錯誤 panic: time: missing Location in call to Time.In\n搜尋Google後得知, 原來時區位置是從本地文件讀取出的.\n可以透過安裝tzdata, 在/usr/share/zoneinfo產生各時區的資訊; 或者複製機器上的\n修改Dockefile\n\n```dockerfile=\n# build stage\nFROM golang:alpine AS build-env\nADD . /src\nWORKDIR /src\nRUN go build -o goapp\n\n#final stage\nFROM alpine\nWORKDIR /app\n# RUN apk add --no-cache tzdata\n# COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\nCOPY --from=build-env /usr/share/zoneinfo /usr/share/zoneinfo\nCOPY --from=build-env /src/goapp /app/\nENTRYPOINT ./goapp\n```\n\n### Go Module\nApp Code + go.mod + go.sum\n```go\n// main.go\npackage main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/ping\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"pong\",\n\t\t})\n\t})\n\tr.Run()\n}\n```\n\n### 1. Build Golang App\n準備官方的Golang image, 並且取別名為builder-env, 方便在之後的階段來使用\n設定工作目錄, \n因為我是用go module作套件依賴管理,\n這裡把路徑設定成跟我們開發環境中一樣, 都是GOPATH下(go/src)的路徑.\n複製代碼, 並且安裝依賴, 編譯go app\n```dockerfile=\nFROM golang  AS build-env\nWORKDIR /go/src/github.com/tedmax100/docker-multistage-build-demo\nCOPY . .\nENV GO111MODULE=on\nRUN CGO_ENABLED=0 GOOS=linux go build -o main\n```\n### 2. Deployment image\n使用scratch 來作基礎image\n把編譯好的程式放在裡面;\nscratch大小 比alpine還小.\n如果app 需要SSL/TLS來進行訪問, 則需要複製ca-certificates\n```dockerfile=\nFROM scratch\nWORKDIR /bin\n# COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nCOPY --from=build-env /go/src/github.com/tedmax100/mahjong .\nCMD [\"./main\"]\n```\n僅產生出15.Mb的image\n![](https://i.imgur.com/KFvPRRt.png)\n\n### docker build\n透過--rm 刪除中間過程產生的容器\n```bash\ndocker build --rm -t main .\n```\n### docker run\n```bash=\ndocker run --rm -d -p 8081:8080 main\n```\n![](https://i.imgur.com/HVJsI0E.png)\n\n[source code](https://gitlab.com/tedmax100/demo)","slug":"Docker-Multi-Stage-Build","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cm20006ck6x86a3lpdz","content":"<p><img src=\"/images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg\" alt><br>Docker 17.05版的發布了Multi-stage build, 讓image肥大的問題有了優雅的解法.</p>\n<a id=\"more\"></a> \n<h1 id=\"Our-Go-program\"><a href=\"#Our-Go-program\" class=\"headerlink\" title=\"Our Go program :\"></a>Our Go program :</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Single-stage-build\"><a href=\"#Single-stage-build\" class=\"headerlink\" title=\"Single-stage build\"></a>Single-stage build</h1><p>Dockerfile :</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> /app</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> . /app</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> cd /app &amp;&amp; go build -o goapp</span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span> ./goapp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build image</span></span><br><span class=\"line\">docker build -t main .</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images | grep main</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/iMNta0E.png\" alt><br><img src=\"https://i.imgur.com/2V3QnYD.png\" alt><br><strong>352MB</strong>的鏡像大小, 這對於要快速佈署是相當的肥大的.<br>因為Go只需要編譯完成的binary檔, Go image其實只是輔助編譯source code用的.<br>所以透過Multi-Stage build 來減少程式的鏡像檔大小.</p>\n<h1 id=\"Multi-Stage-Build\"><a href=\"#Multi-Stage-Build\" class=\"headerlink\" title=\"Multi-Stage Build\"></a>Multi-Stage Build</h1><p>適用在需要編譯環境的應用上(GO, C, JAVA…)<br>至少都會需要兩個環境的Docker image:</p>\n<ul>\n<li>編譯環境鏡像<ul>\n<li>完整的編譯引擎, 依賴庫等等</li>\n</ul>\n</li>\n<li>運行環境鏡像<ul>\n<li>編譯好的二進制檔, 用來執行app, 因為沒有編譯環境, 所以體機會小上很多<br>使用multi-stage build, 可以使用單一的dockerfile, 降低維護複雜度.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> golang:alpine AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /src</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /src &amp;&amp; go build -o goapp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#final stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /src/goapp /app/</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> ./goapp</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/a3B55jj.png\" alt><br><strong>7.58MB</strong></p>\n<h1 id=\"More-Examples\"><a href=\"#More-Examples\" class=\"headerlink\" title=\"More Examples\"></a>More Examples</h1><h3 id=\"Import-“time”\"><a href=\"#Import-“time”\" class=\"headerlink\" title=\"Import “time”\"></a>Import “time”</h3><ul>\n<li>main.go<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation, err := time.LoadLocation(<span class=\"string\">\"Europe/Berlin\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt := time.Now().In(location)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Time in Berlin:\"</span>, t.Format(<span class=\"string\">\"02.01.2006 15:04\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>build 完之後執行會出錯<br><img src=\"https://i.imgur.com/IJr0Xxb.png\" alt></p>\n<p>搜尋該錯誤 panic: time: missing Location in call to Time.In<br>搜尋Google後得知, 原來時區位置是從本地文件讀取出的.<br>可以透過安裝tzdata, 在/usr/share/zoneinfo產生各時區的資訊; 或者複製機器上的<br>修改Dockefile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> golang:alpine AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /src</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /src</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o goapp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#final stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># RUN apk add --no-cache tzdata</span></span><br><span class=\"line\"><span class=\"comment\"># COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /usr/share/zoneinfo /usr/share/zoneinfo</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /src/goapp /app/</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> ./goapp</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Go-Module\"><a href=\"#Go-Module\" class=\"headerlink\" title=\"Go Module\"></a>Go Module</h3><p>App Code + go.mod + go.sum</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"message\"</span>: <span class=\"string\">\"pong\"</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-Build-Golang-App\"><a href=\"#1-Build-Golang-App\" class=\"headerlink\" title=\"1. Build Golang App\"></a>1. Build Golang App</h3><p>準備官方的Golang image, 並且取別名為builder-env, 方便在之後的階段來使用<br>設定工作目錄,<br>因為我是用go module作套件依賴管理,<br>這裡把路徑設定成跟我們開發環境中一樣, 都是GOPATH下(go/src)的路徑.<br>複製代碼, 並且安裝依賴, 編譯go app</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang  AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/github.com/tedmax100/docker-multistage-build-demo</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> GO111MODULE=on</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> CGO_ENABLED=0 GOOS=linux go build -o main</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Deployment-image\"><a href=\"#2-Deployment-image\" class=\"headerlink\" title=\"2. Deployment image\"></a>2. Deployment image</h3><p>使用scratch 來作基礎image<br>把編譯好的程式放在裡面;<br>scratch大小 比alpine還小.<br>如果app 需要SSL/TLS來進行訪問, 則需要複製ca-certificates</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> scratch</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /bin</span></span><br><span class=\"line\"><span class=\"comment\"># COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /go/src/github.com/tedmax100/mahjong .</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"./main\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>僅產生出15.Mb的image<br><img src=\"https://i.imgur.com/KFvPRRt.png\" alt></p>\n<h3 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h3><p>透過–rm 刪除中間過程產生的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build --rm -t main .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-run\"><a href=\"#docker-run\" class=\"headerlink\" title=\"docker run\"></a>docker run</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -d -p 8081:8080 main</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/HVJsI0E.png\" alt></p>\n<p><a href=\"https://gitlab.com/tedmax100/demo\" target=\"_blank\" rel=\"noopener\">source code</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/Go/4b2d10e2b8128b3c5d8fb38235e08b4793f150f8.jpeg\" alt><br>Docker 17.05版的發布了Multi-stage build, 讓image肥大的問題有了優雅的解法.</p>","more":"<h1 id=\"Our-Go-program\"><a href=\"#Our-Go-program\" class=\"headerlink\" title=\"Our Go program :\"></a>Our Go program :</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello world!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Single-stage-build\"><a href=\"#Single-stage-build\" class=\"headerlink\" title=\"Single-stage build\"></a>Single-stage build</h1><p>Dockerfile :</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span> /app</span><br><span class=\"line\"><span class=\"keyword\">ADD</span> . /app</span><br><span class=\"line\"><span class=\"keyword\">RUN</span> cd /app &amp;&amp; go build -o goapp</span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span> ./goapp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build image</span></span><br><span class=\"line\">docker build -t main .</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images | grep main</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/iMNta0E.png\" alt><br><img src=\"https://i.imgur.com/2V3QnYD.png\" alt><br><strong>352MB</strong>的鏡像大小, 這對於要快速佈署是相當的肥大的.<br>因為Go只需要編譯完成的binary檔, Go image其實只是輔助編譯source code用的.<br>所以透過Multi-Stage build 來減少程式的鏡像檔大小.</p>\n<h1 id=\"Multi-Stage-Build\"><a href=\"#Multi-Stage-Build\" class=\"headerlink\" title=\"Multi-Stage Build\"></a>Multi-Stage Build</h1><p>適用在需要編譯環境的應用上(GO, C, JAVA…)<br>至少都會需要兩個環境的Docker image:</p>\n<ul>\n<li>編譯環境鏡像<ul>\n<li>完整的編譯引擎, 依賴庫等等</li>\n</ul>\n</li>\n<li>運行環境鏡像<ul>\n<li>編譯好的二進制檔, 用來執行app, 因為沒有編譯環境, 所以體機會小上很多<br>使用multi-stage build, 可以使用單一的dockerfile, 降低維護複雜度.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> golang:alpine AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /src</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> <span class=\"built_in\">cd</span> /src &amp;&amp; go build -o goapp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#final stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /src/goapp /app/</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> ./goapp</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/a3B55jj.png\" alt><br><strong>7.58MB</strong></p>\n<h1 id=\"More-Examples\"><a href=\"#More-Examples\" class=\"headerlink\" title=\"More Examples\"></a>More Examples</h1><h3 id=\"Import-“time”\"><a href=\"#Import-“time”\" class=\"headerlink\" title=\"Import “time”\"></a>Import “time”</h3><ul>\n<li>main.go<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlocation, err := time.LoadLocation(<span class=\"string\">\"Europe/Berlin\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt := time.Now().In(location)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Time in Berlin:\"</span>, t.Format(<span class=\"string\">\"02.01.2006 15:04\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>build 完之後執行會出錯<br><img src=\"https://i.imgur.com/IJr0Xxb.png\" alt></p>\n<p>搜尋該錯誤 panic: time: missing Location in call to Time.In<br>搜尋Google後得知, 原來時區位置是從本地文件讀取出的.<br>可以透過安裝tzdata, 在/usr/share/zoneinfo產生各時區的資訊; 或者複製機器上的<br>修改Dockefile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> golang:alpine AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /src</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /src</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> go build -o goapp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#final stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># RUN apk add --no-cache tzdata</span></span><br><span class=\"line\"><span class=\"comment\"># COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /usr/share/zoneinfo /usr/share/zoneinfo</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /src/goapp /app/</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"bash\"> ./goapp</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Go-Module\"><a href=\"#Go-Module\" class=\"headerlink\" title=\"Go Module\"></a>Go Module</h3><p>App Code + go.mod + go.sum</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tr.GET(<span class=\"string\">\"/ping\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.JSON(<span class=\"number\">200</span>, gin.H&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">\"message\"</span>: <span class=\"string\">\"pong\"</span>,</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tr.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-Build-Golang-App\"><a href=\"#1-Build-Golang-App\" class=\"headerlink\" title=\"1. Build Golang App\"></a>1. Build Golang App</h3><p>準備官方的Golang image, 並且取別名為builder-env, 方便在之後的階段來使用<br>設定工作目錄,<br>因為我是用go module作套件依賴管理,<br>這裡把路徑設定成跟我們開發環境中一樣, 都是GOPATH下(go/src)的路徑.<br>複製代碼, 並且安裝依賴, 編譯go app</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang  AS build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /go/src/github.com/tedmax100/docker-multistage-build-demo</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> GO111MODULE=on</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> CGO_ENABLED=0 GOOS=linux go build -o main</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Deployment-image\"><a href=\"#2-Deployment-image\" class=\"headerlink\" title=\"2. Deployment image\"></a>2. Deployment image</h3><p>使用scratch 來作基礎image<br>把編譯好的程式放在裡面;<br>scratch大小 比alpine還小.<br>如果app 需要SSL/TLS來進行訪問, 則需要複製ca-certificates</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> scratch</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /bin</span></span><br><span class=\"line\"><span class=\"comment\"># COPY --from=build-env /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"bash\"> --from=build-env /go/src/github.com/tedmax100/mahjong .</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"./main\"</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>僅產生出15.Mb的image<br><img src=\"https://i.imgur.com/KFvPRRt.png\" alt></p>\n<h3 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h3><p>透過–rm 刪除中間過程產生的容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build --rm -t main .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-run\"><a href=\"#docker-run\" class=\"headerlink\" title=\"docker run\"></a>docker run</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm -d -p 8081:8080 main</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/HVJsI0E.png\" alt></p>\n<p><a href=\"https://gitlab.com/tedmax100/demo\" target=\"_blank\" rel=\"noopener\">source code</a></p>"},{"title":"Factory Pattern Cont’d","date":"2019-02-20T05:48:39.000Z","_content":"## Simple Factory Method (簡單工廠模式)\n也稱為靜態工廠模式，去掉了抽象工廠類別，簡單實現，但缺點 工廠類的擴展就困難了，會不符合開閉原則。\n![](/images/DP/P81JUXV.jpg)\n\n```javascript\ninterface Human {\n    //　取得膚色\n    getColor(): void;\n    //說話\n    talk() : void;\n}\nclass BlackHuman implements Human{\n    public getColor = () => {\n        console.log(\"黑人膚色是黑色的。\");\n    }\n    public talk = () => {\n        console.log(\"黑人會說話，一般人聽不懂\");\n    }\n}\nclass YellowHuman implements Human{\n    public getColor = () => {\n        console.log(\"黃種人膚色是黃色的。\");\n    }\n    public talk = () => {\n        console.log(\"黃種人會說話，說的都是2byte的文字\");\n    }\n}\nclass WhiteHuman implements Human{\n    public getColor = () => {\n        console.log(\"白人膚色是白色的。\");\n    }\n    public talk = () => {\n        console.log(\"白人會說話，說的都是1byte的文字\");\n    }\n}\nclass HumanFactory  {\n    public static createHuman<T extends Human>(type: (new () => T)): T {\n        let human: any = {};\n       //  let testType: new() => T| undefined ;\n        debugger;\n        try {\n             human = new type();//(<any>Object).assign(human,  new type());\n        }catch(exp) {\n            console.error(exp);\n        }\n        return human as T;\n    }\n}\n(() => {\n    let whiteUhman = HumanFactory.createHuman<WhiteHuman>(WhiteHuman);\n    whiteUhman.getColor();\n    whiteUhman.talk();\n    let balckhman = HumanFactory.createHuman<BlackHuman>(BlackHuman);\n    balckhman.getColor();\n    balckhman.talk();\n    let yellowHuman = HumanFactory.createHuman<YellowHuman>(YellowHuman);\n    yellowHuman.getColor();\n    yellowHuman.talk();\n})();\n```\n\n## Multiple Factorys\n往往在複雜的業務項目上，會遇到一個產品類，有超多種的實現類。\n每個實現類的初始化方法都不太依樣，如果寫在一個工廠方法之中，一定會導致該方法複雜無比。\n要讓結構清晰，就替每個產品定義一個創造者，然後由調用者去選擇與哪個工廠方法做關聯。\n![](/images/DP/6Zx2ffj.jpg)\n好處 創建類別職責清晰，且結構簡單，但是可擴展性和維護帶來一定影響。\n因為多一個產品，就要堆一個工廠類，還得考慮對象之間的關係。\n```javascript\nnamespace MultipleFactories {\n    \ninterface Human {\n    //　取得膚色\n    getColor(): void;\n    //說話\n    talk() : void;\n}\nclass BlackHuman implements Human{\n    public getColor = () => {\n        console.log(\"黑人膚色是黑色的。\");\n    }\n    public talk = () => {\n        console.log(\"黑人會說話，一般人聽不懂\");\n    }\n}\nclass YellowHuman implements Human{\n    public getColor = () => {\n        console.log(\"黃種人膚色是黃色的。\");\n    }\n    public talk = () => {\n        console.log(\"黃種人會說話，說的都是2byte的文字\");\n    }\n}\nclass WhiteHuman implements Human{\n    public getColor = () => {\n        console.log(\"白人膚色是白色的。\");\n    }\n    public talk = () => {\n        console.log(\"白人會說話，說的都是1byte的文字\");\n    }\n}\nabstract class AbstractHumanFactory {\n    public abstract createHuman(): Human ;\n}\nclass YellowHumanFactory extends AbstractHumanFactory {\n    public createHuman = (): YellowHuman =>  {\n        return new YellowHuman();\n    }\n}\nclass BlackHumanFactory extends AbstractHumanFactory {\n    public createHuman = (): BlackHuman =>  {\n        return new BlackHuman();\n    }\n}\nclass WhiteHumanFactory extends AbstractHumanFactory {\n    public createHuman = (): WhiteHuman =>  {\n        return new WhiteHuman();\n    }\n}\n(() => {\n    let whiteUhman = new WhiteHumanFactory().createHuman();\n    whiteUhman.getColor();\n    whiteUhman.talk();\n    let balckhman = new BlackHumanFactory().createHuman();\n    balckhman.getColor();\n    balckhman.talk();\n    let yellowHuman = new YellowHumanFactory().createHuman();\n    yellowHuman.getColor();\n    yellowHuman.talk();\n})();\n}\n```\n\n## Lazy initialization 延遲初始化\n一個物件被消費完成後，不立刻釋放，而是保持其初始狀態，等待被再度使用。\n這是工廠模式的一種擴展應用。\n![](/images/DP/K0UJ66B.jpg)\n```javascript\nclass Product {}\nclass ConcreteProduct1 extends Product {}\nclass ConcreteProduct2 extends Product{}\nclass ProductFactory {\n    private static prMap: Map<string, Product> = new Map();\n    public static createProduct: Product = (type: string): Product|undefined => {\n        let product = null;\n        if(ProductFactory.prMap.has(type)) {\n            product = ProductFactory.prMap.get(type);\n        }else{\n            if(type === \"Product1\") {\n                product = new ConcreteProduct1();\n            }else{\n                product = new ConcreteProduct2();\n            }\n            // 把物件 放到緩存中\n            ProductFactory.prMap.set(type, product);\n        }\n        return product;\n    }\n}\n```\n\n舉例，像是Conneection Pool都會要求設置MaxConnection最大連線數量，該數量就是記憶體中instance的數量。\n\n## Conclusion\n很多官方與第三方套件之中都包含工廠方法，且工廠方法還能與其他模式混搭使用(模板模式、單例、原型模式等)，有多更適合的設計。","source":"_posts/Factory-Pattern-Cont’d.md","raw":"---\ntitle: Factory Pattern Cont’d\ndate: 2019-02-20 13:48:39\ntags:\n    - Design Pattern\n    - TypeScript\n    - JavaScript\n---\n## Simple Factory Method (簡單工廠模式)\n也稱為靜態工廠模式，去掉了抽象工廠類別，簡單實現，但缺點 工廠類的擴展就困難了，會不符合開閉原則。\n![](/images/DP/P81JUXV.jpg)\n\n```javascript\ninterface Human {\n    //　取得膚色\n    getColor(): void;\n    //說話\n    talk() : void;\n}\nclass BlackHuman implements Human{\n    public getColor = () => {\n        console.log(\"黑人膚色是黑色的。\");\n    }\n    public talk = () => {\n        console.log(\"黑人會說話，一般人聽不懂\");\n    }\n}\nclass YellowHuman implements Human{\n    public getColor = () => {\n        console.log(\"黃種人膚色是黃色的。\");\n    }\n    public talk = () => {\n        console.log(\"黃種人會說話，說的都是2byte的文字\");\n    }\n}\nclass WhiteHuman implements Human{\n    public getColor = () => {\n        console.log(\"白人膚色是白色的。\");\n    }\n    public talk = () => {\n        console.log(\"白人會說話，說的都是1byte的文字\");\n    }\n}\nclass HumanFactory  {\n    public static createHuman<T extends Human>(type: (new () => T)): T {\n        let human: any = {};\n       //  let testType: new() => T| undefined ;\n        debugger;\n        try {\n             human = new type();//(<any>Object).assign(human,  new type());\n        }catch(exp) {\n            console.error(exp);\n        }\n        return human as T;\n    }\n}\n(() => {\n    let whiteUhman = HumanFactory.createHuman<WhiteHuman>(WhiteHuman);\n    whiteUhman.getColor();\n    whiteUhman.talk();\n    let balckhman = HumanFactory.createHuman<BlackHuman>(BlackHuman);\n    balckhman.getColor();\n    balckhman.talk();\n    let yellowHuman = HumanFactory.createHuman<YellowHuman>(YellowHuman);\n    yellowHuman.getColor();\n    yellowHuman.talk();\n})();\n```\n\n## Multiple Factorys\n往往在複雜的業務項目上，會遇到一個產品類，有超多種的實現類。\n每個實現類的初始化方法都不太依樣，如果寫在一個工廠方法之中，一定會導致該方法複雜無比。\n要讓結構清晰，就替每個產品定義一個創造者，然後由調用者去選擇與哪個工廠方法做關聯。\n![](/images/DP/6Zx2ffj.jpg)\n好處 創建類別職責清晰，且結構簡單，但是可擴展性和維護帶來一定影響。\n因為多一個產品，就要堆一個工廠類，還得考慮對象之間的關係。\n```javascript\nnamespace MultipleFactories {\n    \ninterface Human {\n    //　取得膚色\n    getColor(): void;\n    //說話\n    talk() : void;\n}\nclass BlackHuman implements Human{\n    public getColor = () => {\n        console.log(\"黑人膚色是黑色的。\");\n    }\n    public talk = () => {\n        console.log(\"黑人會說話，一般人聽不懂\");\n    }\n}\nclass YellowHuman implements Human{\n    public getColor = () => {\n        console.log(\"黃種人膚色是黃色的。\");\n    }\n    public talk = () => {\n        console.log(\"黃種人會說話，說的都是2byte的文字\");\n    }\n}\nclass WhiteHuman implements Human{\n    public getColor = () => {\n        console.log(\"白人膚色是白色的。\");\n    }\n    public talk = () => {\n        console.log(\"白人會說話，說的都是1byte的文字\");\n    }\n}\nabstract class AbstractHumanFactory {\n    public abstract createHuman(): Human ;\n}\nclass YellowHumanFactory extends AbstractHumanFactory {\n    public createHuman = (): YellowHuman =>  {\n        return new YellowHuman();\n    }\n}\nclass BlackHumanFactory extends AbstractHumanFactory {\n    public createHuman = (): BlackHuman =>  {\n        return new BlackHuman();\n    }\n}\nclass WhiteHumanFactory extends AbstractHumanFactory {\n    public createHuman = (): WhiteHuman =>  {\n        return new WhiteHuman();\n    }\n}\n(() => {\n    let whiteUhman = new WhiteHumanFactory().createHuman();\n    whiteUhman.getColor();\n    whiteUhman.talk();\n    let balckhman = new BlackHumanFactory().createHuman();\n    balckhman.getColor();\n    balckhman.talk();\n    let yellowHuman = new YellowHumanFactory().createHuman();\n    yellowHuman.getColor();\n    yellowHuman.talk();\n})();\n}\n```\n\n## Lazy initialization 延遲初始化\n一個物件被消費完成後，不立刻釋放，而是保持其初始狀態，等待被再度使用。\n這是工廠模式的一種擴展應用。\n![](/images/DP/K0UJ66B.jpg)\n```javascript\nclass Product {}\nclass ConcreteProduct1 extends Product {}\nclass ConcreteProduct2 extends Product{}\nclass ProductFactory {\n    private static prMap: Map<string, Product> = new Map();\n    public static createProduct: Product = (type: string): Product|undefined => {\n        let product = null;\n        if(ProductFactory.prMap.has(type)) {\n            product = ProductFactory.prMap.get(type);\n        }else{\n            if(type === \"Product1\") {\n                product = new ConcreteProduct1();\n            }else{\n                product = new ConcreteProduct2();\n            }\n            // 把物件 放到緩存中\n            ProductFactory.prMap.set(type, product);\n        }\n        return product;\n    }\n}\n```\n\n舉例，像是Conneection Pool都會要求設置MaxConnection最大連線數量，該數量就是記憶體中instance的數量。\n\n## Conclusion\n很多官方與第三方套件之中都包含工廠方法，且工廠方法還能與其他模式混搭使用(模板模式、單例、原型模式等)，有多更適合的設計。","slug":"Factory-Pattern-Cont’d","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cm30008ck6xc27h0hvc","content":"<h2 id=\"Simple-Factory-Method-簡單工廠模式\"><a href=\"#Simple-Factory-Method-簡單工廠模式\" class=\"headerlink\" title=\"Simple Factory Method (簡單工廠模式)\"></a>Simple Factory Method (簡單工廠模式)</h2><p>也稱為靜態工廠模式，去掉了抽象工廠類別，簡單實現，但缺點 工廠類的擴展就困難了，會不符合開閉原則。<br><img src=\"/images/DP/P81JUXV.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">    <span class=\"comment\">//　取得膚色</span></span><br><span class=\"line\">    getColor(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"comment\">//說話</span></span><br><span class=\"line\">    talk() : <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人膚色是黑色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人會說話，一般人聽不懂\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人膚色是黃色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人會說話，說的都是2byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人膚色是白色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人會說話，說的都是1byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HumanFactory</span>  </span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> createHuman&lt;T extends Human&gt;<span class=\"function\">(<span class=\"params\">type: (<span class=\"keyword\">new</span> (</span>) =&gt;</span> T)): T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> human: any = &#123;&#125;;</span><br><span class=\"line\">       <span class=\"comment\">//  let testType: new() =&gt; T| undefined ;</span></span><br><span class=\"line\">        <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             human = <span class=\"keyword\">new</span> type();<span class=\"comment\">//(&lt;any&gt;Object).assign(human,  new type());</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(exp) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(exp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> human <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whiteUhman = HumanFactory.createHuman&lt;WhiteHuman&gt;(WhiteHuman);</span><br><span class=\"line\">    whiteUhman.getColor();</span><br><span class=\"line\">    whiteUhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> balckhman = HumanFactory.createHuman&lt;BlackHuman&gt;(BlackHuman);</span><br><span class=\"line\">    balckhman.getColor();</span><br><span class=\"line\">    balckhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> yellowHuman = HumanFactory.createHuman&lt;YellowHuman&gt;(YellowHuman);</span><br><span class=\"line\">    yellowHuman.getColor();</span><br><span class=\"line\">    yellowHuman.talk();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Multiple-Factorys\"><a href=\"#Multiple-Factorys\" class=\"headerlink\" title=\"Multiple Factorys\"></a>Multiple Factorys</h2><p>往往在複雜的業務項目上，會遇到一個產品類，有超多種的實現類。<br>每個實現類的初始化方法都不太依樣，如果寫在一個工廠方法之中，一定會導致該方法複雜無比。<br>要讓結構清晰，就替每個產品定義一個創造者，然後由調用者去選擇與哪個工廠方法做關聯。<br><img src=\"/images/DP/6Zx2ffj.jpg\" alt><br>好處 創建類別職責清晰，且結構簡單，但是可擴展性和維護帶來一定影響。<br>因為多一個產品，就要堆一個工廠類，還得考慮對象之間的關係。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace MultipleFactories &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">    <span class=\"comment\">//　取得膚色</span></span><br><span class=\"line\">    getColor(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"comment\">//說話</span></span><br><span class=\"line\">    talk() : <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人膚色是黑色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人會說話，一般人聽不懂\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人膚色是黃色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人會說話，說的都是2byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人膚色是白色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人會說話，說的都是1byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public abstract createHuman(): Human ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman = (): <span class=\"function\"><span class=\"params\">YellowHuman</span> =&gt;</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> YellowHuman();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman = (): <span class=\"function\"><span class=\"params\">BlackHuman</span> =&gt;</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlackHuman();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman = (): <span class=\"function\"><span class=\"params\">WhiteHuman</span> =&gt;</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WhiteHuman();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whiteUhman = <span class=\"keyword\">new</span> WhiteHumanFactory().createHuman();</span><br><span class=\"line\">    whiteUhman.getColor();</span><br><span class=\"line\">    whiteUhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> balckhman = <span class=\"keyword\">new</span> BlackHumanFactory().createHuman();</span><br><span class=\"line\">    balckhman.getColor();</span><br><span class=\"line\">    balckhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> yellowHuman = <span class=\"keyword\">new</span> YellowHumanFactory().createHuman();</span><br><span class=\"line\">    yellowHuman.getColor();</span><br><span class=\"line\">    yellowHuman.talk();</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lazy-initialization-延遲初始化\"><a href=\"#Lazy-initialization-延遲初始化\" class=\"headerlink\" title=\"Lazy initialization 延遲初始化\"></a>Lazy initialization 延遲初始化</h2><p>一個物件被消費完成後，不立刻釋放，而是保持其初始狀態，等待被再度使用。<br>這是工廠模式的一種擴展應用。<br><img src=\"/images/DP/K0UJ66B.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductFactory</span> </span>&#123;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> prMap: <span class=\"built_in\">Map</span>&lt;string, Product&gt; = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> createProduct: Product = (type: string): Product|<span class=\"function\"><span class=\"params\">undefined</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> product = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ProductFactory.prMap.has(type)) &#123;</span><br><span class=\"line\">            product = ProductFactory.prMap.get(type);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type === <span class=\"string\">\"Product1\"</span>) &#123;</span><br><span class=\"line\">                product = <span class=\"keyword\">new</span> ConcreteProduct1();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                product = <span class=\"keyword\">new</span> ConcreteProduct2();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 把物件 放到緩存中</span></span><br><span class=\"line\">            ProductFactory.prMap.set(type, product);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>舉例，像是Conneection Pool都會要求設置MaxConnection最大連線數量，該數量就是記憶體中instance的數量。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>很多官方與第三方套件之中都包含工廠方法，且工廠方法還能與其他模式混搭使用(模板模式、單例、原型模式等)，有多更適合的設計。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Simple-Factory-Method-簡單工廠模式\"><a href=\"#Simple-Factory-Method-簡單工廠模式\" class=\"headerlink\" title=\"Simple Factory Method (簡單工廠模式)\"></a>Simple Factory Method (簡單工廠模式)</h2><p>也稱為靜態工廠模式，去掉了抽象工廠類別，簡單實現，但缺點 工廠類的擴展就困難了，會不符合開閉原則。<br><img src=\"/images/DP/P81JUXV.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">    <span class=\"comment\">//　取得膚色</span></span><br><span class=\"line\">    getColor(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"comment\">//說話</span></span><br><span class=\"line\">    talk() : <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人膚色是黑色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人會說話，一般人聽不懂\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人膚色是黃色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人會說話，說的都是2byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人膚色是白色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人會說話，說的都是1byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HumanFactory</span>  </span>&#123;</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> createHuman&lt;T extends Human&gt;<span class=\"function\">(<span class=\"params\">type: (<span class=\"keyword\">new</span> (</span>) =&gt;</span> T)): T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> human: any = &#123;&#125;;</span><br><span class=\"line\">       <span class=\"comment\">//  let testType: new() =&gt; T| undefined ;</span></span><br><span class=\"line\">        <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             human = <span class=\"keyword\">new</span> type();<span class=\"comment\">//(&lt;any&gt;Object).assign(human,  new type());</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(exp) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(exp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> human <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whiteUhman = HumanFactory.createHuman&lt;WhiteHuman&gt;(WhiteHuman);</span><br><span class=\"line\">    whiteUhman.getColor();</span><br><span class=\"line\">    whiteUhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> balckhman = HumanFactory.createHuman&lt;BlackHuman&gt;(BlackHuman);</span><br><span class=\"line\">    balckhman.getColor();</span><br><span class=\"line\">    balckhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> yellowHuman = HumanFactory.createHuman&lt;YellowHuman&gt;(YellowHuman);</span><br><span class=\"line\">    yellowHuman.getColor();</span><br><span class=\"line\">    yellowHuman.talk();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Multiple-Factorys\"><a href=\"#Multiple-Factorys\" class=\"headerlink\" title=\"Multiple Factorys\"></a>Multiple Factorys</h2><p>往往在複雜的業務項目上，會遇到一個產品類，有超多種的實現類。<br>每個實現類的初始化方法都不太依樣，如果寫在一個工廠方法之中，一定會導致該方法複雜無比。<br>要讓結構清晰，就替每個產品定義一個創造者，然後由調用者去選擇與哪個工廠方法做關聯。<br><img src=\"/images/DP/6Zx2ffj.jpg\" alt><br>好處 創建類別職責清晰，且結構簡單，但是可擴展性和維護帶來一定影響。<br>因為多一個產品，就要堆一個工廠類，還得考慮對象之間的關係。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace MultipleFactories &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">    <span class=\"comment\">//　取得膚色</span></span><br><span class=\"line\">    getColor(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"comment\">//說話</span></span><br><span class=\"line\">    talk() : <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人膚色是黑色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人會說話，一般人聽不懂\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人膚色是黃色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人會說話，說的都是2byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人膚色是白色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人會說話，說的都是1byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public abstract createHuman(): Human ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman = (): <span class=\"function\"><span class=\"params\">YellowHuman</span> =&gt;</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> YellowHuman();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman = (): <span class=\"function\"><span class=\"params\">BlackHuman</span> =&gt;</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BlackHuman();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman = (): <span class=\"function\"><span class=\"params\">WhiteHuman</span> =&gt;</span>  &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> WhiteHuman();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whiteUhman = <span class=\"keyword\">new</span> WhiteHumanFactory().createHuman();</span><br><span class=\"line\">    whiteUhman.getColor();</span><br><span class=\"line\">    whiteUhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> balckhman = <span class=\"keyword\">new</span> BlackHumanFactory().createHuman();</span><br><span class=\"line\">    balckhman.getColor();</span><br><span class=\"line\">    balckhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> yellowHuman = <span class=\"keyword\">new</span> YellowHumanFactory().createHuman();</span><br><span class=\"line\">    yellowHuman.getColor();</span><br><span class=\"line\">    yellowHuman.talk();</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lazy-initialization-延遲初始化\"><a href=\"#Lazy-initialization-延遲初始化\" class=\"headerlink\" title=\"Lazy initialization 延遲初始化\"></a>Lazy initialization 延遲初始化</h2><p>一個物件被消費完成後，不立刻釋放，而是保持其初始狀態，等待被再度使用。<br>這是工廠模式的一種擴展應用。<br><img src=\"/images/DP/K0UJ66B.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteProduct2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Product</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductFactory</span> </span>&#123;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> prMap: <span class=\"built_in\">Map</span>&lt;string, Product&gt; = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    public <span class=\"keyword\">static</span> createProduct: Product = (type: string): Product|<span class=\"function\"><span class=\"params\">undefined</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> product = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ProductFactory.prMap.has(type)) &#123;</span><br><span class=\"line\">            product = ProductFactory.prMap.get(type);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type === <span class=\"string\">\"Product1\"</span>) &#123;</span><br><span class=\"line\">                product = <span class=\"keyword\">new</span> ConcreteProduct1();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                product = <span class=\"keyword\">new</span> ConcreteProduct2();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 把物件 放到緩存中</span></span><br><span class=\"line\">            ProductFactory.prMap.set(type, product);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>舉例，像是Conneection Pool都會要求設置MaxConnection最大連線數量，該數量就是記憶體中instance的數量。</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>很多官方與第三方套件之中都包含工廠方法，且工廠方法還能與其他模式混搭使用(模板模式、單例、原型模式等)，有多更適合的設計。</p>\n"},{"title":"Factory Pattern","date":"2019-02-19T05:45:41.000Z","_content":"![](/images/DP/1g0WOw3.jpg)\n```javascript\n/* 定義人類與人種 */\ninterface Human {\n    //　取得膚色\n    getColor(): void;\n    //說話\n    talk() : void;\n}\nclass BlackHuman implements Human{\n    public getColor = () => {\n        console.log(\"黑人膚色是黑色的。\");\n    }\n    public talk = () => {\n        console.log(\"黑人說話，一搬人聽不懂\");\n    }\n}\nclass YellowHuman implements Human{\n    public getColor = () => {\n        console.log(\"黃種人膚色是黃色的。\");\n    }\n    public talk = () => {\n        console.log(\"黃種人會說話，說的都是2byte的文字\");\n    }\n}\nclass WhiteHuman implements Human{\n    public getColor = () => {\n        console.log(\"白人膚色是白色的。\");\n    }\n    public talk = () => {\n        console.log(\"白人會說話，說的都是1byte的文字\");\n    }\n}\n```\n```javascript\n/* 抽象人類工廠，透過泛型對createHuman的輸入參數產生限制 : \n   1. class型別 ; 2. 必須實現Human  */\nabstract class AbstractHumanFactory {\n    public abstract createHuman<T extends Human>(type: (new () => T)): T ;\n}\n// 實踐工廠\nclass HumanFactory extends AbstractHumanFactory {\n    public createHuman<T extends Human>(type: (new () => T)): T {\n        let human: any = {};\n        try {\n             human = new type();//(<any>Object).assign(human,  new type());\n        }catch(exp) {\n            console.error(exp);\n        }\n        return human as T;\n    }\n}\n```\n```javascript\n執行　創物者\n(() => {\n    let creator: AbstractHumanFactory = new HumanFactory();\n    let whiteUhman = creator.createHuman<WhiteHuman>(WhiteHuman);\n    whiteUhman.getColor();\n    whiteUhman.talk();\n    let balckhman = creator.createHuman<BlackHuman>(BlackHuman);\n    balckhman.getColor();\n    balckhman.talk();\n    let yellowHuman = creator.createHuman<YellowHuman>(YellowHuman);\n    yellowHuman.getColor();\n    yellowHuman.talk();\n})();\n```\n```\n白人膚色是白色的。\n白人會說話，說的都是1byte的文字\n黑人膚色是黑色的。\n黑人會說話，一般人聽不懂\n黃種人膚色是黃色的。\n黃種人會說話，說的都是2byte的文字\n```\n\n### Definition :\nDefine an interface for creating an object, but let subclasses decide which class to instantiate Factroy Method lets a class defer instantiation to subclasses.\n定義一個用於創建對象的介面，讓子類別決定實例化哪一個類別，使一個類別的實例化延遲到其子類別\n\n### Pros :\n* 良好的封裝性，結構清晰，一個對象的建立是有條件約束的，降低耦合性。\n* 拓展性優秀，增加業務產品類別十，只要擴展一個工廠類，就能”擁抱變化”。\n* 封裝屏蔽產品類，產品類的實現如何變化，調用者根本不需要關心，他只關心產品的接口。\n* 滿足 迪米特法則(最小知識原則), 滿足依賴倒置原則，滿足里氏替換原則。\n* 萬物皆對象，所以萬物也就是產品類。\n\n### Example :\n* JDBC, 從MySQL切換到Oracle，就是更換一下驅動名稱。\n* MailServer 有 POP3、IMAP、HTTP，把這三種定義為產品類，定義介面IConnectMail，再定義工廠方法，按照不同條件，選擇不同連接方式，做到完美的拓展。\n* 單元測試, 測試類別A，類別有關連到類別B，用工廠方法把類別B虛擬出來，就能Mock依賴物件。","source":"_posts/Factory-Pattern.md","raw":"---\ntitle: Factory Pattern\ndate: 2019-02-19 13:45:41\ntags:\n    - Design Pattern\n    - TypeScript\n    - JavaScript\n---\n![](/images/DP/1g0WOw3.jpg)\n```javascript\n/* 定義人類與人種 */\ninterface Human {\n    //　取得膚色\n    getColor(): void;\n    //說話\n    talk() : void;\n}\nclass BlackHuman implements Human{\n    public getColor = () => {\n        console.log(\"黑人膚色是黑色的。\");\n    }\n    public talk = () => {\n        console.log(\"黑人說話，一搬人聽不懂\");\n    }\n}\nclass YellowHuman implements Human{\n    public getColor = () => {\n        console.log(\"黃種人膚色是黃色的。\");\n    }\n    public talk = () => {\n        console.log(\"黃種人會說話，說的都是2byte的文字\");\n    }\n}\nclass WhiteHuman implements Human{\n    public getColor = () => {\n        console.log(\"白人膚色是白色的。\");\n    }\n    public talk = () => {\n        console.log(\"白人會說話，說的都是1byte的文字\");\n    }\n}\n```\n```javascript\n/* 抽象人類工廠，透過泛型對createHuman的輸入參數產生限制 : \n   1. class型別 ; 2. 必須實現Human  */\nabstract class AbstractHumanFactory {\n    public abstract createHuman<T extends Human>(type: (new () => T)): T ;\n}\n// 實踐工廠\nclass HumanFactory extends AbstractHumanFactory {\n    public createHuman<T extends Human>(type: (new () => T)): T {\n        let human: any = {};\n        try {\n             human = new type();//(<any>Object).assign(human,  new type());\n        }catch(exp) {\n            console.error(exp);\n        }\n        return human as T;\n    }\n}\n```\n```javascript\n執行　創物者\n(() => {\n    let creator: AbstractHumanFactory = new HumanFactory();\n    let whiteUhman = creator.createHuman<WhiteHuman>(WhiteHuman);\n    whiteUhman.getColor();\n    whiteUhman.talk();\n    let balckhman = creator.createHuman<BlackHuman>(BlackHuman);\n    balckhman.getColor();\n    balckhman.talk();\n    let yellowHuman = creator.createHuman<YellowHuman>(YellowHuman);\n    yellowHuman.getColor();\n    yellowHuman.talk();\n})();\n```\n```\n白人膚色是白色的。\n白人會說話，說的都是1byte的文字\n黑人膚色是黑色的。\n黑人會說話，一般人聽不懂\n黃種人膚色是黃色的。\n黃種人會說話，說的都是2byte的文字\n```\n\n### Definition :\nDefine an interface for creating an object, but let subclasses decide which class to instantiate Factroy Method lets a class defer instantiation to subclasses.\n定義一個用於創建對象的介面，讓子類別決定實例化哪一個類別，使一個類別的實例化延遲到其子類別\n\n### Pros :\n* 良好的封裝性，結構清晰，一個對象的建立是有條件約束的，降低耦合性。\n* 拓展性優秀，增加業務產品類別十，只要擴展一個工廠類，就能”擁抱變化”。\n* 封裝屏蔽產品類，產品類的實現如何變化，調用者根本不需要關心，他只關心產品的接口。\n* 滿足 迪米特法則(最小知識原則), 滿足依賴倒置原則，滿足里氏替換原則。\n* 萬物皆對象，所以萬物也就是產品類。\n\n### Example :\n* JDBC, 從MySQL切換到Oracle，就是更換一下驅動名稱。\n* MailServer 有 POP3、IMAP、HTTP，把這三種定義為產品類，定義介面IConnectMail，再定義工廠方法，按照不同條件，選擇不同連接方式，做到完美的拓展。\n* 單元測試, 測試類別A，類別有關連到類別B，用工廠方法把類別B虛擬出來，就能Mock依賴物件。","slug":"Factory-Pattern","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cm4000bck6xbhty60cj","content":"<p><img src=\"/images/DP/1g0WOw3.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定義人類與人種 */</span></span><br><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">    <span class=\"comment\">//　取得膚色</span></span><br><span class=\"line\">    getColor(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"comment\">//說話</span></span><br><span class=\"line\">    talk() : <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人膚色是黑色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人說話，一搬人聽不懂\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人膚色是黃色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人會說話，說的都是2byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人膚色是白色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人會說話，說的都是1byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 抽象人類工廠，透過泛型對createHuman的輸入參數產生限制 : </span></span><br><span class=\"line\"><span class=\"comment\">   1. class型別 ; 2. 必須實現Human  */</span></span><br><span class=\"line\">abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public abstract createHuman&lt;T extends Human&gt;<span class=\"function\">(<span class=\"params\">type: (<span class=\"keyword\">new</span> (</span>) =&gt;</span> T)): T ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 實踐工廠</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman&lt;T extends Human&gt;<span class=\"function\">(<span class=\"params\">type: (<span class=\"keyword\">new</span> (</span>) =&gt;</span> T)): T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> human: any = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             human = <span class=\"keyword\">new</span> type();<span class=\"comment\">//(&lt;any&gt;Object).assign(human,  new type());</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(exp) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(exp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> human <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">執行　創物者</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> creator: AbstractHumanFactory = <span class=\"keyword\">new</span> HumanFactory();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whiteUhman = creator.createHuman&lt;WhiteHuman&gt;(WhiteHuman);</span><br><span class=\"line\">    whiteUhman.getColor();</span><br><span class=\"line\">    whiteUhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> balckhman = creator.createHuman&lt;BlackHuman&gt;(BlackHuman);</span><br><span class=\"line\">    balckhman.getColor();</span><br><span class=\"line\">    balckhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> yellowHuman = creator.createHuman&lt;YellowHuman&gt;(YellowHuman);</span><br><span class=\"line\">    yellowHuman.getColor();</span><br><span class=\"line\">    yellowHuman.talk();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">白人膚色是白色的。</span><br><span class=\"line\">白人會說話，說的都是1byte的文字</span><br><span class=\"line\">黑人膚色是黑色的。</span><br><span class=\"line\">黑人會說話，一般人聽不懂</span><br><span class=\"line\">黃種人膚色是黃色的。</span><br><span class=\"line\">黃種人會說話，說的都是2byte的文字</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition :\"></a>Definition :</h3><p>Define an interface for creating an object, but let subclasses decide which class to instantiate Factroy Method lets a class defer instantiation to subclasses.<br>定義一個用於創建對象的介面，讓子類別決定實例化哪一個類別，使一個類別的實例化延遲到其子類別</p>\n<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h3><ul>\n<li>良好的封裝性，結構清晰，一個對象的建立是有條件約束的，降低耦合性。</li>\n<li>拓展性優秀，增加業務產品類別十，只要擴展一個工廠類，就能”擁抱變化”。</li>\n<li>封裝屏蔽產品類，產品類的實現如何變化，調用者根本不需要關心，他只關心產品的接口。</li>\n<li>滿足 迪米特法則(最小知識原則), 滿足依賴倒置原則，滿足里氏替換原則。</li>\n<li>萬物皆對象，所以萬物也就是產品類。</li>\n</ul>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example :\"></a>Example :</h3><ul>\n<li>JDBC, 從MySQL切換到Oracle，就是更換一下驅動名稱。</li>\n<li>MailServer 有 POP3、IMAP、HTTP，把這三種定義為產品類，定義介面IConnectMail，再定義工廠方法，按照不同條件，選擇不同連接方式，做到完美的拓展。</li>\n<li>單元測試, 測試類別A，類別有關連到類別B，用工廠方法把類別B虛擬出來，就能Mock依賴物件。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/DP/1g0WOw3.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 定義人類與人種 */</span></span><br><span class=\"line\">interface Human &#123;</span><br><span class=\"line\">    <span class=\"comment\">//　取得膚色</span></span><br><span class=\"line\">    getColor(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    <span class=\"comment\">//說話</span></span><br><span class=\"line\">    talk() : <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlackHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人膚色是黑色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黑人說話，一搬人聽不懂\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">YellowHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人膚色是黃色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"黃種人會說話，說的都是2byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WhiteHuman</span> <span class=\"title\">implements</span> <span class=\"title\">Human</span></span>&#123;</span><br><span class=\"line\">    public getColor = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人膚色是白色的。\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public talk = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"白人會說話，說的都是1byte的文字\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 抽象人類工廠，透過泛型對createHuman的輸入參數產生限制 : </span></span><br><span class=\"line\"><span class=\"comment\">   1. class型別 ; 2. 必須實現Human  */</span></span><br><span class=\"line\">abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public abstract createHuman&lt;T extends Human&gt;<span class=\"function\">(<span class=\"params\">type: (<span class=\"keyword\">new</span> (</span>) =&gt;</span> T)): T ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 實踐工廠</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HumanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHumanFactory</span> </span>&#123;</span><br><span class=\"line\">    public createHuman&lt;T extends Human&gt;<span class=\"function\">(<span class=\"params\">type: (<span class=\"keyword\">new</span> (</span>) =&gt;</span> T)): T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> human: any = &#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             human = <span class=\"keyword\">new</span> type();<span class=\"comment\">//(&lt;any&gt;Object).assign(human,  new type());</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(exp) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(exp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> human <span class=\"keyword\">as</span> T;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">執行　創物者</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> creator: AbstractHumanFactory = <span class=\"keyword\">new</span> HumanFactory();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> whiteUhman = creator.createHuman&lt;WhiteHuman&gt;(WhiteHuman);</span><br><span class=\"line\">    whiteUhman.getColor();</span><br><span class=\"line\">    whiteUhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> balckhman = creator.createHuman&lt;BlackHuman&gt;(BlackHuman);</span><br><span class=\"line\">    balckhman.getColor();</span><br><span class=\"line\">    balckhman.talk();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> yellowHuman = creator.createHuman&lt;YellowHuman&gt;(YellowHuman);</span><br><span class=\"line\">    yellowHuman.getColor();</span><br><span class=\"line\">    yellowHuman.talk();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">白人膚色是白色的。</span><br><span class=\"line\">白人會說話，說的都是1byte的文字</span><br><span class=\"line\">黑人膚色是黑色的。</span><br><span class=\"line\">黑人會說話，一般人聽不懂</span><br><span class=\"line\">黃種人膚色是黃色的。</span><br><span class=\"line\">黃種人會說話，說的都是2byte的文字</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition :\"></a>Definition :</h3><p>Define an interface for creating an object, but let subclasses decide which class to instantiate Factroy Method lets a class defer instantiation to subclasses.<br>定義一個用於創建對象的介面，讓子類別決定實例化哪一個類別，使一個類別的實例化延遲到其子類別</p>\n<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h3><ul>\n<li>良好的封裝性，結構清晰，一個對象的建立是有條件約束的，降低耦合性。</li>\n<li>拓展性優秀，增加業務產品類別十，只要擴展一個工廠類，就能”擁抱變化”。</li>\n<li>封裝屏蔽產品類，產品類的實現如何變化，調用者根本不需要關心，他只關心產品的接口。</li>\n<li>滿足 迪米特法則(最小知識原則), 滿足依賴倒置原則，滿足里氏替換原則。</li>\n<li>萬物皆對象，所以萬物也就是產品類。</li>\n</ul>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example :\"></a>Example :</h3><ul>\n<li>JDBC, 從MySQL切換到Oracle，就是更換一下驅動名稱。</li>\n<li>MailServer 有 POP3、IMAP、HTTP，把這三種定義為產品類，定義介面IConnectMail，再定義工廠方法，按照不同條件，選擇不同連接方式，做到完美的拓展。</li>\n<li>單元測試, 測試類別A，類別有關連到類別B，用工廠方法把類別B虛擬出來，就能Mock依賴物件。</li>\n</ul>\n"},{"title":"Go-Context","date":"2019-07-28T14:42:02.000Z","_content":"# Context\n允許傳遞\"Context\"在goroutine之中, 手動/超時來中止routine樹等操作.\n讓所有基於該context或其衍生的子context都會收到通知, 就能進行結束操作, 最後釋放goroutine. 優雅的解決goroutine啟動之後難以控制的問題.\n\n常見的有timeout、deadline 或 只是停止工作.\n\n## Context Interface\n```go\ntype Context interface {\n\tDeadline() (deadline time.Time, ok bool)\n\n\tDone() <-chan struct{}\n\n\tErr() error\n\n\tValue(key interface{}) interface{}\n}\n```\n* Deadline\n    獲取設置好的截止時間 ; 第二個bool返回值表示有沒有設置截止時間 \n* Done\n    返回一個 readonly channel, 如果該channel可以被讀取, 表示parent context 發起了cancel請求, 就能透過Done方法收到訊號後, 作結束操作.\n* Err\n    返回取消的錯誤原因, 為什麼context被取消\n* Value\n    獲得該Context上綁定的值, 是一組KV pair, 該值通常是thread safe的\n\n## 建立Context\n```go\n// 通常使用context.Background()作為樹的root, 該方法只會返回一個空的context\n// 就是接收請求用\n// 不可cancel, 沒有設置deadline 和帶任何value的context\nctx  := context.Background()\n```\n```go\n// 如果不需要一個全局的context, 可以用TODO一樣只會返回一個空的context\n// 就是接收請求用\nctx  := context.TODO()\n```\n### 建立sub context\n這四個With方法, 都要接收一個parent context參數.\n能理解成sub context對parent context的繼承; 反過來說就是基於parent context的衍生.\n這樣層層下去就能創建一個context tree, 每個節點都能有任意個sub node, 層級也能有任意多個.\n```go\n// 透過這樣的方式建立一個可被取消的sub context, 然後當作參數傳給goroutine使用\n// func WithValue(parent Context, key, val interface{}) Context\nctx := context.WithValue(context.Background(), key, \"test\")\n```\n```go\n// func WithCancel(parent Context) (ctx Context, cancel CancelFunc)\nctx, calcel := context.WithCancel(context.Background())\n```\n```go\n// 跟WithCancel很像, 只是多個截止時間, 表示時間到了會自動取消context; \n// 但也能手動cancel\n// func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)\nctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(2 * time.Second))\n```\n```go\n// 開始執行後多少時間自動取消context\n// func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\nctx, cancel := context.WithTimeout(context.Background(), 2 * time.Second)\n```\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tgo watch(ctx, \"goroutine1\")\n\tgo watch(ctx, \"goroutine2\")\n\tgo watch(ctx, \"goroutine3\")\n\n\ttime.Sleep(3 * time.Second)\n\tfmt.Println(\"notify stop goroutines by the context\")\n\tcancel()\n\n\ttime.Sleep(5 * time.Second)\n}\n\nfunc watch(ctx context.Context, name string) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Println(name, \"finish the goroutine\")\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(name, \"goroutine working...\")\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t}\n}\n/*\ngoroutine1 goroutine working...\ngoroutine2 goroutine working...\ngoroutine3 goroutine working...\ngoroutine1 goroutine working...\ngoroutine3 goroutine working...\ngoroutine2 goroutine working...\ngoroutine2 goroutine working...\ngoroutine1 goroutine working...\ngoroutine3 goroutine working...\nnotify stop goroutines by the context\ngoroutine2 finish the goroutine\ngoroutine3 finish the goroutine\ngoroutine1 finish the goroutine\n*/\n```\n","source":"_posts/Go-Context.md","raw":"---\ntitle: Go-Context\ndate: 2019-07-28 22:42:02\ncategories: \"Go\"\ntags:\n    - Go\n---\n# Context\n允許傳遞\"Context\"在goroutine之中, 手動/超時來中止routine樹等操作.\n讓所有基於該context或其衍生的子context都會收到通知, 就能進行結束操作, 最後釋放goroutine. 優雅的解決goroutine啟動之後難以控制的問題.\n\n常見的有timeout、deadline 或 只是停止工作.\n\n## Context Interface\n```go\ntype Context interface {\n\tDeadline() (deadline time.Time, ok bool)\n\n\tDone() <-chan struct{}\n\n\tErr() error\n\n\tValue(key interface{}) interface{}\n}\n```\n* Deadline\n    獲取設置好的截止時間 ; 第二個bool返回值表示有沒有設置截止時間 \n* Done\n    返回一個 readonly channel, 如果該channel可以被讀取, 表示parent context 發起了cancel請求, 就能透過Done方法收到訊號後, 作結束操作.\n* Err\n    返回取消的錯誤原因, 為什麼context被取消\n* Value\n    獲得該Context上綁定的值, 是一組KV pair, 該值通常是thread safe的\n\n## 建立Context\n```go\n// 通常使用context.Background()作為樹的root, 該方法只會返回一個空的context\n// 就是接收請求用\n// 不可cancel, 沒有設置deadline 和帶任何value的context\nctx  := context.Background()\n```\n```go\n// 如果不需要一個全局的context, 可以用TODO一樣只會返回一個空的context\n// 就是接收請求用\nctx  := context.TODO()\n```\n### 建立sub context\n這四個With方法, 都要接收一個parent context參數.\n能理解成sub context對parent context的繼承; 反過來說就是基於parent context的衍生.\n這樣層層下去就能創建一個context tree, 每個節點都能有任意個sub node, 層級也能有任意多個.\n```go\n// 透過這樣的方式建立一個可被取消的sub context, 然後當作參數傳給goroutine使用\n// func WithValue(parent Context, key, val interface{}) Context\nctx := context.WithValue(context.Background(), key, \"test\")\n```\n```go\n// func WithCancel(parent Context) (ctx Context, cancel CancelFunc)\nctx, calcel := context.WithCancel(context.Background())\n```\n```go\n// 跟WithCancel很像, 只是多個截止時間, 表示時間到了會自動取消context; \n// 但也能手動cancel\n// func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)\nctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(2 * time.Second))\n```\n```go\n// 開始執行後多少時間自動取消context\n// func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\nctx, cancel := context.WithTimeout(context.Background(), 2 * time.Second)\n```\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tctx, cancel := context.WithCancel(context.Background())\n\tgo watch(ctx, \"goroutine1\")\n\tgo watch(ctx, \"goroutine2\")\n\tgo watch(ctx, \"goroutine3\")\n\n\ttime.Sleep(3 * time.Second)\n\tfmt.Println(\"notify stop goroutines by the context\")\n\tcancel()\n\n\ttime.Sleep(5 * time.Second)\n}\n\nfunc watch(ctx context.Context, name string) {\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tfmt.Println(name, \"finish the goroutine\")\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(name, \"goroutine working...\")\n\t\t\ttime.Sleep(1 * time.Second)\n\t\t}\n\t}\n}\n/*\ngoroutine1 goroutine working...\ngoroutine2 goroutine working...\ngoroutine3 goroutine working...\ngoroutine1 goroutine working...\ngoroutine3 goroutine working...\ngoroutine2 goroutine working...\ngoroutine2 goroutine working...\ngoroutine1 goroutine working...\ngoroutine3 goroutine working...\nnotify stop goroutines by the context\ngoroutine2 finish the goroutine\ngoroutine3 finish the goroutine\ngoroutine1 finish the goroutine\n*/\n```\n","slug":"Go-Context","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cm6000cck6xtqts9d1v","content":"<h1 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h1><p>允許傳遞”Context”在goroutine之中, 手動/超時來中止routine樹等操作.<br>讓所有基於該context或其衍生的子context都會收到通知, 就能進行結束操作, 最後釋放goroutine. 優雅的解決goroutine啟動之後難以控制的問題.</p>\n<p>常見的有timeout、deadline 或 只是停止工作.</p>\n<h2 id=\"Context-Interface\"><a href=\"#Context-Interface\" class=\"headerlink\" title=\"Context Interface\"></a>Context Interface</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDeadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tErr() error</span><br><span class=\"line\"></span><br><span class=\"line\">\tValue(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Deadline<br>  獲取設置好的截止時間 ; 第二個bool返回值表示有沒有設置截止時間 </li>\n<li>Done<br>  返回一個 readonly channel, 如果該channel可以被讀取, 表示parent context 發起了cancel請求, 就能透過Done方法收到訊號後, 作結束操作.</li>\n<li>Err<br>  返回取消的錯誤原因, 為什麼context被取消</li>\n<li>Value<br>  獲得該Context上綁定的值, 是一組KV pair, 該值通常是thread safe的</li>\n</ul>\n<h2 id=\"建立Context\"><a href=\"#建立Context\" class=\"headerlink\" title=\"建立Context\"></a>建立Context</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通常使用context.Background()作為樹的root, 該方法只會返回一個空的context</span></span><br><span class=\"line\"><span class=\"comment\">// 就是接收請求用</span></span><br><span class=\"line\"><span class=\"comment\">// 不可cancel, 沒有設置deadline 和帶任何value的context</span></span><br><span class=\"line\">ctx  := context.Background()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果不需要一個全局的context, 可以用TODO一樣只會返回一個空的context</span></span><br><span class=\"line\"><span class=\"comment\">// 就是接收請求用</span></span><br><span class=\"line\">ctx  := context.TODO()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建立sub-context\"><a href=\"#建立sub-context\" class=\"headerlink\" title=\"建立sub context\"></a>建立sub context</h3><p>這四個With方法, 都要接收一個parent context參數.<br>能理解成sub context對parent context的繼承; 反過來說就是基於parent context的衍生.<br>這樣層層下去就能創建一個context tree, 每個節點都能有任意個sub node, 層級也能有任意多個.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 透過這樣的方式建立一個可被取消的sub context, 然後當作參數傳給goroutine使用</span></span><br><span class=\"line\"><span class=\"comment\">// func WithValue(parent Context, key, val interface&#123;&#125;) Context</span></span><br><span class=\"line\">ctx := context.WithValue(context.Background(), key, <span class=\"string\">\"test\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// func WithCancel(parent Context) (ctx Context, cancel CancelFunc)</span></span><br><span class=\"line\">ctx, calcel := context.WithCancel(context.Background())</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跟WithCancel很像, 只是多個截止時間, 表示時間到了會自動取消context; </span></span><br><span class=\"line\"><span class=\"comment\">// 但也能手動cancel</span></span><br><span class=\"line\"><span class=\"comment\">// func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)</span></span><br><span class=\"line\">ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(<span class=\"number\">2</span> * time.Second))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 開始執行後多少時間自動取消context</span></span><br><span class=\"line\"><span class=\"comment\">// func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</span></span><br><span class=\"line\">ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">2</span> * time.Second)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(ctx, <span class=\"string\">\"goroutine1\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(ctx, <span class=\"string\">\"goroutine2\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(ctx, <span class=\"string\">\"goroutine3\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"notify stop goroutines by the context\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">watch</span><span class=\"params\">(ctx context.Context, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\tfmt.Println(name, <span class=\"string\">\"finish the goroutine\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tfmt.Println(name, <span class=\"string\">\"goroutine working...\"</span>)</span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">notify stop goroutines by the context</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 finish the goroutine</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 finish the goroutine</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 finish the goroutine</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h1><p>允許傳遞”Context”在goroutine之中, 手動/超時來中止routine樹等操作.<br>讓所有基於該context或其衍生的子context都會收到通知, 就能進行結束操作, 最後釋放goroutine. 優雅的解決goroutine啟動之後難以控制的問題.</p>\n<p>常見的有timeout、deadline 或 只是停止工作.</p>\n<h2 id=\"Context-Interface\"><a href=\"#Context-Interface\" class=\"headerlink\" title=\"Context Interface\"></a>Context Interface</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Context <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDeadline() (deadline time.Time, ok <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone() &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tErr() error</span><br><span class=\"line\"></span><br><span class=\"line\">\tValue(key <span class=\"keyword\">interface</span>&#123;&#125;) <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Deadline<br>  獲取設置好的截止時間 ; 第二個bool返回值表示有沒有設置截止時間 </li>\n<li>Done<br>  返回一個 readonly channel, 如果該channel可以被讀取, 表示parent context 發起了cancel請求, 就能透過Done方法收到訊號後, 作結束操作.</li>\n<li>Err<br>  返回取消的錯誤原因, 為什麼context被取消</li>\n<li>Value<br>  獲得該Context上綁定的值, 是一組KV pair, 該值通常是thread safe的</li>\n</ul>\n<h2 id=\"建立Context\"><a href=\"#建立Context\" class=\"headerlink\" title=\"建立Context\"></a>建立Context</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通常使用context.Background()作為樹的root, 該方法只會返回一個空的context</span></span><br><span class=\"line\"><span class=\"comment\">// 就是接收請求用</span></span><br><span class=\"line\"><span class=\"comment\">// 不可cancel, 沒有設置deadline 和帶任何value的context</span></span><br><span class=\"line\">ctx  := context.Background()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果不需要一個全局的context, 可以用TODO一樣只會返回一個空的context</span></span><br><span class=\"line\"><span class=\"comment\">// 就是接收請求用</span></span><br><span class=\"line\">ctx  := context.TODO()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建立sub-context\"><a href=\"#建立sub-context\" class=\"headerlink\" title=\"建立sub context\"></a>建立sub context</h3><p>這四個With方法, 都要接收一個parent context參數.<br>能理解成sub context對parent context的繼承; 反過來說就是基於parent context的衍生.<br>這樣層層下去就能創建一個context tree, 每個節點都能有任意個sub node, 層級也能有任意多個.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 透過這樣的方式建立一個可被取消的sub context, 然後當作參數傳給goroutine使用</span></span><br><span class=\"line\"><span class=\"comment\">// func WithValue(parent Context, key, val interface&#123;&#125;) Context</span></span><br><span class=\"line\">ctx := context.WithValue(context.Background(), key, <span class=\"string\">\"test\"</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// func WithCancel(parent Context) (ctx Context, cancel CancelFunc)</span></span><br><span class=\"line\">ctx, calcel := context.WithCancel(context.Background())</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跟WithCancel很像, 只是多個截止時間, 表示時間到了會自動取消context; </span></span><br><span class=\"line\"><span class=\"comment\">// 但也能手動cancel</span></span><br><span class=\"line\"><span class=\"comment\">// func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)</span></span><br><span class=\"line\">ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(<span class=\"number\">2</span> * time.Second))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 開始執行後多少時間自動取消context</span></span><br><span class=\"line\"><span class=\"comment\">// func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</span></span><br><span class=\"line\">ctx, cancel := context.WithTimeout(context.Background(), <span class=\"number\">2</span> * time.Second)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"context\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(ctx, <span class=\"string\">\"goroutine1\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(ctx, <span class=\"string\">\"goroutine2\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> watch(ctx, <span class=\"string\">\"goroutine3\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"notify stop goroutines by the context\"</span>)</span><br><span class=\"line\">\tcancel()</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">watch</span><span class=\"params\">(ctx context.Context, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">\t\t\tfmt.Println(name, <span class=\"string\">\"finish the goroutine\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tfmt.Println(name, <span class=\"string\">\"goroutine working...\"</span>)</span><br><span class=\"line\">\t\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 goroutine working...</span></span><br><span class=\"line\"><span class=\"comment\">notify stop goroutines by the context</span></span><br><span class=\"line\"><span class=\"comment\">goroutine2 finish the goroutine</span></span><br><span class=\"line\"><span class=\"comment\">goroutine3 finish the goroutine</span></span><br><span class=\"line\"><span class=\"comment\">goroutine1 finish the goroutine</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Go Module & Go Vendor","date":"2019-07-14T07:32:19.000Z","_content":"![](/images/Go/go-packages.jpg)\n## Go Module基礎\n\n### 出現原因\n1. GOPATH不符合一般開發者的習慣; 大家習慣用maven, node module之類的方式.\n2. GOPATH無法有效管理板依賴, 沒有辦法表明所依賴的包的版本.\n\n### 環境準備\n* Go version >= 1.11\n* GO111MODULE=on\n\n### GoMod effect immport package \n* 可以在$GOPATH之外的地方建立專案\n* 該專案Go Module開啟後, 下載的package會放在$GOPATH/pkg/mod下.\n![](https://i.imgur.com/Op2TRi6.png)\n* $GOPATH/bin的功能依然保持\n\n#### Go Mod Commands\n![](https://i.imgur.com/vHzYvzT.png)\n有兩種方式能定義一個正確的Go module\n```bash\n// 在$GOPATH/src的目錄下, 建立合理的module路徑\n// 進入該module目錄, 執行下面命令\ngo mod init [module name]\n///\n```bash\n// 在任意地方, 建立好module路徑\n// 在該目錄下, 執行\ngo mod init [folder/]module name\n```\n就會在該專案下生出了go.mod文件了.\n![](https://i.imgur.com/PIIW4Bz.png)\n\n### Syntax of go.mod\n* module \n    * 定義模組路徑\n* go\n    * 定義go version\n* require\n    * 指定依賴的功能包和其版本或是[預設是最新版]\n* exclude\n    * 忽略該功能包和其版本\n* replace\n    * 替換依賴的功能包\n```\nmodule my/package\ngo 1.12\nrequire other/thing v1.0.2\nrequire new/thing/v2 v2.3.4\nexclude old/thing v1.2.3\nreplace bad/thing v1.4.5 => good/thing v1.4.5\n```\n\n#### Go Mod Require\n* 安裝一下logrus\n```bash\ngo get github.com/sirupsen/logrus\n```\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.2 // indirect\n```\n此時把v1.4.2 改成v1.4.1\n執行\n```bash\ngo mod download\n```\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.1 // indirect\n```\n也會發生$GOPATH/pkg/mod/github.com/sirupsen目錄下,多了logrus@v1.4.1和1.4.2版本的源碼\n![](https://i.imgur.com/5WlkJoT.png)\n\n\n#### Go Mod Exclude\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.2 // indirect\n\nexclude github.com/gin-gonic/gin v1.4.0\n```\n```bash\ngo get github.com/gin-gonic/gin\n```\n會發現應該是要下載當前最新板的v1.4.0的gin; 但因為有exclude gin 1.4.0 ;\n所以改成下載v1.3.9\n![](https://i.imgur.com/mW1aVji.png)\n\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire (\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/gin-gonic/gin v1.3.0 // indirect\n\tgithub.com/golang/protobuf v1.3.2 // indirect\n\tgithub.com/mattn/go-isatty v0.0.8 // indirect\n\tgithub.com/sirupsen/logrus v1.4.2\n\tgithub.com/ugorji/go v1.1.7 // indirect\n\tgopkg.in/go-playground/validator.v8 v8.18.2 // indirect\n\tgopkg.in/yaml.v2 v2.2.2 // indirect\n)\nexclude github.com/gin-gonic/gin v1.4.0\n```\n如果exclude指定gin的依賴功能包, 該功能包會避開該版號作安裝\n\n#### Go Mod Replace\n如果有package被replace, 則編譯時會使用對應的項目來作取代.\n1. 與require類似, 可以指向令一個repo\n2. 又或是指向本地的一個目錄\n\n**gomodtest**\n```go\n// go.mod\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.2 // indirect\n```\n```go\n// modtest.go\npackage gomodtest\n\nimport (\n\tlog \"github.com/sirupsen/logrus\"\n)\n\nfunc Init() {\n\tlog.Info(\"godmodtest init\")\n}\n\nfunc Exec() {\n\tlog.Info(\"godmodtest exec\")\n}\n```\n\n**gomaintest\n```go\n// go.mod\nmodule github.com/tedmax100/gomaintest\ngo 1.12\nreplace github.com/tedmax100/modtest => ../gomodtest\n```\n\n```go\n// main.go\npackage main\n\nimport (\n\tmodtest \"github.com/tedmax100/modtest\"\n)\n\nfunc main() {\n\tmodtest.Exec()\n}\n```\n執行結果\n![](https://i.imgur.com/h5OoYQS.png)  \n\n\n***notes***\n* Replace和Exclude都只對當前這module有影響, 對其他功能包不會去影響到 ;\n其他功能包自己的replace也不會影響到這包.\n","source":"_posts/Go-Module-Go-Vendor.md","raw":"---\ntitle: Go Module & Go Vendor\ndate: 2019-07-14 15:32:19\ncategories: \"Go\"\ntags:\n    - Go\n---\n![](/images/Go/go-packages.jpg)\n## Go Module基礎\n\n### 出現原因\n1. GOPATH不符合一般開發者的習慣; 大家習慣用maven, node module之類的方式.\n2. GOPATH無法有效管理板依賴, 沒有辦法表明所依賴的包的版本.\n\n### 環境準備\n* Go version >= 1.11\n* GO111MODULE=on\n\n### GoMod effect immport package \n* 可以在$GOPATH之外的地方建立專案\n* 該專案Go Module開啟後, 下載的package會放在$GOPATH/pkg/mod下.\n![](https://i.imgur.com/Op2TRi6.png)\n* $GOPATH/bin的功能依然保持\n\n#### Go Mod Commands\n![](https://i.imgur.com/vHzYvzT.png)\n有兩種方式能定義一個正確的Go module\n```bash\n// 在$GOPATH/src的目錄下, 建立合理的module路徑\n// 進入該module目錄, 執行下面命令\ngo mod init [module name]\n///\n```bash\n// 在任意地方, 建立好module路徑\n// 在該目錄下, 執行\ngo mod init [folder/]module name\n```\n就會在該專案下生出了go.mod文件了.\n![](https://i.imgur.com/PIIW4Bz.png)\n\n### Syntax of go.mod\n* module \n    * 定義模組路徑\n* go\n    * 定義go version\n* require\n    * 指定依賴的功能包和其版本或是[預設是最新版]\n* exclude\n    * 忽略該功能包和其版本\n* replace\n    * 替換依賴的功能包\n```\nmodule my/package\ngo 1.12\nrequire other/thing v1.0.2\nrequire new/thing/v2 v2.3.4\nexclude old/thing v1.2.3\nreplace bad/thing v1.4.5 => good/thing v1.4.5\n```\n\n#### Go Mod Require\n* 安裝一下logrus\n```bash\ngo get github.com/sirupsen/logrus\n```\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.2 // indirect\n```\n此時把v1.4.2 改成v1.4.1\n執行\n```bash\ngo mod download\n```\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.1 // indirect\n```\n也會發生$GOPATH/pkg/mod/github.com/sirupsen目錄下,多了logrus@v1.4.1和1.4.2版本的源碼\n![](https://i.imgur.com/5WlkJoT.png)\n\n\n#### Go Mod Exclude\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.2 // indirect\n\nexclude github.com/gin-gonic/gin v1.4.0\n```\n```bash\ngo get github.com/gin-gonic/gin\n```\n會發現應該是要下載當前最新板的v1.4.0的gin; 但因為有exclude gin 1.4.0 ;\n所以改成下載v1.3.9\n![](https://i.imgur.com/mW1aVji.png)\n\n**go.mod**的內容\n```\nmodule modtest\ngo 1.12\nrequire (\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/gin-gonic/gin v1.3.0 // indirect\n\tgithub.com/golang/protobuf v1.3.2 // indirect\n\tgithub.com/mattn/go-isatty v0.0.8 // indirect\n\tgithub.com/sirupsen/logrus v1.4.2\n\tgithub.com/ugorji/go v1.1.7 // indirect\n\tgopkg.in/go-playground/validator.v8 v8.18.2 // indirect\n\tgopkg.in/yaml.v2 v2.2.2 // indirect\n)\nexclude github.com/gin-gonic/gin v1.4.0\n```\n如果exclude指定gin的依賴功能包, 該功能包會避開該版號作安裝\n\n#### Go Mod Replace\n如果有package被replace, 則編譯時會使用對應的項目來作取代.\n1. 與require類似, 可以指向令一個repo\n2. 又或是指向本地的一個目錄\n\n**gomodtest**\n```go\n// go.mod\nmodule modtest\ngo 1.12\nrequire github.com/sirupsen/logrus v1.4.2 // indirect\n```\n```go\n// modtest.go\npackage gomodtest\n\nimport (\n\tlog \"github.com/sirupsen/logrus\"\n)\n\nfunc Init() {\n\tlog.Info(\"godmodtest init\")\n}\n\nfunc Exec() {\n\tlog.Info(\"godmodtest exec\")\n}\n```\n\n**gomaintest\n```go\n// go.mod\nmodule github.com/tedmax100/gomaintest\ngo 1.12\nreplace github.com/tedmax100/modtest => ../gomodtest\n```\n\n```go\n// main.go\npackage main\n\nimport (\n\tmodtest \"github.com/tedmax100/modtest\"\n)\n\nfunc main() {\n\tmodtest.Exec()\n}\n```\n執行結果\n![](https://i.imgur.com/h5OoYQS.png)  \n\n\n***notes***\n* Replace和Exclude都只對當前這module有影響, 對其他功能包不會去影響到 ;\n其他功能包自己的replace也不會影響到這包.\n","slug":"Go-Module-Go-Vendor","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cm8000fck6xqc066qau","content":"<p><img src=\"/images/Go/go-packages.jpg\" alt></p>\n<h2 id=\"Go-Module基礎\"><a href=\"#Go-Module基礎\" class=\"headerlink\" title=\"Go Module基礎\"></a>Go Module基礎</h2><h3 id=\"出現原因\"><a href=\"#出現原因\" class=\"headerlink\" title=\"出現原因\"></a>出現原因</h3><ol>\n<li>GOPATH不符合一般開發者的習慣; 大家習慣用maven, node module之類的方式.</li>\n<li>GOPATH無法有效管理板依賴, 沒有辦法表明所依賴的包的版本.</li>\n</ol>\n<h3 id=\"環境準備\"><a href=\"#環境準備\" class=\"headerlink\" title=\"環境準備\"></a>環境準備</h3><ul>\n<li>Go version &gt;= 1.11</li>\n<li>GO111MODULE=on</li>\n</ul>\n<h3 id=\"GoMod-effect-immport-package\"><a href=\"#GoMod-effect-immport-package\" class=\"headerlink\" title=\"GoMod effect immport package\"></a>GoMod effect immport package</h3><ul>\n<li>可以在$GOPATH之外的地方建立專案</li>\n<li>該專案Go Module開啟後, 下載的package會放在$GOPATH/pkg/mod下.<br><img src=\"https://i.imgur.com/Op2TRi6.png\" alt></li>\n<li>$GOPATH/bin的功能依然保持</li>\n</ul>\n<h4 id=\"Go-Mod-Commands\"><a href=\"#Go-Mod-Commands\" class=\"headerlink\" title=\"Go Mod Commands\"></a>Go Mod Commands</h4><p><img src=\"https://i.imgur.com/vHzYvzT.png\" alt><br>有兩種方式能定義一個正確的Go module</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在<span class=\"variable\">$GOPATH</span>/src的目錄下, 建立合理的module路徑</span><br><span class=\"line\">// 進入該module目錄, 執行下面命令</span><br><span class=\"line\">go mod init [module name]</span><br><span class=\"line\">///</span><br><span class=\"line\">```bash</span><br><span class=\"line\">// 在任意地方, 建立好module路徑</span><br><span class=\"line\">// 在該目錄下, 執行</span><br><span class=\"line\">go mod init [folder/]module name</span><br></pre></td></tr></table></figure>\n\n<p>就會在該專案下生出了go.mod文件了.<br><img src=\"https://i.imgur.com/PIIW4Bz.png\" alt></p>\n<h3 id=\"Syntax-of-go-mod\"><a href=\"#Syntax-of-go-mod\" class=\"headerlink\" title=\"Syntax of go.mod\"></a>Syntax of go.mod</h3><ul>\n<li>module <ul>\n<li>定義模組路徑</li>\n</ul>\n</li>\n<li>go<ul>\n<li>定義go version</li>\n</ul>\n</li>\n<li>require<ul>\n<li>指定依賴的功能包和其版本或是[預設是最新版]</li>\n</ul>\n</li>\n<li>exclude<ul>\n<li>忽略該功能包和其版本</li>\n</ul>\n</li>\n<li>replace<ul>\n<li>替換依賴的功能包<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module my/package</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require other/thing v1.0.2</span><br><span class=\"line\">require new/thing/v2 v2.3.4</span><br><span class=\"line\">exclude old/thing v1.2.3</span><br><span class=\"line\">replace bad/thing v1.4.5 =&gt; good/thing v1.4.5</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Go-Mod-Require\"><a href=\"#Go-Mod-Require\" class=\"headerlink\" title=\"Go Mod Require\"></a>Go Mod Require</h4><ul>\n<li>安裝一下logrus<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require github.com/sirupsen/logrus v1.4.2 // indirect</span><br></pre></td></tr></table></figure>\n\n<p>此時把v1.4.2 改成v1.4.1<br>執行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod download</span><br></pre></td></tr></table></figure>\n\n<p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require github.com/sirupsen/logrus v1.4.1 // indirect</span><br></pre></td></tr></table></figure>\n\n<p>也會發生$GOPATH/pkg/mod/github.com/sirupsen目錄下,多了<a href=\"mailto:logrus@v1.4.1\" target=\"_blank\" rel=\"noopener\">logrus@v1.4.1</a>和1.4.2版本的源碼<br><img src=\"https://i.imgur.com/5WlkJoT.png\" alt></p>\n<h4 id=\"Go-Mod-Exclude\"><a href=\"#Go-Mod-Exclude\" class=\"headerlink\" title=\"Go Mod Exclude\"></a>Go Mod Exclude</h4><p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require github.com/sirupsen/logrus v1.4.2 // indirect</span><br><span class=\"line\"></span><br><span class=\"line\">exclude github.com/gin-gonic/gin v1.4.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>\n\n<p>會發現應該是要下載當前最新板的v1.4.0的gin; 但因為有exclude gin 1.4.0 ;<br>所以改成下載v1.3.9<br><img src=\"https://i.imgur.com/mW1aVji.png\" alt></p>\n<p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require (</span><br><span class=\"line\">\tgithub.com/gin-contrib/sse v0.1.0 // indirect</span><br><span class=\"line\">\tgithub.com/gin-gonic/gin v1.3.0 // indirect</span><br><span class=\"line\">\tgithub.com/golang/protobuf v1.3.2 // indirect</span><br><span class=\"line\">\tgithub.com/mattn/go-isatty v0.0.8 // indirect</span><br><span class=\"line\">\tgithub.com/sirupsen/logrus v1.4.2</span><br><span class=\"line\">\tgithub.com/ugorji/go v1.1.7 // indirect</span><br><span class=\"line\">\tgopkg.in/go-playground/validator.v8 v8.18.2 // indirect</span><br><span class=\"line\">\tgopkg.in/yaml.v2 v2.2.2 // indirect</span><br><span class=\"line\">)</span><br><span class=\"line\">exclude github.com/gin-gonic/gin v1.4.0</span><br></pre></td></tr></table></figure>\n\n<p>如果exclude指定gin的依賴功能包, 該功能包會避開該版號作安裝</p>\n<h4 id=\"Go-Mod-Replace\"><a href=\"#Go-Mod-Replace\" class=\"headerlink\" title=\"Go Mod Replace\"></a>Go Mod Replace</h4><p>如果有package被replace, 則編譯時會使用對應的項目來作取代.</p>\n<ol>\n<li>與require類似, 可以指向令一個repo</li>\n<li>又或是指向本地的一個目錄</li>\n</ol>\n<p><strong>gomodtest</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go.mod</span></span><br><span class=\"line\">module modtest</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.12</span></span><br><span class=\"line\">require github.com/sirupsen/logrus v1<span class=\"number\">.4</span><span class=\"number\">.2</span> <span class=\"comment\">// indirect</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modtest.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> gomodtest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tlog <span class=\"string\">\"github.com/sirupsen/logrus\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"godmodtest init\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Exec</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"godmodtest exec\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**gomaintest</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go.mod</span></span><br><span class=\"line\">module github.com/tedmax100/gomaintest</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.12</span></span><br><span class=\"line\">replace github.com/tedmax100/modtest =&gt; ../gomodtest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tmodtest <span class=\"string\">\"github.com/tedmax100/modtest\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmodtest.Exec()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>執行結果<br><img src=\"https://i.imgur.com/h5OoYQS.png\" alt>  </p>\n<p><strong><em>notes</em></strong></p>\n<ul>\n<li>Replace和Exclude都只對當前這module有影響, 對其他功能包不會去影響到 ;<br>其他功能包自己的replace也不會影響到這包.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Go/go-packages.jpg\" alt></p>\n<h2 id=\"Go-Module基礎\"><a href=\"#Go-Module基礎\" class=\"headerlink\" title=\"Go Module基礎\"></a>Go Module基礎</h2><h3 id=\"出現原因\"><a href=\"#出現原因\" class=\"headerlink\" title=\"出現原因\"></a>出現原因</h3><ol>\n<li>GOPATH不符合一般開發者的習慣; 大家習慣用maven, node module之類的方式.</li>\n<li>GOPATH無法有效管理板依賴, 沒有辦法表明所依賴的包的版本.</li>\n</ol>\n<h3 id=\"環境準備\"><a href=\"#環境準備\" class=\"headerlink\" title=\"環境準備\"></a>環境準備</h3><ul>\n<li>Go version &gt;= 1.11</li>\n<li>GO111MODULE=on</li>\n</ul>\n<h3 id=\"GoMod-effect-immport-package\"><a href=\"#GoMod-effect-immport-package\" class=\"headerlink\" title=\"GoMod effect immport package\"></a>GoMod effect immport package</h3><ul>\n<li>可以在$GOPATH之外的地方建立專案</li>\n<li>該專案Go Module開啟後, 下載的package會放在$GOPATH/pkg/mod下.<br><img src=\"https://i.imgur.com/Op2TRi6.png\" alt></li>\n<li>$GOPATH/bin的功能依然保持</li>\n</ul>\n<h4 id=\"Go-Mod-Commands\"><a href=\"#Go-Mod-Commands\" class=\"headerlink\" title=\"Go Mod Commands\"></a>Go Mod Commands</h4><p><img src=\"https://i.imgur.com/vHzYvzT.png\" alt><br>有兩種方式能定義一個正確的Go module</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在<span class=\"variable\">$GOPATH</span>/src的目錄下, 建立合理的module路徑</span><br><span class=\"line\">// 進入該module目錄, 執行下面命令</span><br><span class=\"line\">go mod init [module name]</span><br><span class=\"line\">///</span><br><span class=\"line\">```bash</span><br><span class=\"line\">// 在任意地方, 建立好module路徑</span><br><span class=\"line\">// 在該目錄下, 執行</span><br><span class=\"line\">go mod init [folder/]module name</span><br></pre></td></tr></table></figure>\n\n<p>就會在該專案下生出了go.mod文件了.<br><img src=\"https://i.imgur.com/PIIW4Bz.png\" alt></p>\n<h3 id=\"Syntax-of-go-mod\"><a href=\"#Syntax-of-go-mod\" class=\"headerlink\" title=\"Syntax of go.mod\"></a>Syntax of go.mod</h3><ul>\n<li>module <ul>\n<li>定義模組路徑</li>\n</ul>\n</li>\n<li>go<ul>\n<li>定義go version</li>\n</ul>\n</li>\n<li>require<ul>\n<li>指定依賴的功能包和其版本或是[預設是最新版]</li>\n</ul>\n</li>\n<li>exclude<ul>\n<li>忽略該功能包和其版本</li>\n</ul>\n</li>\n<li>replace<ul>\n<li>替換依賴的功能包<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module my/package</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require other/thing v1.0.2</span><br><span class=\"line\">require new/thing/v2 v2.3.4</span><br><span class=\"line\">exclude old/thing v1.2.3</span><br><span class=\"line\">replace bad/thing v1.4.5 =&gt; good/thing v1.4.5</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Go-Mod-Require\"><a href=\"#Go-Mod-Require\" class=\"headerlink\" title=\"Go Mod Require\"></a>Go Mod Require</h4><ul>\n<li>安裝一下logrus<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require github.com/sirupsen/logrus v1.4.2 // indirect</span><br></pre></td></tr></table></figure>\n\n<p>此時把v1.4.2 改成v1.4.1<br>執行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go mod download</span><br></pre></td></tr></table></figure>\n\n<p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require github.com/sirupsen/logrus v1.4.1 // indirect</span><br></pre></td></tr></table></figure>\n\n<p>也會發生$GOPATH/pkg/mod/github.com/sirupsen目錄下,多了<a href=\"mailto:logrus@v1.4.1\" target=\"_blank\" rel=\"noopener\">logrus@v1.4.1</a>和1.4.2版本的源碼<br><img src=\"https://i.imgur.com/5WlkJoT.png\" alt></p>\n<h4 id=\"Go-Mod-Exclude\"><a href=\"#Go-Mod-Exclude\" class=\"headerlink\" title=\"Go Mod Exclude\"></a>Go Mod Exclude</h4><p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require github.com/sirupsen/logrus v1.4.2 // indirect</span><br><span class=\"line\"></span><br><span class=\"line\">exclude github.com/gin-gonic/gin v1.4.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>\n\n<p>會發現應該是要下載當前最新板的v1.4.0的gin; 但因為有exclude gin 1.4.0 ;<br>所以改成下載v1.3.9<br><img src=\"https://i.imgur.com/mW1aVji.png\" alt></p>\n<p><strong>go.mod</strong>的內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module modtest</span><br><span class=\"line\">go 1.12</span><br><span class=\"line\">require (</span><br><span class=\"line\">\tgithub.com/gin-contrib/sse v0.1.0 // indirect</span><br><span class=\"line\">\tgithub.com/gin-gonic/gin v1.3.0 // indirect</span><br><span class=\"line\">\tgithub.com/golang/protobuf v1.3.2 // indirect</span><br><span class=\"line\">\tgithub.com/mattn/go-isatty v0.0.8 // indirect</span><br><span class=\"line\">\tgithub.com/sirupsen/logrus v1.4.2</span><br><span class=\"line\">\tgithub.com/ugorji/go v1.1.7 // indirect</span><br><span class=\"line\">\tgopkg.in/go-playground/validator.v8 v8.18.2 // indirect</span><br><span class=\"line\">\tgopkg.in/yaml.v2 v2.2.2 // indirect</span><br><span class=\"line\">)</span><br><span class=\"line\">exclude github.com/gin-gonic/gin v1.4.0</span><br></pre></td></tr></table></figure>\n\n<p>如果exclude指定gin的依賴功能包, 該功能包會避開該版號作安裝</p>\n<h4 id=\"Go-Mod-Replace\"><a href=\"#Go-Mod-Replace\" class=\"headerlink\" title=\"Go Mod Replace\"></a>Go Mod Replace</h4><p>如果有package被replace, 則編譯時會使用對應的項目來作取代.</p>\n<ol>\n<li>與require類似, 可以指向令一個repo</li>\n<li>又或是指向本地的一個目錄</li>\n</ol>\n<p><strong>gomodtest</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go.mod</span></span><br><span class=\"line\">module modtest</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.12</span></span><br><span class=\"line\">require github.com/sirupsen/logrus v1<span class=\"number\">.4</span><span class=\"number\">.2</span> <span class=\"comment\">// indirect</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// modtest.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> gomodtest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tlog <span class=\"string\">\"github.com/sirupsen/logrus\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"godmodtest init\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Exec</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"godmodtest exec\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**gomaintest</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// go.mod</span></span><br><span class=\"line\">module github.com/tedmax100/gomaintest</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.12</span></span><br><span class=\"line\">replace github.com/tedmax100/modtest =&gt; ../gomodtest</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tmodtest <span class=\"string\">\"github.com/tedmax100/modtest\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tmodtest.Exec()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>執行結果<br><img src=\"https://i.imgur.com/h5OoYQS.png\" alt>  </p>\n<p><strong><em>notes</em></strong></p>\n<ul>\n<li>Replace和Exclude都只對當前這module有影響, 對其他功能包不會去影響到 ;<br>其他功能包自己的replace也不會影響到這包.</li>\n</ul>\n"},{"title":"Go Package","date":"2019-07-14T07:31:31.000Z","_content":"![](/images/Go/source-files-to-package.001.png)\n[Everything you need to know about packages in Go](https://medium.com/rungo/everything-you-need-to-know-about-packages-in-go-b8bac62b74cc)\n\n### Package(包)\n程式碼的目錄, 可以重複利用程式的方案, 方便維護。\nGo默認提供很多package, 像是fmt、is等。\n開發者也可以創建自己的package。\n\npackage要求所有檔案的第一行添加package名稱，標示該文件所歸屬的package。\n```go\npackage 包名稱\n```\n* 一個目錄下的同級檔案屬於同一個package\n* package名稱可以與目錄不同名稱, 但盡可能一樣\n* main package為應用程式執行的entry point; 若沒有main package則無法編譯成可執行的檔案在bin下\n* package name, Go團隊建議簡單扁平為原則。 所以盡量避免下划線、中划線和參雜大寫字母。\n\n#### Creating a package\n1. 可執行包(executable package)\n    可自己執行，表示有main package\n2. 工具包(utility package)\n    不可自己執行，但是可以給可執行包做擴展應用的作用\n    \n![](https://i.imgur.com/1gvLawQ.png)\n\n```go\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t. \"hello/math\"\n)\n\nfunc main() {\n\tfmt.Println(\"hello\")\n\tfmt.Println(Average([]float64{1, 2}))\n}\n```\n```go\n// math/math.go\npackage math\n\nfunc Average(xs []float64) float64 {\n\ttotal := float64(0)\n\tfor _, x := range xs {\n\t\ttotal += x\n\t}\n\treturn total / float64(len(xs))\n}\n```\n```bash\n# 編譯hello package \ncd $GOPATH/src/hello; \ngo install;\n# 因為有main package, 所以會安裝到$GOPATH/bin 作為可執行包\n```\n![](https://i.imgur.com/boE8wD0.png)\n\n```bash\n# 編譯hello package \ncd $GOPATH/src/hello/math; \ngo install;\n# 因為沒有main package, 所以會安裝到$GOPATH/pkg下 作為工具包\n```\n![](https://i.imgur.com/fhzkZRr.png)\n\n\n#### Import package\n使用import package，Go會先在 $GOROOT/src下尋找指定的package。\n若找不到就往$GOPATH/src目錄下尋找。\n找不到就會報出編譯錯誤。\n\n```go\npackage main\n\nimport (\n  // fmt位於$GOROOT/src下，找到!\n  \"fmt\"\n  // gin並不在$GOROOT/src, 接著找$GOPATH/src找github.com這目錄，找到往內找gin-gonic目錄，再找gin package\n  \"github.com/gin-gonic/gin\"\n  // \n  . \"github.com/go-sql-driver/mysql\"\n)\n```\n\n#### Nested package\n在一個package內嵌套令一個package; 使用上只要指名路徑關係. \n![](https://i.imgur.com/o5fWzfp.png)\n![](https://i.imgur.com/JQPpOK5.png)\n\n```go\n// math/math/extend/min.go\npackage extend\n\nfunc init() {\n\tfmt.Println(\"extend ==> init()\")\n}\n\nfunc Min(a float64, b float64) float64 {\n\tif a >= b {\n\t\treturn a\n\t}\n\treturn b\n}\n```\n```go\n// math/math.go\npackage math\n\nimport (\n\t\"fmt\"\n\t\"hello/math/extend\"\n)\nfunc init() {\n\tfmt.Println(\"math ==> init()\")\n}\n\nfunc Average(xs []float64) float64 {\n\ttotal := float64(0)\n\tfor _, x := range xs {\n\t\ttotal += x\n\t}\n\treturn total / float64(len(xs))\n}\n\nfunc Min(a float64, b float64) float64 {\n\treturn extend.Min(a, b)\n}\n```\n```go\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t. \"hello/math\"\n)\n\nfunc init() {\n\tfmt.Println(\"main ==> init()\")\n}\n\nfunc main() {\n\tfmt.Println(\"hello\")\n\tfmt.Println(Average([]float64{1, 2}))\n\tfmt.Println(Min(1, 2))\n}\n```\n\n### Package Initialization\n![](https://i.imgur.com/e8y24gO.jpg)\n\n#### 工廠模式自動註冊-管理多個packge\n![](https://i.imgur.com/1Dn0qBn.png)\n\n```go\n// base/factory.go\npackage base\n\n// define interface for Class\ntype Class interface {\n\tDo()\n}\n\nvar (\n\t// 存放註冊好的 類別工廠資訊\n\tfactoryByName = make(map[string]func() Class)\n)\n\n// 註冊一個類別工廠\nfunc Register(name string, factory func() Class) {\n\tfactoryByName[name] = factory\n}\n\n// 根據name創建對應的類別\nfunc Create(name string) Class {\n\tif f, ok := factoryByName[name]; ok {\n\t\treturn f()\n\t}\n\tpanic(\"name not found\")\n}\n```\n\n```go\n// ex1/reg.go\npackage ex1\n\nimport (\n\t\"fmt\"\n\t\"github.com/tedmax100/factory/base\"\n)\ntype Class1 struct {\n}\n\nfunc (c *Class1) Do() {\n\tfmt.Println(\"class1\")\n}\n\nfunc init() {\n\tbase.Register(\"Class1\", func() base.Class {\n\t\treturn new(Class1)\n\t})\n}\n```\n\n```go\n// ex2/reg.go\npackage ex1\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tedmax100/factory/base\"\n)\n\ntype Class2 struct {\n}\n\nfunc (c *Class2) Do() {\n\tfmt.Println(\"class2\")\n}\n\nfunc init() {\n\tbase.Register(\"Class2\", func() base.Class {\n\t\treturn new(Class2)\n\t})\n}\n```\n\n```go\n// main.go\npackage main\n\nimport (\n\t\"github.com/tedmax100/factory/base\"\n\t_ \"github.com/tedmax100/factory/ex1\"\n\t_ \"github.com/tedmax100/factory/ex2\"\n)\n//因為上面使用匿名導入了ex1 & ex2 package.\n//main()執行前, 這兩個package的init()會被調用, 而註冊了class1 & class2\nfunc main() {\n\tc1 := base.Create(\"Class1\")\n\tc1.Do()\n\n\tc2 := base.Create(\"Class2\")\n\tc2.Do()\n}\n```","source":"_posts/Go-Package.md","raw":"---\ntitle: Go Package\ndate: 2019-07-14 15:31:31\ncategories: \"Go\"\ntags:\n    - Go\n---\n![](/images/Go/source-files-to-package.001.png)\n[Everything you need to know about packages in Go](https://medium.com/rungo/everything-you-need-to-know-about-packages-in-go-b8bac62b74cc)\n\n### Package(包)\n程式碼的目錄, 可以重複利用程式的方案, 方便維護。\nGo默認提供很多package, 像是fmt、is等。\n開發者也可以創建自己的package。\n\npackage要求所有檔案的第一行添加package名稱，標示該文件所歸屬的package。\n```go\npackage 包名稱\n```\n* 一個目錄下的同級檔案屬於同一個package\n* package名稱可以與目錄不同名稱, 但盡可能一樣\n* main package為應用程式執行的entry point; 若沒有main package則無法編譯成可執行的檔案在bin下\n* package name, Go團隊建議簡單扁平為原則。 所以盡量避免下划線、中划線和參雜大寫字母。\n\n#### Creating a package\n1. 可執行包(executable package)\n    可自己執行，表示有main package\n2. 工具包(utility package)\n    不可自己執行，但是可以給可執行包做擴展應用的作用\n    \n![](https://i.imgur.com/1gvLawQ.png)\n\n```go\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t. \"hello/math\"\n)\n\nfunc main() {\n\tfmt.Println(\"hello\")\n\tfmt.Println(Average([]float64{1, 2}))\n}\n```\n```go\n// math/math.go\npackage math\n\nfunc Average(xs []float64) float64 {\n\ttotal := float64(0)\n\tfor _, x := range xs {\n\t\ttotal += x\n\t}\n\treturn total / float64(len(xs))\n}\n```\n```bash\n# 編譯hello package \ncd $GOPATH/src/hello; \ngo install;\n# 因為有main package, 所以會安裝到$GOPATH/bin 作為可執行包\n```\n![](https://i.imgur.com/boE8wD0.png)\n\n```bash\n# 編譯hello package \ncd $GOPATH/src/hello/math; \ngo install;\n# 因為沒有main package, 所以會安裝到$GOPATH/pkg下 作為工具包\n```\n![](https://i.imgur.com/fhzkZRr.png)\n\n\n#### Import package\n使用import package，Go會先在 $GOROOT/src下尋找指定的package。\n若找不到就往$GOPATH/src目錄下尋找。\n找不到就會報出編譯錯誤。\n\n```go\npackage main\n\nimport (\n  // fmt位於$GOROOT/src下，找到!\n  \"fmt\"\n  // gin並不在$GOROOT/src, 接著找$GOPATH/src找github.com這目錄，找到往內找gin-gonic目錄，再找gin package\n  \"github.com/gin-gonic/gin\"\n  // \n  . \"github.com/go-sql-driver/mysql\"\n)\n```\n\n#### Nested package\n在一個package內嵌套令一個package; 使用上只要指名路徑關係. \n![](https://i.imgur.com/o5fWzfp.png)\n![](https://i.imgur.com/JQPpOK5.png)\n\n```go\n// math/math/extend/min.go\npackage extend\n\nfunc init() {\n\tfmt.Println(\"extend ==> init()\")\n}\n\nfunc Min(a float64, b float64) float64 {\n\tif a >= b {\n\t\treturn a\n\t}\n\treturn b\n}\n```\n```go\n// math/math.go\npackage math\n\nimport (\n\t\"fmt\"\n\t\"hello/math/extend\"\n)\nfunc init() {\n\tfmt.Println(\"math ==> init()\")\n}\n\nfunc Average(xs []float64) float64 {\n\ttotal := float64(0)\n\tfor _, x := range xs {\n\t\ttotal += x\n\t}\n\treturn total / float64(len(xs))\n}\n\nfunc Min(a float64, b float64) float64 {\n\treturn extend.Min(a, b)\n}\n```\n```go\n// main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t. \"hello/math\"\n)\n\nfunc init() {\n\tfmt.Println(\"main ==> init()\")\n}\n\nfunc main() {\n\tfmt.Println(\"hello\")\n\tfmt.Println(Average([]float64{1, 2}))\n\tfmt.Println(Min(1, 2))\n}\n```\n\n### Package Initialization\n![](https://i.imgur.com/e8y24gO.jpg)\n\n#### 工廠模式自動註冊-管理多個packge\n![](https://i.imgur.com/1Dn0qBn.png)\n\n```go\n// base/factory.go\npackage base\n\n// define interface for Class\ntype Class interface {\n\tDo()\n}\n\nvar (\n\t// 存放註冊好的 類別工廠資訊\n\tfactoryByName = make(map[string]func() Class)\n)\n\n// 註冊一個類別工廠\nfunc Register(name string, factory func() Class) {\n\tfactoryByName[name] = factory\n}\n\n// 根據name創建對應的類別\nfunc Create(name string) Class {\n\tif f, ok := factoryByName[name]; ok {\n\t\treturn f()\n\t}\n\tpanic(\"name not found\")\n}\n```\n\n```go\n// ex1/reg.go\npackage ex1\n\nimport (\n\t\"fmt\"\n\t\"github.com/tedmax100/factory/base\"\n)\ntype Class1 struct {\n}\n\nfunc (c *Class1) Do() {\n\tfmt.Println(\"class1\")\n}\n\nfunc init() {\n\tbase.Register(\"Class1\", func() base.Class {\n\t\treturn new(Class1)\n\t})\n}\n```\n\n```go\n// ex2/reg.go\npackage ex1\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/tedmax100/factory/base\"\n)\n\ntype Class2 struct {\n}\n\nfunc (c *Class2) Do() {\n\tfmt.Println(\"class2\")\n}\n\nfunc init() {\n\tbase.Register(\"Class2\", func() base.Class {\n\t\treturn new(Class2)\n\t})\n}\n```\n\n```go\n// main.go\npackage main\n\nimport (\n\t\"github.com/tedmax100/factory/base\"\n\t_ \"github.com/tedmax100/factory/ex1\"\n\t_ \"github.com/tedmax100/factory/ex2\"\n)\n//因為上面使用匿名導入了ex1 & ex2 package.\n//main()執行前, 這兩個package的init()會被調用, 而註冊了class1 & class2\nfunc main() {\n\tc1 := base.Create(\"Class1\")\n\tc1.Do()\n\n\tc2 := base.Create(\"Class2\")\n\tc2.Do()\n}\n```","slug":"Go-Package","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cm9000gck6x9xhdykg0","content":"<p><img src=\"/images/Go/source-files-to-package.001.png\" alt><br><a href=\"https://medium.com/rungo/everything-you-need-to-know-about-packages-in-go-b8bac62b74cc\" target=\"_blank\" rel=\"noopener\">Everything you need to know about packages in Go</a></p>\n<h3 id=\"Package-包\"><a href=\"#Package-包\" class=\"headerlink\" title=\"Package(包)\"></a>Package(包)</h3><p>程式碼的目錄, 可以重複利用程式的方案, 方便維護。<br>Go默認提供很多package, 像是fmt、is等。<br>開發者也可以創建自己的package。</p>\n<p>package要求所有檔案的第一行添加package名稱，標示該文件所歸屬的package。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 包名稱</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一個目錄下的同級檔案屬於同一個package</li>\n<li>package名稱可以與目錄不同名稱, 但盡可能一樣</li>\n<li>main package為應用程式執行的entry point; 若沒有main package則無法編譯成可執行的檔案在bin下</li>\n<li>package name, Go團隊建議簡單扁平為原則。 所以盡量避免下划線、中划線和參雜大寫字母。</li>\n</ul>\n<h4 id=\"Creating-a-package\"><a href=\"#Creating-a-package\" class=\"headerlink\" title=\"Creating a package\"></a>Creating a package</h4><ol>\n<li>可執行包(executable package)<br> 可自己執行，表示有main package</li>\n<li>工具包(utility package)<br> 不可自己執行，但是可以給可執行包做擴展應用的作用</li>\n</ol>\n<p><img src=\"https://i.imgur.com/1gvLawQ.png\" alt></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t. <span class=\"string\">\"hello/math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">\tfmt.Println(Average([]<span class=\"keyword\">float64</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math/math.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Average</span><span class=\"params\">(xs []<span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\ttotal := <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, x := <span class=\"keyword\">range</span> xs &#123;</span><br><span class=\"line\">\t\ttotal += x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(xs))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯hello package </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello; </span><br><span class=\"line\">go install;</span><br><span class=\"line\"><span class=\"comment\"># 因為有main package, 所以會安裝到$GOPATH/bin 作為可執行包</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/boE8wD0.png\" alt></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯hello package </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello/math; </span><br><span class=\"line\">go install;</span><br><span class=\"line\"><span class=\"comment\"># 因為沒有main package, 所以會安裝到$GOPATH/pkg下 作為工具包</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/fhzkZRr.png\" alt></p>\n<h4 id=\"Import-package\"><a href=\"#Import-package\" class=\"headerlink\" title=\"Import package\"></a>Import package</h4><p>使用import package，Go會先在 $GOROOT/src下尋找指定的package。<br>若找不到就往$GOPATH/src目錄下尋找。<br>找不到就會報出編譯錯誤。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"comment\">// fmt位於$GOROOT/src下，找到!</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"comment\">// gin並不在$GOROOT/src, 接著找$GOPATH/src找github.com這目錄，找到往內找gin-gonic目錄，再找gin package</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  . <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Nested-package\"><a href=\"#Nested-package\" class=\"headerlink\" title=\"Nested package\"></a>Nested package</h4><p>在一個package內嵌套令一個package; 使用上只要指名路徑關係.<br><img src=\"https://i.imgur.com/o5fWzfp.png\" alt><br><img src=\"https://i.imgur.com/JQPpOK5.png\" alt></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math/math/extend/min.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> extend</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"extend ==&gt; init()\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Min</span><span class=\"params\">(a <span class=\"keyword\">float64</span>, b <span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt;= b &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math/math.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"hello/math/extend\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"math ==&gt; init()\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Average</span><span class=\"params\">(xs []<span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\ttotal := <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, x := <span class=\"keyword\">range</span> xs &#123;</span><br><span class=\"line\">\t\ttotal += x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(xs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Min</span><span class=\"params\">(a <span class=\"keyword\">float64</span>, b <span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> extend.Min(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t. <span class=\"string\">\"hello/math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"main ==&gt; init()\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">\tfmt.Println(Average([]<span class=\"keyword\">float64</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;))</span><br><span class=\"line\">\tfmt.Println(Min(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Package-Initialization\"><a href=\"#Package-Initialization\" class=\"headerlink\" title=\"Package Initialization\"></a>Package Initialization</h3><p><img src=\"https://i.imgur.com/e8y24gO.jpg\" alt></p>\n<h4 id=\"工廠模式自動註冊-管理多個packge\"><a href=\"#工廠模式自動註冊-管理多個packge\" class=\"headerlink\" title=\"工廠模式自動註冊-管理多個packge\"></a>工廠模式自動註冊-管理多個packge</h4><p><img src=\"https://i.imgur.com/1Dn0qBn.png\" alt></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base/factory.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> base</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// define interface for Class</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Class <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// 存放註冊好的 類別工廠資訊</span></span><br><span class=\"line\">\tfactoryByName = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">Class</span>)</span></span><br><span class=\"line\"><span class=\"function\">)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 註冊一個類別工廠</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Register</span><span class=\"params\">(name <span class=\"keyword\">string</span>, factory <span class=\"keyword\">func</span>()</span> <span class=\"title\">Class</span>)</span> &#123;</span><br><span class=\"line\">\tfactoryByName[name] = factory</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根據name創建對應的類別</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Create</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">Class</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f, ok := factoryByName[name]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"name not found\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ex1/reg.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> ex1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/tedmax100/factory/base\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> Class1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Class1)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"class1\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbase.Register(<span class=\"string\">\"Class1\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">base</span>.<span class=\"title\">Class</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">new</span>(Class1)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ex2/reg.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> ex1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/tedmax100/factory/base\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Class2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Class2)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"class2\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbase.Register(<span class=\"string\">\"Class2\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">base</span>.<span class=\"title\">Class</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">new</span>(Class2)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/tedmax100/factory/base\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/tedmax100/factory/ex1\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/tedmax100/factory/ex2\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//因為上面使用匿名導入了ex1 &amp; ex2 package.</span></span><br><span class=\"line\"><span class=\"comment\">//main()執行前, 這兩個package的init()會被調用, 而註冊了class1 &amp; class2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc1 := base.Create(<span class=\"string\">\"Class1\"</span>)</span><br><span class=\"line\">\tc1.Do()</span><br><span class=\"line\"></span><br><span class=\"line\">\tc2 := base.Create(<span class=\"string\">\"Class2\"</span>)</span><br><span class=\"line\">\tc2.Do()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Go/source-files-to-package.001.png\" alt><br><a href=\"https://medium.com/rungo/everything-you-need-to-know-about-packages-in-go-b8bac62b74cc\" target=\"_blank\" rel=\"noopener\">Everything you need to know about packages in Go</a></p>\n<h3 id=\"Package-包\"><a href=\"#Package-包\" class=\"headerlink\" title=\"Package(包)\"></a>Package(包)</h3><p>程式碼的目錄, 可以重複利用程式的方案, 方便維護。<br>Go默認提供很多package, 像是fmt、is等。<br>開發者也可以創建自己的package。</p>\n<p>package要求所有檔案的第一行添加package名稱，標示該文件所歸屬的package。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> 包名稱</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一個目錄下的同級檔案屬於同一個package</li>\n<li>package名稱可以與目錄不同名稱, 但盡可能一樣</li>\n<li>main package為應用程式執行的entry point; 若沒有main package則無法編譯成可執行的檔案在bin下</li>\n<li>package name, Go團隊建議簡單扁平為原則。 所以盡量避免下划線、中划線和參雜大寫字母。</li>\n</ul>\n<h4 id=\"Creating-a-package\"><a href=\"#Creating-a-package\" class=\"headerlink\" title=\"Creating a package\"></a>Creating a package</h4><ol>\n<li>可執行包(executable package)<br> 可自己執行，表示有main package</li>\n<li>工具包(utility package)<br> 不可自己執行，但是可以給可執行包做擴展應用的作用</li>\n</ol>\n<p><img src=\"https://i.imgur.com/1gvLawQ.png\" alt></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t. <span class=\"string\">\"hello/math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">\tfmt.Println(Average([]<span class=\"keyword\">float64</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math/math.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Average</span><span class=\"params\">(xs []<span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\ttotal := <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, x := <span class=\"keyword\">range</span> xs &#123;</span><br><span class=\"line\">\t\ttotal += x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(xs))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯hello package </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello; </span><br><span class=\"line\">go install;</span><br><span class=\"line\"><span class=\"comment\"># 因為有main package, 所以會安裝到$GOPATH/bin 作為可執行包</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/boE8wD0.png\" alt></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯hello package </span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello/math; </span><br><span class=\"line\">go install;</span><br><span class=\"line\"><span class=\"comment\"># 因為沒有main package, 所以會安裝到$GOPATH/pkg下 作為工具包</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/fhzkZRr.png\" alt></p>\n<h4 id=\"Import-package\"><a href=\"#Import-package\" class=\"headerlink\" title=\"Import package\"></a>Import package</h4><p>使用import package，Go會先在 $GOROOT/src下尋找指定的package。<br>若找不到就往$GOPATH/src目錄下尋找。<br>找不到就會報出編譯錯誤。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"comment\">// fmt位於$GOROOT/src下，找到!</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"comment\">// gin並不在$GOROOT/src, 接著找$GOPATH/src找github.com這目錄，找到往內找gin-gonic目錄，再找gin package</span></span><br><span class=\"line\">  <span class=\"string\">\"github.com/gin-gonic/gin\"</span></span><br><span class=\"line\">  <span class=\"comment\">// </span></span><br><span class=\"line\">  . <span class=\"string\">\"github.com/go-sql-driver/mysql\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Nested-package\"><a href=\"#Nested-package\" class=\"headerlink\" title=\"Nested package\"></a>Nested package</h4><p>在一個package內嵌套令一個package; 使用上只要指名路徑關係.<br><img src=\"https://i.imgur.com/o5fWzfp.png\" alt><br><img src=\"https://i.imgur.com/JQPpOK5.png\" alt></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math/math/extend/min.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> extend</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"extend ==&gt; init()\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Min</span><span class=\"params\">(a <span class=\"keyword\">float64</span>, b <span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt;= b &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math/math.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"hello/math/extend\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"math ==&gt; init()\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Average</span><span class=\"params\">(xs []<span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\ttotal := <span class=\"keyword\">float64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, x := <span class=\"keyword\">range</span> xs &#123;</span><br><span class=\"line\">\t\ttotal += x</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total / <span class=\"keyword\">float64</span>(<span class=\"built_in\">len</span>(xs))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Min</span><span class=\"params\">(a <span class=\"keyword\">float64</span>, b <span class=\"keyword\">float64</span>)</span> <span class=\"title\">float64</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> extend.Min(a, b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t. <span class=\"string\">\"hello/math\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"main ==&gt; init()\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">\tfmt.Println(Average([]<span class=\"keyword\">float64</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;))</span><br><span class=\"line\">\tfmt.Println(Min(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Package-Initialization\"><a href=\"#Package-Initialization\" class=\"headerlink\" title=\"Package Initialization\"></a>Package Initialization</h3><p><img src=\"https://i.imgur.com/e8y24gO.jpg\" alt></p>\n<h4 id=\"工廠模式自動註冊-管理多個packge\"><a href=\"#工廠模式自動註冊-管理多個packge\" class=\"headerlink\" title=\"工廠模式自動註冊-管理多個packge\"></a>工廠模式自動註冊-管理多個packge</h4><p><img src=\"https://i.imgur.com/1Dn0qBn.png\" alt></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base/factory.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> base</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// define interface for Class</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Class <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tDo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// 存放註冊好的 類別工廠資訊</span></span><br><span class=\"line\">\tfactoryByName = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">Class</span>)</span></span><br><span class=\"line\"><span class=\"function\">)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 註冊一個類別工廠</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">func</span> <span class=\"title\">Register</span><span class=\"params\">(name <span class=\"keyword\">string</span>, factory <span class=\"keyword\">func</span>()</span> <span class=\"title\">Class</span>)</span> &#123;</span><br><span class=\"line\">\tfactoryByName[name] = factory</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根據name創建對應的類別</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Create</span><span class=\"params\">(name <span class=\"keyword\">string</span>)</span> <span class=\"title\">Class</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f, ok := factoryByName[name]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> f()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"string\">\"name not found\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ex1/reg.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> ex1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/tedmax100/factory/base\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> Class1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Class1)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"class1\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbase.Register(<span class=\"string\">\"Class1\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">base</span>.<span class=\"title\">Class</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">new</span>(Class1)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ex2/reg.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> ex1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/tedmax100/factory/base\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Class2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Class2)</span> <span class=\"title\">Do</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"class2\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbase.Register(<span class=\"string\">\"Class2\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">base</span>.<span class=\"title\">Class</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">new</span>(Class2)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/tedmax100/factory/base\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/tedmax100/factory/ex1\"</span></span><br><span class=\"line\">\t_ <span class=\"string\">\"github.com/tedmax100/factory/ex2\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//因為上面使用匿名導入了ex1 &amp; ex2 package.</span></span><br><span class=\"line\"><span class=\"comment\">//main()執行前, 這兩個package的init()會被調用, 而註冊了class1 &amp; class2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc1 := base.Create(<span class=\"string\">\"Class1\"</span>)</span><br><span class=\"line\">\tc1.Do()</span><br><span class=\"line\"></span><br><span class=\"line\">\tc2 := base.Create(<span class=\"string\">\"Class2\"</span>)</span><br><span class=\"line\">\tc2.Do()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Go環境安裝","date":"2019-07-14T07:30:26.000Z","_content":"![](https://golang.org/lib/godoc/images/go-logo-blue.svg)  \n[Download page](https://golang.org/dl/)\n[Install doc](https://golang.org/doc/install)\n\n### Install the GO on Linux\n```bash=\n# Download file\nwget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go1.12.7.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n\n# Check installation\ngo env\n```\n![goenv](https://i.imgur.com/j62hYTR.png)\n\n### Upgrade Go\n```bash\n# Download file\nwget https://dl.google.com/go/go$VERSION.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go$VERSION.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n#### Upgrade by shell script\n[update-golang](https://github.com/udhos/update-golang)\n\n\n### Workspaces\n[Workspaces](https://golang.org/doc/code.html#Workspaces)\n[Setting GoPath](https://github.com/golang/go/wiki/SettingGOPATH)\n在GoPath所顯示的目錄下創建以下資料夾\n* src : go source file\n* pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件\n* bin : 編譯後可執行檔案\n```bash\nmkdir -p $GOPATH/src $GOPATH/pkg $GOPATH/bin\n```\n\n#### First Go Program\n```bash\nmkdir -p $GOPATH/src/hello\ncd $GOPATH/src/hello\ncode .\n```\n以VsCode開啟該目錄\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello\")\n}\n```\n\n```bash\n# 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下\ngo install hello\n# 執行\n$GOPATH/bin/hello\n> hello\n```","source":"_posts/Go環境安裝.md","raw":"---\ntitle: Go環境安裝\ndate: 2019-07-14 15:30:26\ncategories: \"Go\"\ntags:\n    - Go\n---\n![](https://golang.org/lib/godoc/images/go-logo-blue.svg)  \n[Download page](https://golang.org/dl/)\n[Install doc](https://golang.org/doc/install)\n\n### Install the GO on Linux\n```bash=\n# Download file\nwget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go1.12.7.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n\n# Check installation\ngo env\n```\n![goenv](https://i.imgur.com/j62hYTR.png)\n\n### Upgrade Go\n```bash\n# Download file\nwget https://dl.google.com/go/go$VERSION.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go$VERSION.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n#### Upgrade by shell script\n[update-golang](https://github.com/udhos/update-golang)\n\n\n### Workspaces\n[Workspaces](https://golang.org/doc/code.html#Workspaces)\n[Setting GoPath](https://github.com/golang/go/wiki/SettingGOPATH)\n在GoPath所顯示的目錄下創建以下資料夾\n* src : go source file\n* pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件\n* bin : 編譯後可執行檔案\n```bash\nmkdir -p $GOPATH/src $GOPATH/pkg $GOPATH/bin\n```\n\n#### First Go Program\n```bash\nmkdir -p $GOPATH/src/hello\ncd $GOPATH/src/hello\ncode .\n```\n以VsCode開啟該目錄\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello\")\n}\n```\n\n```bash\n# 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下\ngo install hello\n# 執行\n$GOPATH/bin/hello\n> hello\n```","slug":"Go環境安裝","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cma000kck6x2jgv85jv","content":"<p><img src=\"https://golang.org/lib/godoc/images/go-logo-blue.svg\" alt><br><a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">Download page</a><br><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">Install doc</a></p>\n<h3 id=\"Install-the-GO-on-Linux\"><a href=\"#Install-the-GO-on-Linux\" class=\"headerlink\" title=\"Install the GO on Linux\"></a>Install the GO on Linux</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check installation</span></span><br><span class=\"line\">go env</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/j62hYTR.png\" alt=\"goenv\"></p>\n<h3 id=\"Upgrade-Go\"><a href=\"#Upgrade-Go\" class=\"headerlink\" title=\"Upgrade Go\"></a>Upgrade Go</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Upgrade-by-shell-script\"><a href=\"#Upgrade-by-shell-script\" class=\"headerlink\" title=\"Upgrade by shell script\"></a>Upgrade by shell script</h4><p><a href=\"https://github.com/udhos/update-golang\" target=\"_blank\" rel=\"noopener\">update-golang</a></p>\n<h3 id=\"Workspaces\"><a href=\"#Workspaces\" class=\"headerlink\" title=\"Workspaces\"></a>Workspaces</h3><p><a href=\"https://golang.org/doc/code.html#Workspaces\" target=\"_blank\" rel=\"noopener\">Workspaces</a><br><a href=\"https://github.com/golang/go/wiki/SettingGOPATH\" target=\"_blank\" rel=\"noopener\">Setting GoPath</a><br>在GoPath所顯示的目錄下創建以下資料夾</p>\n<ul>\n<li>src : go source file</li>\n<li>pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件</li>\n<li>bin : 編譯後可執行檔案<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src <span class=\"variable\">$GOPATH</span>/pkg <span class=\"variable\">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"First-Go-Program\"><a href=\"#First-Go-Program\" class=\"headerlink\" title=\"First Go Program\"></a>First Go Program</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\">code .</span><br></pre></td></tr></table></figure>\n\n<p>以VsCode開啟該目錄</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下</span></span><br><span class=\"line\">go install hello</span><br><span class=\"line\"><span class=\"comment\"># 執行</span></span><br><span class=\"line\"><span class=\"variable\">$GOPATH</span>/bin/hello</span><br><span class=\"line\">&gt; hello</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://golang.org/lib/godoc/images/go-logo-blue.svg\" alt><br><a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">Download page</a><br><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">Install doc</a></p>\n<h3 id=\"Install-the-GO-on-Linux\"><a href=\"#Install-the-GO-on-Linux\" class=\"headerlink\" title=\"Install the GO on Linux\"></a>Install the GO on Linux</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check installation</span></span><br><span class=\"line\">go env</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/j62hYTR.png\" alt=\"goenv\"></p>\n<h3 id=\"Upgrade-Go\"><a href=\"#Upgrade-Go\" class=\"headerlink\" title=\"Upgrade Go\"></a>Upgrade Go</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Upgrade-by-shell-script\"><a href=\"#Upgrade-by-shell-script\" class=\"headerlink\" title=\"Upgrade by shell script\"></a>Upgrade by shell script</h4><p><a href=\"https://github.com/udhos/update-golang\" target=\"_blank\" rel=\"noopener\">update-golang</a></p>\n<h3 id=\"Workspaces\"><a href=\"#Workspaces\" class=\"headerlink\" title=\"Workspaces\"></a>Workspaces</h3><p><a href=\"https://golang.org/doc/code.html#Workspaces\" target=\"_blank\" rel=\"noopener\">Workspaces</a><br><a href=\"https://github.com/golang/go/wiki/SettingGOPATH\" target=\"_blank\" rel=\"noopener\">Setting GoPath</a><br>在GoPath所顯示的目錄下創建以下資料夾</p>\n<ul>\n<li>src : go source file</li>\n<li>pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件</li>\n<li>bin : 編譯後可執行檔案<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src <span class=\"variable\">$GOPATH</span>/pkg <span class=\"variable\">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"First-Go-Program\"><a href=\"#First-Go-Program\" class=\"headerlink\" title=\"First Go Program\"></a>First Go Program</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\">code .</span><br></pre></td></tr></table></figure>\n\n<p>以VsCode開啟該目錄</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下</span></span><br><span class=\"line\">go install hello</span><br><span class=\"line\"><span class=\"comment\"># 執行</span></span><br><span class=\"line\"><span class=\"variable\">$GOPATH</span>/bin/hello</span><br><span class=\"line\">&gt; hello</span><br></pre></td></tr></table></figure>"},{"title":"Introduce to RabbitMQ","date":"2017-12-13T04:29:48.000Z","_content":"![](/images/MQ/RabbitMQRouting.png)\n[RabbitMQ Tutorials\n](https://www.rabbitmq.com/getstarted.html)\n<!--more-->\n### What is RabbitMQ?\nRabbitMQ是實現AMQP的一種微服務，用於分散是系統之中來儲存轉發訊息，便於使用，方便擴展，又有高可用性。\n目的能替系統之間做雙向解耦。當生產者產出大量資料要送出時，消費者若無法快速消費掉，這時候就需要一個中介層，來保存這些數據。\n\nAMQP的工作流程如下圖 : message被publisher 發送給exchange，exchange常常被比喻為郵局或是郵箱。然後exchange根據收到的message以及規則分發給綁定的queue。最後AMQP代理會將message投遞給訂閱此queue的consumer，或是消費者依照需求自行獲取。\n![](/images/MQ/exchanges-topic-fanout-direct.png)\n\n因為網路是不可靠的，接收消息的服務也有可能在處理時失敗，所以AMQP包含的一了message acknowledgement的概念:當一個message從queue當中投遞給consumer後，consumer會通知broker，這個message可以從queue當中刪除。\n\n某些情況下，當message無法被成功投遞時，message或許會被返回給producer並且被丟棄。或者代理執行了延期操作，message會被放入Dead-Letter exchange中。此時producer可選選擇某些參數來處理這些特殊情況。\n\n一個Log系統，能用MQ來簡化工作，一個consumer進行訊息的正常處理，另一個consumer對訊息做log紀錄，只要在系統中，起兩個consumer並把queue以相同的方式binding到同一個exchange即可。 剩下的訊息分派工作全由MQ負責完成。\n\n### Concept and Feature\n* Broker\n就是MQ service本身\n\n* Producer\n![](/images/MQ/producer.webp)\n發送message的程序\n\n* Consumer\n![](/images/MQ/consumer.png)\n一個等待從queue當中獲取message的程序\n\n* Virtual Host\n一個broker內可以設置多個Vhost，做為不同用戶的權限分離，或是不同的業務規劃。\nVhost之間相互隔離，不同Vhost之間無法共享exchange/queue。\n\n* Exchange\n![](/images/MQ/exchanges.webp)\n交換機，指定消息按照什麼規則，路由到哪個queue。\n有direct、topic、headers、fanout 四種type能設置,\n不同type的exchange路由行為是不同的。\n\n* Queue\n![](/images/MQ/queue.webp)\n每個message都會被投遞到一個或是多個queue當中，等待被投遞。\n類似於郵筒的概念，message都會被存放在此。\nqueue本身是一個很大的message buffer，可以有很多個producer發送，\n但都會傳到同一個queue且可以有多個consumer獲取資料。\n\n* Channel\n在客戶端的每個connection中，可以建立多個channel,每個channel表示一個session， 客戶端只能透過channel才能執行AMQP的命令。\n之所以需要channel因為TCP連線的建立跟釋放都是十分昂貴的，如果一個客戶端的每個線程都需要與broker交換訊息，每一個線程都建立一個TCP connection的話，OS也無法承受每秒建立如此多的TCP connection。所以RabbitMQ建議同一個發送串行資料的線程共用Channel和connection。\n* Binding\n把exchange和queue按照路由規則綁釘起來。\nExchange在跟多個queue binding後會生成一張routing table，\n* Routing Key\n路由的關鍵字，exchange根據這關鍵字，來進行訊息投遞\n* AMQP entities\nQueue + Exchange + Binding = AMQP entities\n\n### Task Queues\nTask queues工作隊列，是為了避免等待一些占用大量資源、費時的操作。只要把task當作訊息丟進queue中，就會有運行的worker取出任務然後處理，當運行多個workers時，任務就會在彼此之間分配。\n\n#### Message Acknowledgment\n通常沒特別設置ack在queue的時候，只要message一投遞出去，立刻就為從queue之中移除。\n此時如果worker運行到一半掛掉，正在處理的message就會遺失了。\n如果不想遺失任何message，當前worker掛掉時，我們希望任務會重新指派給其他worker。\n\n因此，RabbitMQ提供了acknowledements。\nworker會通過一個ack訊號，告訴RabbitMQ已經收到了並且處理完該條訊息，然後MQ就會刪除該訊息。\n\n如果worker掛了，沒有發送ack，則MQ就會認為message沒有被完全處理，就會重新發送給其他worker，這樣就不會遺失任何message。\n\n但由於message沒有timeout的概念，只能等worker跟MQ斷開連線，這樣MQ就會重送了。\nmessage acknowledement預設是**關閉**的，只要把auto_ack = true即可。\n\n```csharp\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Receved += (model, ea) =>{\n    var body = ea.body;\n    var message = Encoding.UTF8.GetString(body);\n    Console.WriteLine($\"{received {message}}\");\n    int dots = message.Split('.').Length - 1;\n    Thread.Sleep(dots * 1000);\n    Console.WriteLine(\"Done\");\n    channel.BasicAck(deliveryTag : ea.DeliveryTag, multiple:false);\n};\nchannel.BasicAck(queue:\"task_queue\", autoAck:True, consumer :consumer);\n\n```\n\n**Increase throuput and performance**  \n關閉ack能提升MQ的效能\n\n**Message Durability**\nMessage Durability訊息持久化，\nMQ預設並不會對queue和message做持久化的設置，因此必須先把queue和message設置為durable。\n\n首先先聲明queue為durable，這樣確保MQ重啟後，queue不會被遺失。\nMQ也不允許使用不同參數定義一個同名的queue。因此producer和consumer的設置必須一樣。\n\n```csharp\nchannel.QueueDeclare(queue:\"task_queue\",\n                     durable :true,\n                     exclusive:false,\n                     autoDelete:false,\n                     arguments:null);\n```\n接著設置message persistence\n```csharp\nvar properties = channel.CreateBasicProperties();\nproperties.Persistent = true;\n```\n*Note on message persistence*  \n把message 設置為persistence，並不能完全保證不會丟失。因為只是告訴MQ要把message存入硬碟，MQ也不是所有message都寫入硬碟，可能只是放在記憶體暫存。\n\n**Fair Dispatch**\nMQ只管把第n-th消息投遞給第n-th個worker，並不關心worker有沒有ack。\n可以設置prefetch_count=1，告訴MQ，同一時間，別送超過1條訊息給同一位worker，直到他已經處理完上一條message並送出ack。這樣MQ就會把消息分發給下一位worker。\n```csharp\nchannel.basicqos(0, 1, false);\n```\n\n### Publish/Subscribe\npub/sub目的是要把一個message分發給多個consumer。\n這個模型的核心概念是，producer並不會直接發送訊息給queue，而是把消息發送給exchange。\n\nexchange在這裡就是負責從producer接收消息，一邊把消息推送到queue。\nexchange必須知道如何處理它接受到的消息，是要推送到指定的queue還是多個queue，或是忽略，這些規則是透過exchange type來定義。\n![](/images/MQ/exchanges.webp)\n\n**Exchange Type**\n* direct 直連\n* fanout 廣播\n* topic 主題\n* headers 表頭\n```csharp\t\nchannel.ExchangeDeclare(\"logs\", \"fanout\");\n```\n\n*Note for default exchange*\nMQ預設就存在一組default exchagne，名稱是空字串””\n\n**Temporary queues**\n在task queue的情境下，給個worker同樣的queue name，這時候會透過round robin做輪詢派送。\n但是現在要的是每個人都能收到同樣的訊息，因此需要的是一個全新、空的queue，來跟exchagne綁定。\n能透過自己定義隨機的queue name或是，讓MQ來幫我們選擇一個隨機的queue name。\n\n```csharp\nvar queueName = channel.QueueDeclare().QueueName;\n```\n這時拿到的queue name就會類似amq.gen-JzTY20BRgKO-HjmUJj0wLg。\n\n**Bindings**\n![](/images/MQ/bindings.webp)\n有了fanout exchange和數個queue，這時就要設置exchange和queue之間的關聯。\n\n```csharp\nchannel.QueueBind(queue:queueName,\n                 exchagne:\"logs\",\n                 routingKey:\"\");\n\n```\n![](/images/MQ/python-three-overall.png)\n\n*Note for routing key*\nfanout type下，routing key是會被忽略的。\n\n### Routing\nRouting key的設置，能使得queue只訂閱消息的子集合。\n綁定的時候可以設置routingKey又或是稱為bindingKey，為了避免跟BasicPublish的routingKey搞混。\n\n```csharp\nchannel.QueueBind(queue:queueName, \n                  exchange:\"direct_logs\",\n                  routingKey:\"black\");\n```\n使用exchange和routing key來進行精確配對，從而確保消息該投遞到哪個queue。\n\n![](/images/MQ/direct-exchange.png)\n這裡第一個queue用orange作為綁定鍵，另一個queue用black和green。\n這樣所有orange的消息都會被路由到C1, 而black/green則會被路由到C2，其他message通通被丟棄。\n\n**Multiple Bindings**\n多個queue使用同樣的routingKey也是可行的。\n\n![](/images/MQ/direct-exchange-multiple.webp)\n\nC1和C2都使用black做綁定。這樣跟fanout type的行為雷同，只要是black的訊息，C1跟C2都會收到，但其他一樣被丟棄。\n\n**Scene : Log System**\n將log依據不同級別作為rougingKey來選擇接收者跟處理方式。\n[](/images/MQ/python-four.webp)\n建立exchange\n```csharp\nchannel.ExchangeDeclare(exchange: \"direct_logs\", type: \"direct\");\n```\n發送log訊息, serverity是info、warning、error其中一個\n```csharp\nvar body = Encoding.UTF8.GetBytes(message);\nchannel.BasicPublish(exchange: \"direct_logs\",\n                     routingKey: severity,\n                     basicProperties: null,\n                     body: body);\n```\n\nsubscribing\n```csharp\nvar queueName = channel.QueueDeclare().QueueName;\nforeach(var severity in args)\n{\n    channel.QueueBind(queue: queueName,\n                      exchange: \"direct_logs\",\n                      routingKey: severity);\n}\n```\n\n### Topics\nDirect exchange有些限制，沒辦法基於多個標準來執行路由操作。\n有時會希望不只是訂閱基於嚴重程度的日誌，也希望訂閱其他種日誌。\n這時就需要topic exchange。\n\n發送到topic exchange的訊息不可以設置routingKey，它的routingKey是一個由.分隔開的單字列表。這些單字是什麼都能，跟message有關係的詞彙是最好的。\n例如:”stock.usd.nyse”, “quick.orange.rabbit”，單字個數可以任意個，但不能超過255 bytes。\nroutingKey中也能使用類似regular expression表達個數:\n\n* * 表示一個單字\n* # 表示任意數量的單字\n[](/images/MQ/python-five.webp)\n一個攜帶有quick.orange.rabbit的消息會被投遞到C1跟C2。\n攜帶著lazy.orange.elephant的也是。\nquick.orange,fox只會投遞給C2。\nlazy.pink.rabbit只會給C2投遞1次。\nquick.brown.fox的將會被丟棄。\norange和quick.orange.male.rabbit的都會被丟棄掉。\nlazy.orange.male.rabbit將會被投遞到C2。\n\n`topic exchange是很powerful的，它可以表現出其他exchnge type的行為。\n當一個queue的routingKey是#時，這個queue將會無視message的routingKey，接收全部message。\n當*和#都未出現在routingKey時，這時候就跟direct type是一樣的行為。`\n\n**Questions**\n* bindingKey為*的queue會取到一個routingKey為空字串的消息嗎?\n* bindingKey為#.的queue會收到一個routingKey為*..的消息嗎? 它會收到routingKey為一個單字的消息嗎?\n* a.*.#和a.#的區別?\n\n### RPC\n遠端過程調用Remote Procedure Call(RPC)\n如果需要將一個函式運行在遠端服務上並且等待結果時，這時就需要RPC。\n\n透過RabbitMQ來建造一個RPC System，一個client和一個RPC Server。\n[](/images/MQ/python-six.webp)\n\n**client interface**\n```csharp\nvar rpcClient = new RPCClient();\nConsole.WriteLine(\"Request fib()\");\nvar response = rpcClient.Call(\"30\");\nConsole.WriteLine($\"Got {0}\", response);\n```\n\n### RabbitMQ Cluster and High Available\nRabbitMQ Cluser設置要求\n所有機器上的Erlang和RabbitMQ版本需要都相同，機器上Erlang的Cookie也相同\n","source":"_posts/Introduce-to-RabbitMQ.md","raw":"---\ntitle: Introduce to RabbitMQ\ndate: 2017-12-13 12:29:48\ntags:\n    - MQ\n    - RabbitMQ\n---\n![](/images/MQ/RabbitMQRouting.png)\n[RabbitMQ Tutorials\n](https://www.rabbitmq.com/getstarted.html)\n<!--more-->\n### What is RabbitMQ?\nRabbitMQ是實現AMQP的一種微服務，用於分散是系統之中來儲存轉發訊息，便於使用，方便擴展，又有高可用性。\n目的能替系統之間做雙向解耦。當生產者產出大量資料要送出時，消費者若無法快速消費掉，這時候就需要一個中介層，來保存這些數據。\n\nAMQP的工作流程如下圖 : message被publisher 發送給exchange，exchange常常被比喻為郵局或是郵箱。然後exchange根據收到的message以及規則分發給綁定的queue。最後AMQP代理會將message投遞給訂閱此queue的consumer，或是消費者依照需求自行獲取。\n![](/images/MQ/exchanges-topic-fanout-direct.png)\n\n因為網路是不可靠的，接收消息的服務也有可能在處理時失敗，所以AMQP包含的一了message acknowledgement的概念:當一個message從queue當中投遞給consumer後，consumer會通知broker，這個message可以從queue當中刪除。\n\n某些情況下，當message無法被成功投遞時，message或許會被返回給producer並且被丟棄。或者代理執行了延期操作，message會被放入Dead-Letter exchange中。此時producer可選選擇某些參數來處理這些特殊情況。\n\n一個Log系統，能用MQ來簡化工作，一個consumer進行訊息的正常處理，另一個consumer對訊息做log紀錄，只要在系統中，起兩個consumer並把queue以相同的方式binding到同一個exchange即可。 剩下的訊息分派工作全由MQ負責完成。\n\n### Concept and Feature\n* Broker\n就是MQ service本身\n\n* Producer\n![](/images/MQ/producer.webp)\n發送message的程序\n\n* Consumer\n![](/images/MQ/consumer.png)\n一個等待從queue當中獲取message的程序\n\n* Virtual Host\n一個broker內可以設置多個Vhost，做為不同用戶的權限分離，或是不同的業務規劃。\nVhost之間相互隔離，不同Vhost之間無法共享exchange/queue。\n\n* Exchange\n![](/images/MQ/exchanges.webp)\n交換機，指定消息按照什麼規則，路由到哪個queue。\n有direct、topic、headers、fanout 四種type能設置,\n不同type的exchange路由行為是不同的。\n\n* Queue\n![](/images/MQ/queue.webp)\n每個message都會被投遞到一個或是多個queue當中，等待被投遞。\n類似於郵筒的概念，message都會被存放在此。\nqueue本身是一個很大的message buffer，可以有很多個producer發送，\n但都會傳到同一個queue且可以有多個consumer獲取資料。\n\n* Channel\n在客戶端的每個connection中，可以建立多個channel,每個channel表示一個session， 客戶端只能透過channel才能執行AMQP的命令。\n之所以需要channel因為TCP連線的建立跟釋放都是十分昂貴的，如果一個客戶端的每個線程都需要與broker交換訊息，每一個線程都建立一個TCP connection的話，OS也無法承受每秒建立如此多的TCP connection。所以RabbitMQ建議同一個發送串行資料的線程共用Channel和connection。\n* Binding\n把exchange和queue按照路由規則綁釘起來。\nExchange在跟多個queue binding後會生成一張routing table，\n* Routing Key\n路由的關鍵字，exchange根據這關鍵字，來進行訊息投遞\n* AMQP entities\nQueue + Exchange + Binding = AMQP entities\n\n### Task Queues\nTask queues工作隊列，是為了避免等待一些占用大量資源、費時的操作。只要把task當作訊息丟進queue中，就會有運行的worker取出任務然後處理，當運行多個workers時，任務就會在彼此之間分配。\n\n#### Message Acknowledgment\n通常沒特別設置ack在queue的時候，只要message一投遞出去，立刻就為從queue之中移除。\n此時如果worker運行到一半掛掉，正在處理的message就會遺失了。\n如果不想遺失任何message，當前worker掛掉時，我們希望任務會重新指派給其他worker。\n\n因此，RabbitMQ提供了acknowledements。\nworker會通過一個ack訊號，告訴RabbitMQ已經收到了並且處理完該條訊息，然後MQ就會刪除該訊息。\n\n如果worker掛了，沒有發送ack，則MQ就會認為message沒有被完全處理，就會重新發送給其他worker，這樣就不會遺失任何message。\n\n但由於message沒有timeout的概念，只能等worker跟MQ斷開連線，這樣MQ就會重送了。\nmessage acknowledement預設是**關閉**的，只要把auto_ack = true即可。\n\n```csharp\nvar consumer = new EventingBasicConsumer(channel);\nconsumer.Receved += (model, ea) =>{\n    var body = ea.body;\n    var message = Encoding.UTF8.GetString(body);\n    Console.WriteLine($\"{received {message}}\");\n    int dots = message.Split('.').Length - 1;\n    Thread.Sleep(dots * 1000);\n    Console.WriteLine(\"Done\");\n    channel.BasicAck(deliveryTag : ea.DeliveryTag, multiple:false);\n};\nchannel.BasicAck(queue:\"task_queue\", autoAck:True, consumer :consumer);\n\n```\n\n**Increase throuput and performance**  \n關閉ack能提升MQ的效能\n\n**Message Durability**\nMessage Durability訊息持久化，\nMQ預設並不會對queue和message做持久化的設置，因此必須先把queue和message設置為durable。\n\n首先先聲明queue為durable，這樣確保MQ重啟後，queue不會被遺失。\nMQ也不允許使用不同參數定義一個同名的queue。因此producer和consumer的設置必須一樣。\n\n```csharp\nchannel.QueueDeclare(queue:\"task_queue\",\n                     durable :true,\n                     exclusive:false,\n                     autoDelete:false,\n                     arguments:null);\n```\n接著設置message persistence\n```csharp\nvar properties = channel.CreateBasicProperties();\nproperties.Persistent = true;\n```\n*Note on message persistence*  \n把message 設置為persistence，並不能完全保證不會丟失。因為只是告訴MQ要把message存入硬碟，MQ也不是所有message都寫入硬碟，可能只是放在記憶體暫存。\n\n**Fair Dispatch**\nMQ只管把第n-th消息投遞給第n-th個worker，並不關心worker有沒有ack。\n可以設置prefetch_count=1，告訴MQ，同一時間，別送超過1條訊息給同一位worker，直到他已經處理完上一條message並送出ack。這樣MQ就會把消息分發給下一位worker。\n```csharp\nchannel.basicqos(0, 1, false);\n```\n\n### Publish/Subscribe\npub/sub目的是要把一個message分發給多個consumer。\n這個模型的核心概念是，producer並不會直接發送訊息給queue，而是把消息發送給exchange。\n\nexchange在這裡就是負責從producer接收消息，一邊把消息推送到queue。\nexchange必須知道如何處理它接受到的消息，是要推送到指定的queue還是多個queue，或是忽略，這些規則是透過exchange type來定義。\n![](/images/MQ/exchanges.webp)\n\n**Exchange Type**\n* direct 直連\n* fanout 廣播\n* topic 主題\n* headers 表頭\n```csharp\t\nchannel.ExchangeDeclare(\"logs\", \"fanout\");\n```\n\n*Note for default exchange*\nMQ預設就存在一組default exchagne，名稱是空字串””\n\n**Temporary queues**\n在task queue的情境下，給個worker同樣的queue name，這時候會透過round robin做輪詢派送。\n但是現在要的是每個人都能收到同樣的訊息，因此需要的是一個全新、空的queue，來跟exchagne綁定。\n能透過自己定義隨機的queue name或是，讓MQ來幫我們選擇一個隨機的queue name。\n\n```csharp\nvar queueName = channel.QueueDeclare().QueueName;\n```\n這時拿到的queue name就會類似amq.gen-JzTY20BRgKO-HjmUJj0wLg。\n\n**Bindings**\n![](/images/MQ/bindings.webp)\n有了fanout exchange和數個queue，這時就要設置exchange和queue之間的關聯。\n\n```csharp\nchannel.QueueBind(queue:queueName,\n                 exchagne:\"logs\",\n                 routingKey:\"\");\n\n```\n![](/images/MQ/python-three-overall.png)\n\n*Note for routing key*\nfanout type下，routing key是會被忽略的。\n\n### Routing\nRouting key的設置，能使得queue只訂閱消息的子集合。\n綁定的時候可以設置routingKey又或是稱為bindingKey，為了避免跟BasicPublish的routingKey搞混。\n\n```csharp\nchannel.QueueBind(queue:queueName, \n                  exchange:\"direct_logs\",\n                  routingKey:\"black\");\n```\n使用exchange和routing key來進行精確配對，從而確保消息該投遞到哪個queue。\n\n![](/images/MQ/direct-exchange.png)\n這裡第一個queue用orange作為綁定鍵，另一個queue用black和green。\n這樣所有orange的消息都會被路由到C1, 而black/green則會被路由到C2，其他message通通被丟棄。\n\n**Multiple Bindings**\n多個queue使用同樣的routingKey也是可行的。\n\n![](/images/MQ/direct-exchange-multiple.webp)\n\nC1和C2都使用black做綁定。這樣跟fanout type的行為雷同，只要是black的訊息，C1跟C2都會收到，但其他一樣被丟棄。\n\n**Scene : Log System**\n將log依據不同級別作為rougingKey來選擇接收者跟處理方式。\n[](/images/MQ/python-four.webp)\n建立exchange\n```csharp\nchannel.ExchangeDeclare(exchange: \"direct_logs\", type: \"direct\");\n```\n發送log訊息, serverity是info、warning、error其中一個\n```csharp\nvar body = Encoding.UTF8.GetBytes(message);\nchannel.BasicPublish(exchange: \"direct_logs\",\n                     routingKey: severity,\n                     basicProperties: null,\n                     body: body);\n```\n\nsubscribing\n```csharp\nvar queueName = channel.QueueDeclare().QueueName;\nforeach(var severity in args)\n{\n    channel.QueueBind(queue: queueName,\n                      exchange: \"direct_logs\",\n                      routingKey: severity);\n}\n```\n\n### Topics\nDirect exchange有些限制，沒辦法基於多個標準來執行路由操作。\n有時會希望不只是訂閱基於嚴重程度的日誌，也希望訂閱其他種日誌。\n這時就需要topic exchange。\n\n發送到topic exchange的訊息不可以設置routingKey，它的routingKey是一個由.分隔開的單字列表。這些單字是什麼都能，跟message有關係的詞彙是最好的。\n例如:”stock.usd.nyse”, “quick.orange.rabbit”，單字個數可以任意個，但不能超過255 bytes。\nroutingKey中也能使用類似regular expression表達個數:\n\n* * 表示一個單字\n* # 表示任意數量的單字\n[](/images/MQ/python-five.webp)\n一個攜帶有quick.orange.rabbit的消息會被投遞到C1跟C2。\n攜帶著lazy.orange.elephant的也是。\nquick.orange,fox只會投遞給C2。\nlazy.pink.rabbit只會給C2投遞1次。\nquick.brown.fox的將會被丟棄。\norange和quick.orange.male.rabbit的都會被丟棄掉。\nlazy.orange.male.rabbit將會被投遞到C2。\n\n`topic exchange是很powerful的，它可以表現出其他exchnge type的行為。\n當一個queue的routingKey是#時，這個queue將會無視message的routingKey，接收全部message。\n當*和#都未出現在routingKey時，這時候就跟direct type是一樣的行為。`\n\n**Questions**\n* bindingKey為*的queue會取到一個routingKey為空字串的消息嗎?\n* bindingKey為#.的queue會收到一個routingKey為*..的消息嗎? 它會收到routingKey為一個單字的消息嗎?\n* a.*.#和a.#的區別?\n\n### RPC\n遠端過程調用Remote Procedure Call(RPC)\n如果需要將一個函式運行在遠端服務上並且等待結果時，這時就需要RPC。\n\n透過RabbitMQ來建造一個RPC System，一個client和一個RPC Server。\n[](/images/MQ/python-six.webp)\n\n**client interface**\n```csharp\nvar rpcClient = new RPCClient();\nConsole.WriteLine(\"Request fib()\");\nvar response = rpcClient.Call(\"30\");\nConsole.WriteLine($\"Got {0}\", response);\n```\n\n### RabbitMQ Cluster and High Available\nRabbitMQ Cluser設置要求\n所有機器上的Erlang和RabbitMQ版本需要都相同，機器上Erlang的Cookie也相同\n","slug":"Introduce-to-RabbitMQ","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmb000lck6xoz9svt81","content":"<p><img src=\"/images/MQ/RabbitMQRouting.png\" alt><br><a href=\"https://www.rabbitmq.com/getstarted.html\" target=\"_blank\" rel=\"noopener\">RabbitMQ Tutorials\n</a></p>\n<a id=\"more\"></a>\n<h3 id=\"What-is-RabbitMQ\"><a href=\"#What-is-RabbitMQ\" class=\"headerlink\" title=\"What is RabbitMQ?\"></a>What is RabbitMQ?</h3><p>RabbitMQ是實現AMQP的一種微服務，用於分散是系統之中來儲存轉發訊息，便於使用，方便擴展，又有高可用性。<br>目的能替系統之間做雙向解耦。當生產者產出大量資料要送出時，消費者若無法快速消費掉，這時候就需要一個中介層，來保存這些數據。</p>\n<p>AMQP的工作流程如下圖 : message被publisher 發送給exchange，exchange常常被比喻為郵局或是郵箱。然後exchange根據收到的message以及規則分發給綁定的queue。最後AMQP代理會將message投遞給訂閱此queue的consumer，或是消費者依照需求自行獲取。<br><img src=\"/images/MQ/exchanges-topic-fanout-direct.png\" alt></p>\n<p>因為網路是不可靠的，接收消息的服務也有可能在處理時失敗，所以AMQP包含的一了message acknowledgement的概念:當一個message從queue當中投遞給consumer後，consumer會通知broker，這個message可以從queue當中刪除。</p>\n<p>某些情況下，當message無法被成功投遞時，message或許會被返回給producer並且被丟棄。或者代理執行了延期操作，message會被放入Dead-Letter exchange中。此時producer可選選擇某些參數來處理這些特殊情況。</p>\n<p>一個Log系統，能用MQ來簡化工作，一個consumer進行訊息的正常處理，另一個consumer對訊息做log紀錄，只要在系統中，起兩個consumer並把queue以相同的方式binding到同一個exchange即可。 剩下的訊息分派工作全由MQ負責完成。</p>\n<h3 id=\"Concept-and-Feature\"><a href=\"#Concept-and-Feature\" class=\"headerlink\" title=\"Concept and Feature\"></a>Concept and Feature</h3><ul>\n<li><p>Broker<br>就是MQ service本身</p>\n</li>\n<li><p>Producer<br><img src=\"/images/MQ/producer.webp\" alt><br>發送message的程序</p>\n</li>\n<li><p>Consumer<br><img src=\"/images/MQ/consumer.png\" alt><br>一個等待從queue當中獲取message的程序</p>\n</li>\n<li><p>Virtual Host<br>一個broker內可以設置多個Vhost，做為不同用戶的權限分離，或是不同的業務規劃。<br>Vhost之間相互隔離，不同Vhost之間無法共享exchange/queue。</p>\n</li>\n<li><p>Exchange<br><img src=\"/images/MQ/exchanges.webp\" alt><br>交換機，指定消息按照什麼規則，路由到哪個queue。<br>有direct、topic、headers、fanout 四種type能設置,<br>不同type的exchange路由行為是不同的。</p>\n</li>\n<li><p>Queue<br><img src=\"/images/MQ/queue.webp\" alt><br>每個message都會被投遞到一個或是多個queue當中，等待被投遞。<br>類似於郵筒的概念，message都會被存放在此。<br>queue本身是一個很大的message buffer，可以有很多個producer發送，<br>但都會傳到同一個queue且可以有多個consumer獲取資料。</p>\n</li>\n<li><p>Channel<br>在客戶端的每個connection中，可以建立多個channel,每個channel表示一個session， 客戶端只能透過channel才能執行AMQP的命令。<br>之所以需要channel因為TCP連線的建立跟釋放都是十分昂貴的，如果一個客戶端的每個線程都需要與broker交換訊息，每一個線程都建立一個TCP connection的話，OS也無法承受每秒建立如此多的TCP connection。所以RabbitMQ建議同一個發送串行資料的線程共用Channel和connection。</p>\n</li>\n<li><p>Binding<br>把exchange和queue按照路由規則綁釘起來。<br>Exchange在跟多個queue binding後會生成一張routing table，</p>\n</li>\n<li><p>Routing Key<br>路由的關鍵字，exchange根據這關鍵字，來進行訊息投遞</p>\n</li>\n<li><p>AMQP entities<br>Queue + Exchange + Binding = AMQP entities</p>\n</li>\n</ul>\n<h3 id=\"Task-Queues\"><a href=\"#Task-Queues\" class=\"headerlink\" title=\"Task Queues\"></a>Task Queues</h3><p>Task queues工作隊列，是為了避免等待一些占用大量資源、費時的操作。只要把task當作訊息丟進queue中，就會有運行的worker取出任務然後處理，當運行多個workers時，任務就會在彼此之間分配。</p>\n<h4 id=\"Message-Acknowledgment\"><a href=\"#Message-Acknowledgment\" class=\"headerlink\" title=\"Message Acknowledgment\"></a>Message Acknowledgment</h4><p>通常沒特別設置ack在queue的時候，只要message一投遞出去，立刻就為從queue之中移除。<br>此時如果worker運行到一半掛掉，正在處理的message就會遺失了。<br>如果不想遺失任何message，當前worker掛掉時，我們希望任務會重新指派給其他worker。</p>\n<p>因此，RabbitMQ提供了acknowledements。<br>worker會通過一個ack訊號，告訴RabbitMQ已經收到了並且處理完該條訊息，然後MQ就會刪除該訊息。</p>\n<p>如果worker掛了，沒有發送ack，則MQ就會認為message沒有被完全處理，就會重新發送給其他worker，這樣就不會遺失任何message。</p>\n<p>但由於message沒有timeout的概念，只能等worker跟MQ斷開連線，這樣MQ就會重送了。<br>message acknowledement預設是<strong>關閉</strong>的，只要把auto_ack = true即可。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">consumer.Receved += (model, ea) =&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body = ea.body;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;received &#123;message&#125;</span>&#125;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dots = message.Split(<span class=\"string\">'.'</span>).Length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    Thread.Sleep(dots * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">    channel.BasicAck(deliveryTag : ea.DeliveryTag, multiple:<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">channel.BasicAck(queue:<span class=\"string\">\"task_queue\"</span>, autoAck:True, consumer :consumer);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Increase throuput and performance</strong><br>關閉ack能提升MQ的效能</p>\n<p><strong>Message Durability</strong><br>Message Durability訊息持久化，<br>MQ預設並不會對queue和message做持久化的設置，因此必須先把queue和message設置為durable。</p>\n<p>首先先聲明queue為durable，這樣確保MQ重啟後，queue不會被遺失。<br>MQ也不允許使用不同參數定義一個同名的queue。因此producer和consumer的設置必須一樣。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.QueueDeclare(queue:<span class=\"string\">\"task_queue\"</span>,</span><br><span class=\"line\">                     durable :<span class=\"literal\">true</span>,</span><br><span class=\"line\">                     exclusive:<span class=\"literal\">false</span>,</span><br><span class=\"line\">                     autoDelete:<span class=\"literal\">false</span>,</span><br><span class=\"line\">                     arguments:<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接著設置message persistence</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> properties = channel.CreateBasicProperties();</span><br><span class=\"line\">properties.Persistent = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p><em>Note on message persistence</em><br>把message 設置為persistence，並不能完全保證不會丟失。因為只是告訴MQ要把message存入硬碟，MQ也不是所有message都寫入硬碟，可能只是放在記憶體暫存。</p>\n<p><strong>Fair Dispatch</strong><br>MQ只管把第n-th消息投遞給第n-th個worker，並不關心worker有沒有ack。<br>可以設置prefetch_count=1，告訴MQ，同一時間，別送超過1條訊息給同一位worker，直到他已經處理完上一條message並送出ack。這樣MQ就會把消息分發給下一位worker。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicqos(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Publish-Subscribe\"><a href=\"#Publish-Subscribe\" class=\"headerlink\" title=\"Publish/Subscribe\"></a>Publish/Subscribe</h3><p>pub/sub目的是要把一個message分發給多個consumer。<br>這個模型的核心概念是，producer並不會直接發送訊息給queue，而是把消息發送給exchange。</p>\n<p>exchange在這裡就是負責從producer接收消息，一邊把消息推送到queue。<br>exchange必須知道如何處理它接受到的消息，是要推送到指定的queue還是多個queue，或是忽略，這些規則是透過exchange type來定義。<br><img src=\"/images/MQ/exchanges.webp\" alt></p>\n<p><strong>Exchange Type</strong></p>\n<ul>\n<li>direct 直連</li>\n<li>fanout 廣播</li>\n<li>topic 主題</li>\n<li>headers 表頭<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.ExchangeDeclare(<span class=\"string\">\"logs\"</span>, <span class=\"string\">\"fanout\"</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><em>Note for default exchange</em><br>MQ預設就存在一組default exchagne，名稱是空字串””</p>\n<p><strong>Temporary queues</strong><br>在task queue的情境下，給個worker同樣的queue name，這時候會透過round robin做輪詢派送。<br>但是現在要的是每個人都能收到同樣的訊息，因此需要的是一個全新、空的queue，來跟exchagne綁定。<br>能透過自己定義隨機的queue name或是，讓MQ來幫我們選擇一個隨機的queue name。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> queueName = channel.QueueDeclare().QueueName;</span><br></pre></td></tr></table></figure>\n\n<p>這時拿到的queue name就會類似amq.gen-JzTY20BRgKO-HjmUJj0wLg。</p>\n<p><strong>Bindings</strong><br><img src=\"/images/MQ/bindings.webp\" alt><br>有了fanout exchange和數個queue，這時就要設置exchange和queue之間的關聯。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.QueueBind(queue:queueName,</span><br><span class=\"line\">                 exchagne:<span class=\"string\">\"logs\"</span>,</span><br><span class=\"line\">                 routingKey:<span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/MQ/python-three-overall.png\" alt></p>\n<p><em>Note for routing key</em><br>fanout type下，routing key是會被忽略的。</p>\n<h3 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h3><p>Routing key的設置，能使得queue只訂閱消息的子集合。<br>綁定的時候可以設置routingKey又或是稱為bindingKey，為了避免跟BasicPublish的routingKey搞混。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.QueueBind(queue:queueName, </span><br><span class=\"line\">                  exchange:<span class=\"string\">\"direct_logs\"</span>,</span><br><span class=\"line\">                  routingKey:<span class=\"string\">\"black\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用exchange和routing key來進行精確配對，從而確保消息該投遞到哪個queue。</p>\n<p><img src=\"/images/MQ/direct-exchange.png\" alt><br>這裡第一個queue用orange作為綁定鍵，另一個queue用black和green。<br>這樣所有orange的消息都會被路由到C1, 而black/green則會被路由到C2，其他message通通被丟棄。</p>\n<p><strong>Multiple Bindings</strong><br>多個queue使用同樣的routingKey也是可行的。</p>\n<p><img src=\"/images/MQ/direct-exchange-multiple.webp\" alt></p>\n<p>C1和C2都使用black做綁定。這樣跟fanout type的行為雷同，只要是black的訊息，C1跟C2都會收到，但其他一樣被丟棄。</p>\n<p><strong>Scene : Log System</strong><br>將log依據不同級別作為rougingKey來選擇接收者跟處理方式。<br><a href=\"/images/MQ/python-four.webp\"></a><br>建立exchange</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.ExchangeDeclare(exchange: <span class=\"string\">\"direct_logs\"</span>, type: <span class=\"string\">\"direct\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>發送log訊息, serverity是info、warning、error其中一個</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">channel.BasicPublish(exchange: <span class=\"string\">\"direct_logs\"</span>,</span><br><span class=\"line\">                     routingKey: severity,</span><br><span class=\"line\">                     basicProperties: <span class=\"literal\">null</span>,</span><br><span class=\"line\">                     body: body);</span><br></pre></td></tr></table></figure>\n\n<p>subscribing</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> queueName = channel.QueueDeclare().QueueName;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> severity <span class=\"keyword\">in</span> args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    channel.QueueBind(queue: queueName,</span><br><span class=\"line\">                      exchange: <span class=\"string\">\"direct_logs\"</span>,</span><br><span class=\"line\">                      routingKey: severity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h3><p>Direct exchange有些限制，沒辦法基於多個標準來執行路由操作。<br>有時會希望不只是訂閱基於嚴重程度的日誌，也希望訂閱其他種日誌。<br>這時就需要topic exchange。</p>\n<p>發送到topic exchange的訊息不可以設置routingKey，它的routingKey是一個由.分隔開的單字列表。這些單字是什麼都能，跟message有關係的詞彙是最好的。<br>例如:”stock.usd.nyse”, “quick.orange.rabbit”，單字個數可以任意個，但不能超過255 bytes。<br>routingKey中也能使用類似regular expression表達個數:</p>\n<ul>\n<li><ul>\n<li>表示一個單字</li>\n</ul>\n</li>\n<li><h1 id=\"表示任意數量的單字\"><a href=\"#表示任意數量的單字\" class=\"headerlink\" title=\"表示任意數量的單字\"></a>表示任意數量的單字</h1><a href=\"/images/MQ/python-five.webp\"></a><br>一個攜帶有quick.orange.rabbit的消息會被投遞到C1跟C2。<br>攜帶著lazy.orange.elephant的也是。<br>quick.orange,fox只會投遞給C2。<br>lazy.pink.rabbit只會給C2投遞1次。<br>quick.brown.fox的將會被丟棄。<br>orange和quick.orange.male.rabbit的都會被丟棄掉。<br>lazy.orange.male.rabbit將會被投遞到C2。</li>\n</ul>\n<p><code>topic exchange是很powerful的，它可以表現出其他exchnge type的行為。\n當一個queue的routingKey是#時，這個queue將會無視message的routingKey，接收全部message。\n當*和#都未出現在routingKey時，這時候就跟direct type是一樣的行為。</code></p>\n<p><strong>Questions</strong></p>\n<ul>\n<li>bindingKey為*的queue會取到一個routingKey為空字串的消息嗎?</li>\n<li>bindingKey為#.的queue會收到一個routingKey為*..的消息嗎? 它會收到routingKey為一個單字的消息嗎?</li>\n<li>a.*.#和a.#的區別?</li>\n</ul>\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><p>遠端過程調用Remote Procedure Call(RPC)<br>如果需要將一個函式運行在遠端服務上並且等待結果時，這時就需要RPC。</p>\n<p>透過RabbitMQ來建造一個RPC System，一個client和一個RPC Server。<br><a href=\"/images/MQ/python-six.webp\"></a></p>\n<p><strong>client interface</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rpcClient = <span class=\"keyword\">new</span> RPCClient();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"Request fib()\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> response = rpcClient.Call(<span class=\"string\">\"30\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Got <span class=\"subst\">&#123;<span class=\"number\">0</span>&#125;</span>\"</span>, response);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RabbitMQ-Cluster-and-High-Available\"><a href=\"#RabbitMQ-Cluster-and-High-Available\" class=\"headerlink\" title=\"RabbitMQ Cluster and High Available\"></a>RabbitMQ Cluster and High Available</h3><p>RabbitMQ Cluser設置要求<br>所有機器上的Erlang和RabbitMQ版本需要都相同，機器上Erlang的Cookie也相同</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/images/MQ/RabbitMQRouting.png\" alt><br><a href=\"https://www.rabbitmq.com/getstarted.html\" target=\"_blank\" rel=\"noopener\">RabbitMQ Tutorials\n</a></p>","more":"<h3 id=\"What-is-RabbitMQ\"><a href=\"#What-is-RabbitMQ\" class=\"headerlink\" title=\"What is RabbitMQ?\"></a>What is RabbitMQ?</h3><p>RabbitMQ是實現AMQP的一種微服務，用於分散是系統之中來儲存轉發訊息，便於使用，方便擴展，又有高可用性。<br>目的能替系統之間做雙向解耦。當生產者產出大量資料要送出時，消費者若無法快速消費掉，這時候就需要一個中介層，來保存這些數據。</p>\n<p>AMQP的工作流程如下圖 : message被publisher 發送給exchange，exchange常常被比喻為郵局或是郵箱。然後exchange根據收到的message以及規則分發給綁定的queue。最後AMQP代理會將message投遞給訂閱此queue的consumer，或是消費者依照需求自行獲取。<br><img src=\"/images/MQ/exchanges-topic-fanout-direct.png\" alt></p>\n<p>因為網路是不可靠的，接收消息的服務也有可能在處理時失敗，所以AMQP包含的一了message acknowledgement的概念:當一個message從queue當中投遞給consumer後，consumer會通知broker，這個message可以從queue當中刪除。</p>\n<p>某些情況下，當message無法被成功投遞時，message或許會被返回給producer並且被丟棄。或者代理執行了延期操作，message會被放入Dead-Letter exchange中。此時producer可選選擇某些參數來處理這些特殊情況。</p>\n<p>一個Log系統，能用MQ來簡化工作，一個consumer進行訊息的正常處理，另一個consumer對訊息做log紀錄，只要在系統中，起兩個consumer並把queue以相同的方式binding到同一個exchange即可。 剩下的訊息分派工作全由MQ負責完成。</p>\n<h3 id=\"Concept-and-Feature\"><a href=\"#Concept-and-Feature\" class=\"headerlink\" title=\"Concept and Feature\"></a>Concept and Feature</h3><ul>\n<li><p>Broker<br>就是MQ service本身</p>\n</li>\n<li><p>Producer<br><img src=\"/images/MQ/producer.webp\" alt><br>發送message的程序</p>\n</li>\n<li><p>Consumer<br><img src=\"/images/MQ/consumer.png\" alt><br>一個等待從queue當中獲取message的程序</p>\n</li>\n<li><p>Virtual Host<br>一個broker內可以設置多個Vhost，做為不同用戶的權限分離，或是不同的業務規劃。<br>Vhost之間相互隔離，不同Vhost之間無法共享exchange/queue。</p>\n</li>\n<li><p>Exchange<br><img src=\"/images/MQ/exchanges.webp\" alt><br>交換機，指定消息按照什麼規則，路由到哪個queue。<br>有direct、topic、headers、fanout 四種type能設置,<br>不同type的exchange路由行為是不同的。</p>\n</li>\n<li><p>Queue<br><img src=\"/images/MQ/queue.webp\" alt><br>每個message都會被投遞到一個或是多個queue當中，等待被投遞。<br>類似於郵筒的概念，message都會被存放在此。<br>queue本身是一個很大的message buffer，可以有很多個producer發送，<br>但都會傳到同一個queue且可以有多個consumer獲取資料。</p>\n</li>\n<li><p>Channel<br>在客戶端的每個connection中，可以建立多個channel,每個channel表示一個session， 客戶端只能透過channel才能執行AMQP的命令。<br>之所以需要channel因為TCP連線的建立跟釋放都是十分昂貴的，如果一個客戶端的每個線程都需要與broker交換訊息，每一個線程都建立一個TCP connection的話，OS也無法承受每秒建立如此多的TCP connection。所以RabbitMQ建議同一個發送串行資料的線程共用Channel和connection。</p>\n</li>\n<li><p>Binding<br>把exchange和queue按照路由規則綁釘起來。<br>Exchange在跟多個queue binding後會生成一張routing table，</p>\n</li>\n<li><p>Routing Key<br>路由的關鍵字，exchange根據這關鍵字，來進行訊息投遞</p>\n</li>\n<li><p>AMQP entities<br>Queue + Exchange + Binding = AMQP entities</p>\n</li>\n</ul>\n<h3 id=\"Task-Queues\"><a href=\"#Task-Queues\" class=\"headerlink\" title=\"Task Queues\"></a>Task Queues</h3><p>Task queues工作隊列，是為了避免等待一些占用大量資源、費時的操作。只要把task當作訊息丟進queue中，就會有運行的worker取出任務然後處理，當運行多個workers時，任務就會在彼此之間分配。</p>\n<h4 id=\"Message-Acknowledgment\"><a href=\"#Message-Acknowledgment\" class=\"headerlink\" title=\"Message Acknowledgment\"></a>Message Acknowledgment</h4><p>通常沒特別設置ack在queue的時候，只要message一投遞出去，立刻就為從queue之中移除。<br>此時如果worker運行到一半掛掉，正在處理的message就會遺失了。<br>如果不想遺失任何message，當前worker掛掉時，我們希望任務會重新指派給其他worker。</p>\n<p>因此，RabbitMQ提供了acknowledements。<br>worker會通過一個ack訊號，告訴RabbitMQ已經收到了並且處理完該條訊息，然後MQ就會刪除該訊息。</p>\n<p>如果worker掛了，沒有發送ack，則MQ就會認為message沒有被完全處理，就會重新發送給其他worker，這樣就不會遺失任何message。</p>\n<p>但由於message沒有timeout的概念，只能等worker跟MQ斷開連線，這樣MQ就會重送了。<br>message acknowledement預設是<strong>關閉</strong>的，只要把auto_ack = true即可。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> consumer = <span class=\"keyword\">new</span> EventingBasicConsumer(channel);</span><br><span class=\"line\">consumer.Receved += (model, ea) =&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> body = ea.body;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;received &#123;message&#125;</span>&#125;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dots = message.Split(<span class=\"string\">'.'</span>).Length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    Thread.Sleep(dots * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">    channel.BasicAck(deliveryTag : ea.DeliveryTag, multiple:<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">channel.BasicAck(queue:<span class=\"string\">\"task_queue\"</span>, autoAck:True, consumer :consumer);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Increase throuput and performance</strong><br>關閉ack能提升MQ的效能</p>\n<p><strong>Message Durability</strong><br>Message Durability訊息持久化，<br>MQ預設並不會對queue和message做持久化的設置，因此必須先把queue和message設置為durable。</p>\n<p>首先先聲明queue為durable，這樣確保MQ重啟後，queue不會被遺失。<br>MQ也不允許使用不同參數定義一個同名的queue。因此producer和consumer的設置必須一樣。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.QueueDeclare(queue:<span class=\"string\">\"task_queue\"</span>,</span><br><span class=\"line\">                     durable :<span class=\"literal\">true</span>,</span><br><span class=\"line\">                     exclusive:<span class=\"literal\">false</span>,</span><br><span class=\"line\">                     autoDelete:<span class=\"literal\">false</span>,</span><br><span class=\"line\">                     arguments:<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<p>接著設置message persistence</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> properties = channel.CreateBasicProperties();</span><br><span class=\"line\">properties.Persistent = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p><em>Note on message persistence</em><br>把message 設置為persistence，並不能完全保證不會丟失。因為只是告訴MQ要把message存入硬碟，MQ也不是所有message都寫入硬碟，可能只是放在記憶體暫存。</p>\n<p><strong>Fair Dispatch</strong><br>MQ只管把第n-th消息投遞給第n-th個worker，並不關心worker有沒有ack。<br>可以設置prefetch_count=1，告訴MQ，同一時間，別送超過1條訊息給同一位worker，直到他已經處理完上一條message並送出ack。這樣MQ就會把消息分發給下一位worker。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicqos(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Publish-Subscribe\"><a href=\"#Publish-Subscribe\" class=\"headerlink\" title=\"Publish/Subscribe\"></a>Publish/Subscribe</h3><p>pub/sub目的是要把一個message分發給多個consumer。<br>這個模型的核心概念是，producer並不會直接發送訊息給queue，而是把消息發送給exchange。</p>\n<p>exchange在這裡就是負責從producer接收消息，一邊把消息推送到queue。<br>exchange必須知道如何處理它接受到的消息，是要推送到指定的queue還是多個queue，或是忽略，這些規則是透過exchange type來定義。<br><img src=\"/images/MQ/exchanges.webp\" alt></p>\n<p><strong>Exchange Type</strong></p>\n<ul>\n<li>direct 直連</li>\n<li>fanout 廣播</li>\n<li>topic 主題</li>\n<li>headers 表頭<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.ExchangeDeclare(<span class=\"string\">\"logs\"</span>, <span class=\"string\">\"fanout\"</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><em>Note for default exchange</em><br>MQ預設就存在一組default exchagne，名稱是空字串””</p>\n<p><strong>Temporary queues</strong><br>在task queue的情境下，給個worker同樣的queue name，這時候會透過round robin做輪詢派送。<br>但是現在要的是每個人都能收到同樣的訊息，因此需要的是一個全新、空的queue，來跟exchagne綁定。<br>能透過自己定義隨機的queue name或是，讓MQ來幫我們選擇一個隨機的queue name。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> queueName = channel.QueueDeclare().QueueName;</span><br></pre></td></tr></table></figure>\n\n<p>這時拿到的queue name就會類似amq.gen-JzTY20BRgKO-HjmUJj0wLg。</p>\n<p><strong>Bindings</strong><br><img src=\"/images/MQ/bindings.webp\" alt><br>有了fanout exchange和數個queue，這時就要設置exchange和queue之間的關聯。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.QueueBind(queue:queueName,</span><br><span class=\"line\">                 exchagne:<span class=\"string\">\"logs\"</span>,</span><br><span class=\"line\">                 routingKey:<span class=\"string\">\"\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/MQ/python-three-overall.png\" alt></p>\n<p><em>Note for routing key</em><br>fanout type下，routing key是會被忽略的。</p>\n<h3 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h3><p>Routing key的設置，能使得queue只訂閱消息的子集合。<br>綁定的時候可以設置routingKey又或是稱為bindingKey，為了避免跟BasicPublish的routingKey搞混。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.QueueBind(queue:queueName, </span><br><span class=\"line\">                  exchange:<span class=\"string\">\"direct_logs\"</span>,</span><br><span class=\"line\">                  routingKey:<span class=\"string\">\"black\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用exchange和routing key來進行精確配對，從而確保消息該投遞到哪個queue。</p>\n<p><img src=\"/images/MQ/direct-exchange.png\" alt><br>這裡第一個queue用orange作為綁定鍵，另一個queue用black和green。<br>這樣所有orange的消息都會被路由到C1, 而black/green則會被路由到C2，其他message通通被丟棄。</p>\n<p><strong>Multiple Bindings</strong><br>多個queue使用同樣的routingKey也是可行的。</p>\n<p><img src=\"/images/MQ/direct-exchange-multiple.webp\" alt></p>\n<p>C1和C2都使用black做綁定。這樣跟fanout type的行為雷同，只要是black的訊息，C1跟C2都會收到，但其他一樣被丟棄。</p>\n<p><strong>Scene : Log System</strong><br>將log依據不同級別作為rougingKey來選擇接收者跟處理方式。<br><a href=\"/images/MQ/python-four.webp\"></a><br>建立exchange</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.ExchangeDeclare(exchange: <span class=\"string\">\"direct_logs\"</span>, type: <span class=\"string\">\"direct\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>發送log訊息, serverity是info、warning、error其中一個</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class=\"line\">channel.BasicPublish(exchange: <span class=\"string\">\"direct_logs\"</span>,</span><br><span class=\"line\">                     routingKey: severity,</span><br><span class=\"line\">                     basicProperties: <span class=\"literal\">null</span>,</span><br><span class=\"line\">                     body: body);</span><br></pre></td></tr></table></figure>\n\n<p>subscribing</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> queueName = channel.QueueDeclare().QueueName;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> severity <span class=\"keyword\">in</span> args)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    channel.QueueBind(queue: queueName,</span><br><span class=\"line\">                      exchange: <span class=\"string\">\"direct_logs\"</span>,</span><br><span class=\"line\">                      routingKey: severity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h3><p>Direct exchange有些限制，沒辦法基於多個標準來執行路由操作。<br>有時會希望不只是訂閱基於嚴重程度的日誌，也希望訂閱其他種日誌。<br>這時就需要topic exchange。</p>\n<p>發送到topic exchange的訊息不可以設置routingKey，它的routingKey是一個由.分隔開的單字列表。這些單字是什麼都能，跟message有關係的詞彙是最好的。<br>例如:”stock.usd.nyse”, “quick.orange.rabbit”，單字個數可以任意個，但不能超過255 bytes。<br>routingKey中也能使用類似regular expression表達個數:</p>\n<ul>\n<li><ul>\n<li>表示一個單字</li>\n</ul>\n</li>\n<li><h1 id=\"表示任意數量的單字\"><a href=\"#表示任意數量的單字\" class=\"headerlink\" title=\"表示任意數量的單字\"></a>表示任意數量的單字</h1><a href=\"/images/MQ/python-five.webp\"></a><br>一個攜帶有quick.orange.rabbit的消息會被投遞到C1跟C2。<br>攜帶著lazy.orange.elephant的也是。<br>quick.orange,fox只會投遞給C2。<br>lazy.pink.rabbit只會給C2投遞1次。<br>quick.brown.fox的將會被丟棄。<br>orange和quick.orange.male.rabbit的都會被丟棄掉。<br>lazy.orange.male.rabbit將會被投遞到C2。</li>\n</ul>\n<p><code>topic exchange是很powerful的，它可以表現出其他exchnge type的行為。\n當一個queue的routingKey是#時，這個queue將會無視message的routingKey，接收全部message。\n當*和#都未出現在routingKey時，這時候就跟direct type是一樣的行為。</code></p>\n<p><strong>Questions</strong></p>\n<ul>\n<li>bindingKey為*的queue會取到一個routingKey為空字串的消息嗎?</li>\n<li>bindingKey為#.的queue會收到一個routingKey為*..的消息嗎? 它會收到routingKey為一個單字的消息嗎?</li>\n<li>a.*.#和a.#的區別?</li>\n</ul>\n<h3 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h3><p>遠端過程調用Remote Procedure Call(RPC)<br>如果需要將一個函式運行在遠端服務上並且等待結果時，這時就需要RPC。</p>\n<p>透過RabbitMQ來建造一個RPC System，一個client和一個RPC Server。<br><a href=\"/images/MQ/python-six.webp\"></a></p>\n<p><strong>client interface</strong></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rpcClient = <span class=\"keyword\">new</span> RPCClient();</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"Request fib()\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> response = rpcClient.Call(<span class=\"string\">\"30\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Got <span class=\"subst\">&#123;<span class=\"number\">0</span>&#125;</span>\"</span>, response);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RabbitMQ-Cluster-and-High-Available\"><a href=\"#RabbitMQ-Cluster-and-High-Available\" class=\"headerlink\" title=\"RabbitMQ Cluster and High Available\"></a>RabbitMQ Cluster and High Available</h3><p>RabbitMQ Cluser設置要求<br>所有機器上的Erlang和RabbitMQ版本需要都相同，機器上Erlang的Cookie也相同</p>"},{"title":"JS30 - JavaScript Drum Kit","date":"2017-06-04T15:49:37.000Z","_content":"#核心需求\n* 根據鍵盤的KeyCode，來撥放對應的聲音\n* 改變觸發的物件樣式\n\n# 實現思維\n* 在元素上綁定keydown event\n* 對應事件的處理流程\n    + 給每個div元素綁定transitioned event\n        1. 綁定事件\n        2. 獲取所有classname為key的元素\n* 去除樣式的事件處理流程\n\n{% iframe https://codepen.io/tedmax100/pen/GERaWN %}\n\n```javascript\nwindows.addEventListener('keydown', function(e){\n    console.log(e);\n});\n```","source":"_posts/JS30-JavaScript-Drum-Kit.md","raw":"---\ntitle: JS30 - JavaScript Drum Kit\ndate: 2017-06-04 23:49:37\ntags:\n    - JavaSCript\n    - JS30Day\n---\n#核心需求\n* 根據鍵盤的KeyCode，來撥放對應的聲音\n* 改變觸發的物件樣式\n\n# 實現思維\n* 在元素上綁定keydown event\n* 對應事件的處理流程\n    + 給每個div元素綁定transitioned event\n        1. 綁定事件\n        2. 獲取所有classname為key的元素\n* 去除樣式的事件處理流程\n\n{% iframe https://codepen.io/tedmax100/pen/GERaWN %}\n\n```javascript\nwindows.addEventListener('keydown', function(e){\n    console.log(e);\n});\n```","slug":"JS30-JavaScript-Drum-Kit","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmc000pck6xxu3dctul","content":"<p>#核心需求</p>\n<ul>\n<li>根據鍵盤的KeyCode，來撥放對應的聲音</li>\n<li>改變觸發的物件樣式</li>\n</ul>\n<h1 id=\"實現思維\"><a href=\"#實現思維\" class=\"headerlink\" title=\"實現思維\"></a>實現思維</h1><ul>\n<li>在元素上綁定keydown event</li>\n<li>對應事件的處理流程<ul>\n<li>給每個div元素綁定transitioned event<ol>\n<li>綁定事件</li>\n<li>獲取所有classname為key的元素</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>去除樣式的事件處理流程</li>\n</ul>\n<iframe src=\"https://codepen.io/tedmax100/pen/GERaWN\" width=\"100%\" height=\"300\" frameborder=\"0\" allowfullscreen></iframe>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows.addEventListener(<span class=\"string\">'keydown'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>#核心需求</p>\n<ul>\n<li>根據鍵盤的KeyCode，來撥放對應的聲音</li>\n<li>改變觸發的物件樣式</li>\n</ul>\n<h1 id=\"實現思維\"><a href=\"#實現思維\" class=\"headerlink\" title=\"實現思維\"></a>實現思維</h1><ul>\n<li>在元素上綁定keydown event</li>\n<li>對應事件的處理流程<ul>\n<li>給每個div元素綁定transitioned event<ol>\n<li>綁定事件</li>\n<li>獲取所有classname為key的元素</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>去除樣式的事件處理流程</li>\n</ul>\n<iframe src=\"https://codepen.io/tedmax100/pen/GERaWN\" width=\"100%\" height=\"300\" frameborder=\"0\" allowfullscreen></iframe>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows.addEventListener(<span class=\"string\">'keydown'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"JS Clean Code訓練營","date":"2018-10-09T04:46:57.000Z","_content":"![](/images/Refactor/51ta2ZRmPeL.jpg)\n```\n第一天 :\n有效的单元测试\n识别依赖\n隔离依赖\n前端逻辑的常见剥离方式\nStub与Mock\n处理Callback和Promise\n第二天 : \n小步重构\n识别代码臭味\n处理代码臭味的技巧\n良好设计的基本原则\n消除重复，降低复杂度\n```\n\n## Day1 :\n### Lesson 1:\n1 .FizzBuzz\n\n數學歸納法: n =1 => n+1 ok\n一個it test, 通常證明2個test case\n\nVue_Header profileCaption test\n### Lesson 2:\n單元測試的好處:\n* “提早”得知程式碼是否有漏洞; 提早設置check point。\n* 回歸測試\n* 自動運行\n* 說明文件\n* 建立可重複利用的元件\n* 任何測試案例應該是獨立的\n* 使用者角度去做測試案例\n* private method不應該被特別測試，因為第7點的關係，使用者只在意公開方法，且私有方法一定會被公開方法給使用到。\n* 基本上單元測試，都是黑盒測試，因為只在意輸出入。\n* 單元測試要快\n* 使用類似jest的框架，整合模擬測試ui上的行為\n\n### Lesson 3 :\n物件導向設計原則:\n\n* 組件 應該要具備 高內聚、低耦合 的特性\n* 物件導向的繼承關係，就是高耦合\n* 只要function內有new()，也是高耦合\n\nStub : state change\nMock : behavior test (called, parameter…)\n\n### Lesson 4:\n一一一一一一一一一一一一一一一一一一一\nUT —————————–> IT\n\n* Unit Test:\n    * 速度快\n    * 程式少\n    * 定位問題簡單\n    * 代碼依賴剝離 成本高\n    * 無網路、文檔讀寫、外部第三方套件、跟運行環境無關的、與配置無關\n\n* Integration Test:\n    * 速度慢\n    * 程式多\n    * 定位問題多\n    * 代碼依賴剝離 成本低\n    * 前端的UI\n    * 異步執行\n\n#### Refactoring\n* moment.js(會修改自身，產生副作用) -> date.js\n\n* budget.js\n    * if 有return , else也return\n    * remove else\n    * 重複的邏輯 -> extract method\n    * 可讀性低 || 註解 (因為怕看不懂，所以加註解)\n\n* code smell\n    * 長方法 long method代碼行數過長 (code standard by group define)\n    * 多種數據結構 使用同一個數據 表達同一件事情。startDate & endDate 進來後被轉成兩種不同的變數。\n    * duplicate logic(code)\n    * temporary variable(Field) -> Inline Temp\n    * 令人費解的命名 (不把型別加入命名中) -> *Rename method\n    * clearly intention\n    * 資料謎團 data clump\n    * 抽象干擾 Abstraction Distraction\n    * 特性忌妒 Feature Envy\n    * 基礎型別偏執 primitive obssession\n\n* how\n    * use inline option\n    * delete useless codes\n    * delete duplicate codes ; 先讓疑似重複的部分盡可能變得一樣，別一開始就提取代碼。\n    * extract method\n    * rename\n    * covert param to object\n    * create data class\n    * change signature\n    * use loadash to make code to be clearly intention\n\n#### Refactor vs Rewrite\n* Refactor: 行為與之前一樣，但代碼可讀性更高\n* Rewrite : 行為未必與之前一樣。\n* 異動範圍大小\n* 流程與結構的不同\n\n## Day2\n被提取出來的私有class，與私有方法，只要是只有被測試公開方法給涵蓋，且只有這些再用，就不必再額外寫測試。除非它後來有其他其他未被涵蓋測試的公開方法給引用。除非後來因為這些被提取的部分出bug，再補充其測試。\n\n* Refactor\n    * 擁抱變化\n    * 從legacy code 實現 演進式設計\n* 建築 vs software design\n    * 藍圖 –build–> 建築\n    * 代碼 –build–> 軟體\n    * UML 用來與人溝通，一致化想法用的語言，並非藍圖\n* JS 不一定適合套用design pattern, 只有少數的pattern適用\n\n* Legacy code type :\n    * new feature\n    * stable (已經上無數補丁，正在運行中)\n    * unused\n\n### Lesson 2\n* MVC vs MVP\n    * MVC的進入點是controller -> Model -> Controller -> View\n    * MVP的進入點式VIEW -> Presenter -> Model -> Presenter -> View\n* Tell, Don’t ask -> Design principle\n\n* 防衛性編程\n```\nfun A(xxx) {\n    if(A) ...\n    return ___;\n}\nlet a = A(param);\nif(a) {\n    ....\n}\n```\n\n* 在進入口做防範驗證，內部邏輯別做太多返回值的判斷。\n* 調用者保證參數有效，被調用者保證返回值有效\n* Design Contract\n* 給予 default value; 別用null 表達某一種邏輯\n* Null object pattern\n* architecture\n* view model\n* presenter\n* business model\n* dto、dao\n\n\n### Smells\n* 註解\n    * 不適當的訊息 Inappropriate Information : 註釋只應該描述有關代碼跟設計的技術性訊息，不該帶作者、最後修改時間等。 因為GIT上會記錄。\n    * 廢棄的註解 Obsolete Comment:不正確或無關的註解。\n    * 冗餘註解\n    * 糟糕的註解\n    * 註解掉的代碼  \n\n* 方法\n    * 過多的參數 Too Many Arguments : 盡量少，沒參數最好，超過3個就要避免。\n    * 輸出參數 Output Arguments: appendFooter(s) 不如把footer設定在物件屬性內，再呼叫report.appendFoorer()\n    * 標示參數 Flag Arguments\n\n```\n//pseudo-code\nclass Concert...\n  public Booking book (Customer aCustomer, boolean isPremium) {...}\n```\n```\npublic Booking regularBook(Customer aCustomer) {...}\npublic Booking premiumBook(Customer aCustomer) {...}\n```\n\n    * 死方法 Dead Function\n\n* 一般問題\n    * 重複 DRY (Don’t Repeat Yourself): 資料庫正規化，物件導向繼承\n    * 接口提供過多 Too Much Information\n    * 特性依戀 Feature Envy: 類別的方法只對類中的屬性跟方法有興趣，不該依靠其他類中的變數跟方法。顯然是「內聚力」不夠的一種現象","source":"_posts/JS-Clean-Code訓練營.md","raw":"---\ntitle: JS Clean Code訓練營\ndate: 2018-10-09 12:46:57\ntags:\n    - JavaScript\n    - CleanCode\n---\n![](/images/Refactor/51ta2ZRmPeL.jpg)\n```\n第一天 :\n有效的单元测试\n识别依赖\n隔离依赖\n前端逻辑的常见剥离方式\nStub与Mock\n处理Callback和Promise\n第二天 : \n小步重构\n识别代码臭味\n处理代码臭味的技巧\n良好设计的基本原则\n消除重复，降低复杂度\n```\n\n## Day1 :\n### Lesson 1:\n1 .FizzBuzz\n\n數學歸納法: n =1 => n+1 ok\n一個it test, 通常證明2個test case\n\nVue_Header profileCaption test\n### Lesson 2:\n單元測試的好處:\n* “提早”得知程式碼是否有漏洞; 提早設置check point。\n* 回歸測試\n* 自動運行\n* 說明文件\n* 建立可重複利用的元件\n* 任何測試案例應該是獨立的\n* 使用者角度去做測試案例\n* private method不應該被特別測試，因為第7點的關係，使用者只在意公開方法，且私有方法一定會被公開方法給使用到。\n* 基本上單元測試，都是黑盒測試，因為只在意輸出入。\n* 單元測試要快\n* 使用類似jest的框架，整合模擬測試ui上的行為\n\n### Lesson 3 :\n物件導向設計原則:\n\n* 組件 應該要具備 高內聚、低耦合 的特性\n* 物件導向的繼承關係，就是高耦合\n* 只要function內有new()，也是高耦合\n\nStub : state change\nMock : behavior test (called, parameter…)\n\n### Lesson 4:\n一一一一一一一一一一一一一一一一一一一\nUT —————————–> IT\n\n* Unit Test:\n    * 速度快\n    * 程式少\n    * 定位問題簡單\n    * 代碼依賴剝離 成本高\n    * 無網路、文檔讀寫、外部第三方套件、跟運行環境無關的、與配置無關\n\n* Integration Test:\n    * 速度慢\n    * 程式多\n    * 定位問題多\n    * 代碼依賴剝離 成本低\n    * 前端的UI\n    * 異步執行\n\n#### Refactoring\n* moment.js(會修改自身，產生副作用) -> date.js\n\n* budget.js\n    * if 有return , else也return\n    * remove else\n    * 重複的邏輯 -> extract method\n    * 可讀性低 || 註解 (因為怕看不懂，所以加註解)\n\n* code smell\n    * 長方法 long method代碼行數過長 (code standard by group define)\n    * 多種數據結構 使用同一個數據 表達同一件事情。startDate & endDate 進來後被轉成兩種不同的變數。\n    * duplicate logic(code)\n    * temporary variable(Field) -> Inline Temp\n    * 令人費解的命名 (不把型別加入命名中) -> *Rename method\n    * clearly intention\n    * 資料謎團 data clump\n    * 抽象干擾 Abstraction Distraction\n    * 特性忌妒 Feature Envy\n    * 基礎型別偏執 primitive obssession\n\n* how\n    * use inline option\n    * delete useless codes\n    * delete duplicate codes ; 先讓疑似重複的部分盡可能變得一樣，別一開始就提取代碼。\n    * extract method\n    * rename\n    * covert param to object\n    * create data class\n    * change signature\n    * use loadash to make code to be clearly intention\n\n#### Refactor vs Rewrite\n* Refactor: 行為與之前一樣，但代碼可讀性更高\n* Rewrite : 行為未必與之前一樣。\n* 異動範圍大小\n* 流程與結構的不同\n\n## Day2\n被提取出來的私有class，與私有方法，只要是只有被測試公開方法給涵蓋，且只有這些再用，就不必再額外寫測試。除非它後來有其他其他未被涵蓋測試的公開方法給引用。除非後來因為這些被提取的部分出bug，再補充其測試。\n\n* Refactor\n    * 擁抱變化\n    * 從legacy code 實現 演進式設計\n* 建築 vs software design\n    * 藍圖 –build–> 建築\n    * 代碼 –build–> 軟體\n    * UML 用來與人溝通，一致化想法用的語言，並非藍圖\n* JS 不一定適合套用design pattern, 只有少數的pattern適用\n\n* Legacy code type :\n    * new feature\n    * stable (已經上無數補丁，正在運行中)\n    * unused\n\n### Lesson 2\n* MVC vs MVP\n    * MVC的進入點是controller -> Model -> Controller -> View\n    * MVP的進入點式VIEW -> Presenter -> Model -> Presenter -> View\n* Tell, Don’t ask -> Design principle\n\n* 防衛性編程\n```\nfun A(xxx) {\n    if(A) ...\n    return ___;\n}\nlet a = A(param);\nif(a) {\n    ....\n}\n```\n\n* 在進入口做防範驗證，內部邏輯別做太多返回值的判斷。\n* 調用者保證參數有效，被調用者保證返回值有效\n* Design Contract\n* 給予 default value; 別用null 表達某一種邏輯\n* Null object pattern\n* architecture\n* view model\n* presenter\n* business model\n* dto、dao\n\n\n### Smells\n* 註解\n    * 不適當的訊息 Inappropriate Information : 註釋只應該描述有關代碼跟設計的技術性訊息，不該帶作者、最後修改時間等。 因為GIT上會記錄。\n    * 廢棄的註解 Obsolete Comment:不正確或無關的註解。\n    * 冗餘註解\n    * 糟糕的註解\n    * 註解掉的代碼  \n\n* 方法\n    * 過多的參數 Too Many Arguments : 盡量少，沒參數最好，超過3個就要避免。\n    * 輸出參數 Output Arguments: appendFooter(s) 不如把footer設定在物件屬性內，再呼叫report.appendFoorer()\n    * 標示參數 Flag Arguments\n\n```\n//pseudo-code\nclass Concert...\n  public Booking book (Customer aCustomer, boolean isPremium) {...}\n```\n```\npublic Booking regularBook(Customer aCustomer) {...}\npublic Booking premiumBook(Customer aCustomer) {...}\n```\n\n    * 死方法 Dead Function\n\n* 一般問題\n    * 重複 DRY (Don’t Repeat Yourself): 資料庫正規化，物件導向繼承\n    * 接口提供過多 Too Much Information\n    * 特性依戀 Feature Envy: 類別的方法只對類中的屬性跟方法有興趣，不該依靠其他類中的變數跟方法。顯然是「內聚力」不夠的一種現象","slug":"JS-Clean-Code訓練營","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmc000rck6xxg9hzqjv","content":"<p><img src=\"/images/Refactor/51ta2ZRmPeL.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一天 :</span><br><span class=\"line\">有效的单元测试</span><br><span class=\"line\">识别依赖</span><br><span class=\"line\">隔离依赖</span><br><span class=\"line\">前端逻辑的常见剥离方式</span><br><span class=\"line\">Stub与Mock</span><br><span class=\"line\">处理Callback和Promise</span><br><span class=\"line\">第二天 : </span><br><span class=\"line\">小步重构</span><br><span class=\"line\">识别代码臭味</span><br><span class=\"line\">处理代码臭味的技巧</span><br><span class=\"line\">良好设计的基本原则</span><br><span class=\"line\">消除重复，降低复杂度</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1 :\"></a>Day1 :</h2><h3 id=\"Lesson-1\"><a href=\"#Lesson-1\" class=\"headerlink\" title=\"Lesson 1:\"></a>Lesson 1:</h3><p>1 .FizzBuzz</p>\n<p>數學歸納法: n =1 =&gt; n+1 ok<br>一個it test, 通常證明2個test case</p>\n<p>Vue_Header profileCaption test</p>\n<h3 id=\"Lesson-2\"><a href=\"#Lesson-2\" class=\"headerlink\" title=\"Lesson 2:\"></a>Lesson 2:</h3><p>單元測試的好處:</p>\n<ul>\n<li>“提早”得知程式碼是否有漏洞; 提早設置check point。</li>\n<li>回歸測試</li>\n<li>自動運行</li>\n<li>說明文件</li>\n<li>建立可重複利用的元件</li>\n<li>任何測試案例應該是獨立的</li>\n<li>使用者角度去做測試案例</li>\n<li>private method不應該被特別測試，因為第7點的關係，使用者只在意公開方法，且私有方法一定會被公開方法給使用到。</li>\n<li>基本上單元測試，都是黑盒測試，因為只在意輸出入。</li>\n<li>單元測試要快</li>\n<li>使用類似jest的框架，整合模擬測試ui上的行為</li>\n</ul>\n<h3 id=\"Lesson-3\"><a href=\"#Lesson-3\" class=\"headerlink\" title=\"Lesson 3 :\"></a>Lesson 3 :</h3><p>物件導向設計原則:</p>\n<ul>\n<li>組件 應該要具備 高內聚、低耦合 的特性</li>\n<li>物件導向的繼承關係，就是高耦合</li>\n<li>只要function內有new()，也是高耦合</li>\n</ul>\n<p>Stub : state change<br>Mock : behavior test (called, parameter…)</p>\n<h3 id=\"Lesson-4\"><a href=\"#Lesson-4\" class=\"headerlink\" title=\"Lesson 4:\"></a>Lesson 4:</h3><p>一一一一一一一一一一一一一一一一一一一<br>UT —————————–&gt; IT</p>\n<ul>\n<li><p>Unit Test:</p>\n<ul>\n<li>速度快</li>\n<li>程式少</li>\n<li>定位問題簡單</li>\n<li>代碼依賴剝離 成本高</li>\n<li>無網路、文檔讀寫、外部第三方套件、跟運行環境無關的、與配置無關</li>\n</ul>\n</li>\n<li><p>Integration Test:</p>\n<ul>\n<li>速度慢</li>\n<li>程式多</li>\n<li>定位問題多</li>\n<li>代碼依賴剝離 成本低</li>\n<li>前端的UI</li>\n<li>異步執行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Refactoring\"><a href=\"#Refactoring\" class=\"headerlink\" title=\"Refactoring\"></a>Refactoring</h4><ul>\n<li><p>moment.js(會修改自身，產生副作用) -&gt; date.js</p>\n</li>\n<li><p>budget.js</p>\n<ul>\n<li>if 有return , else也return</li>\n<li>remove else</li>\n<li>重複的邏輯 -&gt; extract method</li>\n<li>可讀性低 || 註解 (因為怕看不懂，所以加註解)</li>\n</ul>\n</li>\n<li><p>code smell</p>\n<ul>\n<li>長方法 long method代碼行數過長 (code standard by group define)</li>\n<li>多種數據結構 使用同一個數據 表達同一件事情。startDate &amp; endDate 進來後被轉成兩種不同的變數。</li>\n<li>duplicate logic(code)</li>\n<li>temporary variable(Field) -&gt; Inline Temp</li>\n<li>令人費解的命名 (不把型別加入命名中) -&gt; *Rename method</li>\n<li>clearly intention</li>\n<li>資料謎團 data clump</li>\n<li>抽象干擾 Abstraction Distraction</li>\n<li>特性忌妒 Feature Envy</li>\n<li>基礎型別偏執 primitive obssession</li>\n</ul>\n</li>\n<li><p>how</p>\n<ul>\n<li>use inline option</li>\n<li>delete useless codes</li>\n<li>delete duplicate codes ; 先讓疑似重複的部分盡可能變得一樣，別一開始就提取代碼。</li>\n<li>extract method</li>\n<li>rename</li>\n<li>covert param to object</li>\n<li>create data class</li>\n<li>change signature</li>\n<li>use loadash to make code to be clearly intention</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Refactor-vs-Rewrite\"><a href=\"#Refactor-vs-Rewrite\" class=\"headerlink\" title=\"Refactor vs Rewrite\"></a>Refactor vs Rewrite</h4><ul>\n<li>Refactor: 行為與之前一樣，但代碼可讀性更高</li>\n<li>Rewrite : 行為未必與之前一樣。</li>\n<li>異動範圍大小</li>\n<li>流程與結構的不同</li>\n</ul>\n<h2 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h2><p>被提取出來的私有class，與私有方法，只要是只有被測試公開方法給涵蓋，且只有這些再用，就不必再額外寫測試。除非它後來有其他其他未被涵蓋測試的公開方法給引用。除非後來因為這些被提取的部分出bug，再補充其測試。</p>\n<ul>\n<li><p>Refactor</p>\n<ul>\n<li>擁抱變化</li>\n<li>從legacy code 實現 演進式設計</li>\n</ul>\n</li>\n<li><p>建築 vs software design</p>\n<ul>\n<li>藍圖 –build–&gt; 建築</li>\n<li>代碼 –build–&gt; 軟體</li>\n<li>UML 用來與人溝通，一致化想法用的語言，並非藍圖</li>\n</ul>\n</li>\n<li><p>JS 不一定適合套用design pattern, 只有少數的pattern適用</p>\n</li>\n<li><p>Legacy code type :</p>\n<ul>\n<li>new feature</li>\n<li>stable (已經上無數補丁，正在運行中)</li>\n<li>unused</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Lesson-2-1\"><a href=\"#Lesson-2-1\" class=\"headerlink\" title=\"Lesson 2\"></a>Lesson 2</h3><ul>\n<li><p>MVC vs MVP</p>\n<ul>\n<li>MVC的進入點是controller -&gt; Model -&gt; Controller -&gt; View</li>\n<li>MVP的進入點式VIEW -&gt; Presenter -&gt; Model -&gt; Presenter -&gt; View</li>\n</ul>\n</li>\n<li><p>Tell, Don’t ask -&gt; Design principle</p>\n</li>\n<li><p>防衛性編程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun A(xxx) &#123;</span><br><span class=\"line\">    if(A) ...</span><br><span class=\"line\">    return ___;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let a = A(param);</span><br><span class=\"line\">if(a) &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在進入口做防範驗證，內部邏輯別做太多返回值的判斷。</p>\n</li>\n<li><p>調用者保證參數有效，被調用者保證返回值有效</p>\n</li>\n<li><p>Design Contract</p>\n</li>\n<li><p>給予 default value; 別用null 表達某一種邏輯</p>\n</li>\n<li><p>Null object pattern</p>\n</li>\n<li><p>architecture</p>\n</li>\n<li><p>view model</p>\n</li>\n<li><p>presenter</p>\n</li>\n<li><p>business model</p>\n</li>\n<li><p>dto、dao</p>\n</li>\n</ul>\n<h3 id=\"Smells\"><a href=\"#Smells\" class=\"headerlink\" title=\"Smells\"></a>Smells</h3><ul>\n<li><p>註解</p>\n<ul>\n<li>不適當的訊息 Inappropriate Information : 註釋只應該描述有關代碼跟設計的技術性訊息，不該帶作者、最後修改時間等。 因為GIT上會記錄。</li>\n<li>廢棄的註解 Obsolete Comment:不正確或無關的註解。</li>\n<li>冗餘註解</li>\n<li>糟糕的註解</li>\n<li>註解掉的代碼  </li>\n</ul>\n</li>\n<li><p>方法</p>\n<ul>\n<li>過多的參數 Too Many Arguments : 盡量少，沒參數最好，超過3個就要避免。</li>\n<li>輸出參數 Output Arguments: appendFooter(s) 不如把footer設定在物件屬性內，再呼叫report.appendFoorer()</li>\n<li>標示參數 Flag Arguments</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//pseudo-code</span><br><span class=\"line\">class Concert...</span><br><span class=\"line\">  public Booking book (Customer aCustomer, boolean isPremium) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Booking regularBook(Customer aCustomer) &#123;...&#125;</span><br><span class=\"line\">public Booking premiumBook(Customer aCustomer) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>* 死方法 Dead Function</code></pre><ul>\n<li>一般問題<ul>\n<li>重複 DRY (Don’t Repeat Yourself): 資料庫正規化，物件導向繼承</li>\n<li>接口提供過多 Too Much Information</li>\n<li>特性依戀 Feature Envy: 類別的方法只對類中的屬性跟方法有興趣，不該依靠其他類中的變數跟方法。顯然是「內聚力」不夠的一種現象</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/Refactor/51ta2ZRmPeL.jpg\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一天 :</span><br><span class=\"line\">有效的单元测试</span><br><span class=\"line\">识别依赖</span><br><span class=\"line\">隔离依赖</span><br><span class=\"line\">前端逻辑的常见剥离方式</span><br><span class=\"line\">Stub与Mock</span><br><span class=\"line\">处理Callback和Promise</span><br><span class=\"line\">第二天 : </span><br><span class=\"line\">小步重构</span><br><span class=\"line\">识别代码臭味</span><br><span class=\"line\">处理代码臭味的技巧</span><br><span class=\"line\">良好设计的基本原则</span><br><span class=\"line\">消除重复，降低复杂度</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1 :\"></a>Day1 :</h2><h3 id=\"Lesson-1\"><a href=\"#Lesson-1\" class=\"headerlink\" title=\"Lesson 1:\"></a>Lesson 1:</h3><p>1 .FizzBuzz</p>\n<p>數學歸納法: n =1 =&gt; n+1 ok<br>一個it test, 通常證明2個test case</p>\n<p>Vue_Header profileCaption test</p>\n<h3 id=\"Lesson-2\"><a href=\"#Lesson-2\" class=\"headerlink\" title=\"Lesson 2:\"></a>Lesson 2:</h3><p>單元測試的好處:</p>\n<ul>\n<li>“提早”得知程式碼是否有漏洞; 提早設置check point。</li>\n<li>回歸測試</li>\n<li>自動運行</li>\n<li>說明文件</li>\n<li>建立可重複利用的元件</li>\n<li>任何測試案例應該是獨立的</li>\n<li>使用者角度去做測試案例</li>\n<li>private method不應該被特別測試，因為第7點的關係，使用者只在意公開方法，且私有方法一定會被公開方法給使用到。</li>\n<li>基本上單元測試，都是黑盒測試，因為只在意輸出入。</li>\n<li>單元測試要快</li>\n<li>使用類似jest的框架，整合模擬測試ui上的行為</li>\n</ul>\n<h3 id=\"Lesson-3\"><a href=\"#Lesson-3\" class=\"headerlink\" title=\"Lesson 3 :\"></a>Lesson 3 :</h3><p>物件導向設計原則:</p>\n<ul>\n<li>組件 應該要具備 高內聚、低耦合 的特性</li>\n<li>物件導向的繼承關係，就是高耦合</li>\n<li>只要function內有new()，也是高耦合</li>\n</ul>\n<p>Stub : state change<br>Mock : behavior test (called, parameter…)</p>\n<h3 id=\"Lesson-4\"><a href=\"#Lesson-4\" class=\"headerlink\" title=\"Lesson 4:\"></a>Lesson 4:</h3><p>一一一一一一一一一一一一一一一一一一一<br>UT —————————–&gt; IT</p>\n<ul>\n<li><p>Unit Test:</p>\n<ul>\n<li>速度快</li>\n<li>程式少</li>\n<li>定位問題簡單</li>\n<li>代碼依賴剝離 成本高</li>\n<li>無網路、文檔讀寫、外部第三方套件、跟運行環境無關的、與配置無關</li>\n</ul>\n</li>\n<li><p>Integration Test:</p>\n<ul>\n<li>速度慢</li>\n<li>程式多</li>\n<li>定位問題多</li>\n<li>代碼依賴剝離 成本低</li>\n<li>前端的UI</li>\n<li>異步執行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Refactoring\"><a href=\"#Refactoring\" class=\"headerlink\" title=\"Refactoring\"></a>Refactoring</h4><ul>\n<li><p>moment.js(會修改自身，產生副作用) -&gt; date.js</p>\n</li>\n<li><p>budget.js</p>\n<ul>\n<li>if 有return , else也return</li>\n<li>remove else</li>\n<li>重複的邏輯 -&gt; extract method</li>\n<li>可讀性低 || 註解 (因為怕看不懂，所以加註解)</li>\n</ul>\n</li>\n<li><p>code smell</p>\n<ul>\n<li>長方法 long method代碼行數過長 (code standard by group define)</li>\n<li>多種數據結構 使用同一個數據 表達同一件事情。startDate &amp; endDate 進來後被轉成兩種不同的變數。</li>\n<li>duplicate logic(code)</li>\n<li>temporary variable(Field) -&gt; Inline Temp</li>\n<li>令人費解的命名 (不把型別加入命名中) -&gt; *Rename method</li>\n<li>clearly intention</li>\n<li>資料謎團 data clump</li>\n<li>抽象干擾 Abstraction Distraction</li>\n<li>特性忌妒 Feature Envy</li>\n<li>基礎型別偏執 primitive obssession</li>\n</ul>\n</li>\n<li><p>how</p>\n<ul>\n<li>use inline option</li>\n<li>delete useless codes</li>\n<li>delete duplicate codes ; 先讓疑似重複的部分盡可能變得一樣，別一開始就提取代碼。</li>\n<li>extract method</li>\n<li>rename</li>\n<li>covert param to object</li>\n<li>create data class</li>\n<li>change signature</li>\n<li>use loadash to make code to be clearly intention</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Refactor-vs-Rewrite\"><a href=\"#Refactor-vs-Rewrite\" class=\"headerlink\" title=\"Refactor vs Rewrite\"></a>Refactor vs Rewrite</h4><ul>\n<li>Refactor: 行為與之前一樣，但代碼可讀性更高</li>\n<li>Rewrite : 行為未必與之前一樣。</li>\n<li>異動範圍大小</li>\n<li>流程與結構的不同</li>\n</ul>\n<h2 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h2><p>被提取出來的私有class，與私有方法，只要是只有被測試公開方法給涵蓋，且只有這些再用，就不必再額外寫測試。除非它後來有其他其他未被涵蓋測試的公開方法給引用。除非後來因為這些被提取的部分出bug，再補充其測試。</p>\n<ul>\n<li><p>Refactor</p>\n<ul>\n<li>擁抱變化</li>\n<li>從legacy code 實現 演進式設計</li>\n</ul>\n</li>\n<li><p>建築 vs software design</p>\n<ul>\n<li>藍圖 –build–&gt; 建築</li>\n<li>代碼 –build–&gt; 軟體</li>\n<li>UML 用來與人溝通，一致化想法用的語言，並非藍圖</li>\n</ul>\n</li>\n<li><p>JS 不一定適合套用design pattern, 只有少數的pattern適用</p>\n</li>\n<li><p>Legacy code type :</p>\n<ul>\n<li>new feature</li>\n<li>stable (已經上無數補丁，正在運行中)</li>\n<li>unused</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Lesson-2-1\"><a href=\"#Lesson-2-1\" class=\"headerlink\" title=\"Lesson 2\"></a>Lesson 2</h3><ul>\n<li><p>MVC vs MVP</p>\n<ul>\n<li>MVC的進入點是controller -&gt; Model -&gt; Controller -&gt; View</li>\n<li>MVP的進入點式VIEW -&gt; Presenter -&gt; Model -&gt; Presenter -&gt; View</li>\n</ul>\n</li>\n<li><p>Tell, Don’t ask -&gt; Design principle</p>\n</li>\n<li><p>防衛性編程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun A(xxx) &#123;</span><br><span class=\"line\">    if(A) ...</span><br><span class=\"line\">    return ___;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let a = A(param);</span><br><span class=\"line\">if(a) &#123;</span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在進入口做防範驗證，內部邏輯別做太多返回值的判斷。</p>\n</li>\n<li><p>調用者保證參數有效，被調用者保證返回值有效</p>\n</li>\n<li><p>Design Contract</p>\n</li>\n<li><p>給予 default value; 別用null 表達某一種邏輯</p>\n</li>\n<li><p>Null object pattern</p>\n</li>\n<li><p>architecture</p>\n</li>\n<li><p>view model</p>\n</li>\n<li><p>presenter</p>\n</li>\n<li><p>business model</p>\n</li>\n<li><p>dto、dao</p>\n</li>\n</ul>\n<h3 id=\"Smells\"><a href=\"#Smells\" class=\"headerlink\" title=\"Smells\"></a>Smells</h3><ul>\n<li><p>註解</p>\n<ul>\n<li>不適當的訊息 Inappropriate Information : 註釋只應該描述有關代碼跟設計的技術性訊息，不該帶作者、最後修改時間等。 因為GIT上會記錄。</li>\n<li>廢棄的註解 Obsolete Comment:不正確或無關的註解。</li>\n<li>冗餘註解</li>\n<li>糟糕的註解</li>\n<li>註解掉的代碼  </li>\n</ul>\n</li>\n<li><p>方法</p>\n<ul>\n<li>過多的參數 Too Many Arguments : 盡量少，沒參數最好，超過3個就要避免。</li>\n<li>輸出參數 Output Arguments: appendFooter(s) 不如把footer設定在物件屬性內，再呼叫report.appendFoorer()</li>\n<li>標示參數 Flag Arguments</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//pseudo-code</span><br><span class=\"line\">class Concert...</span><br><span class=\"line\">  public Booking book (Customer aCustomer, boolean isPremium) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Booking regularBook(Customer aCustomer) &#123;...&#125;</span><br><span class=\"line\">public Booking premiumBook(Customer aCustomer) &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>* 死方法 Dead Function</code></pre><ul>\n<li>一般問題<ul>\n<li>重複 DRY (Don’t Repeat Yourself): 資料庫正規化，物件導向繼承</li>\n<li>接口提供過多 Too Much Information</li>\n<li>特性依戀 Feature Envy: 類別的方法只對類中的屬性跟方法有興趣，不該依靠其他類中的變數跟方法。顯然是「內聚力」不夠的一種現象</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Multi and LuaScript for Redis","date":"2019-03-16T06:03:05.000Z","_content":"## Multi? What is it?\n主要執行multi和exec包圍起來的部分，當multi命令發出，redis會進入transaction狀態，redis會進入blocking，不再處理其他請求，直到發出multi的session發出exec命令為止。\n被multi和exec包圍起來的命令們進入獨享redis的過程，直到執行完成。\n因為是transction，所以命令要全部執行完畢，不然就是都不執行。\n如果exec命令送出前，client斷線，redis會清空transction queue，所有命令都不會執行。\n一但client送出了exec命令，所有命列就會被執行，就算client斷線了也無訪。\n\n如果transction過程中，要執行3個命令 1、2、3，其中2出錯了，不會像db那樣整個rollback，依然會執行到完。\n\n透過這種方式，redis就能避免多個client同時訪問，出現讀寫不一致的情況，來完成atomic transction操作。\n![](/images/Redis/TbzqlS7.png)\n\n還有DISCARD (取消transcation)、WATCH(監控某個KEY，只要被更動，則transction無法被觸發，exec會得到nil)\n![](/images/Redis/Qqmv4m2.png)\n由於Multi是把命令逐條發送給redis server，server還會回應QUEUED，並且最後還要回應執行結果，所以封包數量上其實比平常都多，效率也近乎最低的。\n\n## Pipeline?\n一次執行多條命令，無關atomic，網路封包數量也最少。\n有機會再筆記。\n\n## Why use Lua Script to access Redis?\n* 當需要對redis下多個命令，且每一個命令就是一次網路傳輸。\n* 多個指令中，後面的指令依賴前一個操作的結果時。\n* Redis依然是 單執行緒下執行依序執行這些操作。\n* 如果Lua script本身內容很多，可以先把lua script載入redis, redis會返回一組SHA字串，以後就直接傳遞這SHA字串即可替代原內容。\n* 可以組合多個命令，且該次執行本身也是atomic操作。\n* 支援base、[table](http://huli.logdown.com/posts/198866-lua-table)(array)、string、match、debug、[cjson](https://www.kyne.com.au/~mark/software/lua-cjson-manual.html)、[cmspack](https://github.com/antirez/lua-cmsgpack)。\n\n```\n情境 :\nHotYoutubers 是以sorted set結構存放，\n檢查要是youtuber不再名單內，則新增\n要是在名單內了，則score + 1\n```\n\nInitial Data\n```javascript\nconst youtubers = ['理科太太', '赤井Akai', 'D Rebound 99', '融融歷險記', '志祺七七X圖文不符', '閃亮胖時代','只會玩刀鋒', 'Ken桑', '尬酒螺仔', '我們Our channel'];\nconst voteCnt = [10000, 9999, 8999, 8000, 8001, 9383, 5345, 6864, 1384, 5131];\nconst newYoutubers = ['华农兄弟'];\nconst key = \"HotRanks\";\nconst youtuberListKey = \"Youtubers\";\nconst promiseArray: any[]  = [];\nyoutubers.map(d => promiseArray.push(d));\nawait Promise.all(youtubers.map(d) => {\n    redisClient.SADD(\"KEYA\", d);\n});\n```\n\n**不使用Multi**\n```javascript\nclient.zscan(key, \"0\" , \"MATCH\", youtubers[0], (err, reply) => {\n    if(err){\n        console.error({\n            error: err,\n            key: key,\n            target:  youtubers[0]\n        })\n        return ;\n    }\n    if(reply[1].length > 0) {\n        console.log(`${youtubers[0]} increase score`);\n        client.zincrby(key, 1, youtubers[0]);\n    } else {\n        console.log(\"add new youtuber\");\n        client.zadd(key, 1, youtubers[0]);\n    }\n});\n```\n\n網路封包 : 5個封包\n![](/images/Redis/VDOhrRC.png)\n\n**使用Multi**\n```javascript\n    client\n    .multi()\n    .zscan(key, \"0\" , \"MATCH\", youtubers[0])\n    .zincrby(key, 1, youtubers[0])\n    .zrevrange(key, 0 , 10)\n    .exec((err, replies) => {\n        if(err){\n            console.error({\n                error: err,\n                key: key,\n                target:  youtubers[0]\n            })\n            return ;\n        }\n        console.dir(replies);\n        if(replies[0][1].length > 0) {\n            console.log(`${youtubers[0]} increase score`);\n        } else {\n            console.log(\"add new youtuber\");\n        }\n    })\n結果 :\n[ [ '0', [ '理科太太', '10007' ] ],\n  '10008',\n  [ '理科太太',\n    '赤井Akai',\n    '閃亮胖時代',\n    'D Rebound 99',\n    '志祺七七X圖文不符',\n    '融融歷險記',\n    'Ken桑',\n    '只會玩刀鋒',\n    '我們Our channel',\n    '尬酒螺仔' ] ]\n理科太太 increase score\n```\n\n封包數量 : 3個, 一個是multi起transaction,並把命令們丟進去queue，等到exec被發出調用，一次返回全部命令的結果。\n![](/images/Redis/x21LwjK.png)  \n\n**But!!!**\n不方便做到更複雜的需求!\n雖然zincrby在item不存在時，會幫忙新增item，並給上分數。\n但要是想先檢查youtube set內內是否存在此youtuber時就很難了。\n\n* 使用Lua Script 來完成!\n    * 先檢查youtuber清單 “Youtubers”\n    * youtuber存在，則增加分數\n    * youtuber不存在，則回傳nil\n\nNotes :\n`Lua的array都是從1開始的。\nclient.eval(luaScript, 2, key, youtuberListKey, newYoutubers[0]; 這段的2是告訴redis有兩個Key在KEYS[]當中，而在這所引外的都會是在ARGV[]當中了。\n宣告變數是用local這關鍵字宣告\nlua的null是nill\n如果變數x是table(即arry)類型，要使用 則使用#x 來使用; 例如取得x的陣列長度 #x.length\n想要對table類型做歷尋有以下方式\n使用ipair探索table中的陣列部分, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair\n使用pairs探索table中所有資料, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair`\n\n\n```javascript\nconst luaScript = 'local youtuber = redis.call(\"HEXISTS\", KEYS[2], ARGV[1]) \\\nif(youtuber == 0) then \\\n  return nil \\\nelse \\\n  return redis.call(\"zincrby\", KEYS[1], 1, ARGV[1]) \\\nend ';\nclient.eval(luaScript, 2, key, youtuberListKey, newYoutubers[0], (err, replies) => {\n            if(err){\n                console.error({\n                    error: err,\n                    key: key,\n                    target:  youtubers[0]\n                })\n                return ;\n            }\n            console.dir(replies);\n        })\n// 結果 : null\nclient.eval(luaScript, 2, key, youtuberListKey, youtubers[0], (err, replies) => {\n            if(err){\n                console.error({\n                    error: err,\n                    key: key,\n                    target:  youtubers[0]\n                })\n                return ;\n            }\n            console.dir(replies);\n        })\n// 結果 : '10010'\n```\n\n封包數量 : 3, 同Multi\n![](/images/Redis/j6fwoVP.png)\n\n\n*But!!!*\n每次執行都要送這些腳本以及編譯，有沒有方法省掉呢?\nYes!!!\n先把script透過script load載入，會得到一串hash string。\n以後執行evalsha跟這hash string即可。\n```javascript\nlet hashScript: string;\nclient.script('load', luaScript, (err, res) => {\n    console.dir(res);\n    // 'aa838cb2f4f84408889222a7af3bec845f126ba8'\n    hashScript = res;\n})\nclient.evalsha(hashScript, 2, key, youtuberListKey, youtubers[0], (err, replies) => {\n            if(err){\n                console.error({\n                    error: err,\n                    key: key,\n                    target:  youtubers[0]\n                })\n                return ;\n            }\n            console.dir(replies);\n        })\n```\n\nRedis能做到的事情蠻多的，不只是能當快取，透過Lua腳本，也能簡單的做些關聯查詢。\n只是它畢竟是單執行緒，要是被這任務卡住太久，就喪失快取的意義了。\n\n日後有機會再筆記PUB/SUB，我在實務上的簡單應用。\n最主要的還是他的叢集架設與資料同步/備份的部分。","source":"_posts/Multi-and-LuaScript-for-Redis.md","raw":"---\ntitle: Multi and LuaScript for Redis\ndate: 2019-03-16 14:03:05\ntags:\n    - Redis\n    - Lua\n---\n## Multi? What is it?\n主要執行multi和exec包圍起來的部分，當multi命令發出，redis會進入transaction狀態，redis會進入blocking，不再處理其他請求，直到發出multi的session發出exec命令為止。\n被multi和exec包圍起來的命令們進入獨享redis的過程，直到執行完成。\n因為是transction，所以命令要全部執行完畢，不然就是都不執行。\n如果exec命令送出前，client斷線，redis會清空transction queue，所有命令都不會執行。\n一但client送出了exec命令，所有命列就會被執行，就算client斷線了也無訪。\n\n如果transction過程中，要執行3個命令 1、2、3，其中2出錯了，不會像db那樣整個rollback，依然會執行到完。\n\n透過這種方式，redis就能避免多個client同時訪問，出現讀寫不一致的情況，來完成atomic transction操作。\n![](/images/Redis/TbzqlS7.png)\n\n還有DISCARD (取消transcation)、WATCH(監控某個KEY，只要被更動，則transction無法被觸發，exec會得到nil)\n![](/images/Redis/Qqmv4m2.png)\n由於Multi是把命令逐條發送給redis server，server還會回應QUEUED，並且最後還要回應執行結果，所以封包數量上其實比平常都多，效率也近乎最低的。\n\n## Pipeline?\n一次執行多條命令，無關atomic，網路封包數量也最少。\n有機會再筆記。\n\n## Why use Lua Script to access Redis?\n* 當需要對redis下多個命令，且每一個命令就是一次網路傳輸。\n* 多個指令中，後面的指令依賴前一個操作的結果時。\n* Redis依然是 單執行緒下執行依序執行這些操作。\n* 如果Lua script本身內容很多，可以先把lua script載入redis, redis會返回一組SHA字串，以後就直接傳遞這SHA字串即可替代原內容。\n* 可以組合多個命令，且該次執行本身也是atomic操作。\n* 支援base、[table](http://huli.logdown.com/posts/198866-lua-table)(array)、string、match、debug、[cjson](https://www.kyne.com.au/~mark/software/lua-cjson-manual.html)、[cmspack](https://github.com/antirez/lua-cmsgpack)。\n\n```\n情境 :\nHotYoutubers 是以sorted set結構存放，\n檢查要是youtuber不再名單內，則新增\n要是在名單內了，則score + 1\n```\n\nInitial Data\n```javascript\nconst youtubers = ['理科太太', '赤井Akai', 'D Rebound 99', '融融歷險記', '志祺七七X圖文不符', '閃亮胖時代','只會玩刀鋒', 'Ken桑', '尬酒螺仔', '我們Our channel'];\nconst voteCnt = [10000, 9999, 8999, 8000, 8001, 9383, 5345, 6864, 1384, 5131];\nconst newYoutubers = ['华农兄弟'];\nconst key = \"HotRanks\";\nconst youtuberListKey = \"Youtubers\";\nconst promiseArray: any[]  = [];\nyoutubers.map(d => promiseArray.push(d));\nawait Promise.all(youtubers.map(d) => {\n    redisClient.SADD(\"KEYA\", d);\n});\n```\n\n**不使用Multi**\n```javascript\nclient.zscan(key, \"0\" , \"MATCH\", youtubers[0], (err, reply) => {\n    if(err){\n        console.error({\n            error: err,\n            key: key,\n            target:  youtubers[0]\n        })\n        return ;\n    }\n    if(reply[1].length > 0) {\n        console.log(`${youtubers[0]} increase score`);\n        client.zincrby(key, 1, youtubers[0]);\n    } else {\n        console.log(\"add new youtuber\");\n        client.zadd(key, 1, youtubers[0]);\n    }\n});\n```\n\n網路封包 : 5個封包\n![](/images/Redis/VDOhrRC.png)\n\n**使用Multi**\n```javascript\n    client\n    .multi()\n    .zscan(key, \"0\" , \"MATCH\", youtubers[0])\n    .zincrby(key, 1, youtubers[0])\n    .zrevrange(key, 0 , 10)\n    .exec((err, replies) => {\n        if(err){\n            console.error({\n                error: err,\n                key: key,\n                target:  youtubers[0]\n            })\n            return ;\n        }\n        console.dir(replies);\n        if(replies[0][1].length > 0) {\n            console.log(`${youtubers[0]} increase score`);\n        } else {\n            console.log(\"add new youtuber\");\n        }\n    })\n結果 :\n[ [ '0', [ '理科太太', '10007' ] ],\n  '10008',\n  [ '理科太太',\n    '赤井Akai',\n    '閃亮胖時代',\n    'D Rebound 99',\n    '志祺七七X圖文不符',\n    '融融歷險記',\n    'Ken桑',\n    '只會玩刀鋒',\n    '我們Our channel',\n    '尬酒螺仔' ] ]\n理科太太 increase score\n```\n\n封包數量 : 3個, 一個是multi起transaction,並把命令們丟進去queue，等到exec被發出調用，一次返回全部命令的結果。\n![](/images/Redis/x21LwjK.png)  \n\n**But!!!**\n不方便做到更複雜的需求!\n雖然zincrby在item不存在時，會幫忙新增item，並給上分數。\n但要是想先檢查youtube set內內是否存在此youtuber時就很難了。\n\n* 使用Lua Script 來完成!\n    * 先檢查youtuber清單 “Youtubers”\n    * youtuber存在，則增加分數\n    * youtuber不存在，則回傳nil\n\nNotes :\n`Lua的array都是從1開始的。\nclient.eval(luaScript, 2, key, youtuberListKey, newYoutubers[0]; 這段的2是告訴redis有兩個Key在KEYS[]當中，而在這所引外的都會是在ARGV[]當中了。\n宣告變數是用local這關鍵字宣告\nlua的null是nill\n如果變數x是table(即arry)類型，要使用 則使用#x 來使用; 例如取得x的陣列長度 #x.length\n想要對table類型做歷尋有以下方式\n使用ipair探索table中的陣列部分, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair\n使用pairs探索table中所有資料, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair`\n\n\n```javascript\nconst luaScript = 'local youtuber = redis.call(\"HEXISTS\", KEYS[2], ARGV[1]) \\\nif(youtuber == 0) then \\\n  return nil \\\nelse \\\n  return redis.call(\"zincrby\", KEYS[1], 1, ARGV[1]) \\\nend ';\nclient.eval(luaScript, 2, key, youtuberListKey, newYoutubers[0], (err, replies) => {\n            if(err){\n                console.error({\n                    error: err,\n                    key: key,\n                    target:  youtubers[0]\n                })\n                return ;\n            }\n            console.dir(replies);\n        })\n// 結果 : null\nclient.eval(luaScript, 2, key, youtuberListKey, youtubers[0], (err, replies) => {\n            if(err){\n                console.error({\n                    error: err,\n                    key: key,\n                    target:  youtubers[0]\n                })\n                return ;\n            }\n            console.dir(replies);\n        })\n// 結果 : '10010'\n```\n\n封包數量 : 3, 同Multi\n![](/images/Redis/j6fwoVP.png)\n\n\n*But!!!*\n每次執行都要送這些腳本以及編譯，有沒有方法省掉呢?\nYes!!!\n先把script透過script load載入，會得到一串hash string。\n以後執行evalsha跟這hash string即可。\n```javascript\nlet hashScript: string;\nclient.script('load', luaScript, (err, res) => {\n    console.dir(res);\n    // 'aa838cb2f4f84408889222a7af3bec845f126ba8'\n    hashScript = res;\n})\nclient.evalsha(hashScript, 2, key, youtuberListKey, youtubers[0], (err, replies) => {\n            if(err){\n                console.error({\n                    error: err,\n                    key: key,\n                    target:  youtubers[0]\n                })\n                return ;\n            }\n            console.dir(replies);\n        })\n```\n\nRedis能做到的事情蠻多的，不只是能當快取，透過Lua腳本，也能簡單的做些關聯查詢。\n只是它畢竟是單執行緒，要是被這任務卡住太久，就喪失快取的意義了。\n\n日後有機會再筆記PUB/SUB，我在實務上的簡單應用。\n最主要的還是他的叢集架設與資料同步/備份的部分。","slug":"Multi-and-LuaScript-for-Redis","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmd000vck6xl4dehyug","content":"<h2 id=\"Multi-What-is-it\"><a href=\"#Multi-What-is-it\" class=\"headerlink\" title=\"Multi? What is it?\"></a>Multi? What is it?</h2><p>主要執行multi和exec包圍起來的部分，當multi命令發出，redis會進入transaction狀態，redis會進入blocking，不再處理其他請求，直到發出multi的session發出exec命令為止。<br>被multi和exec包圍起來的命令們進入獨享redis的過程，直到執行完成。<br>因為是transction，所以命令要全部執行完畢，不然就是都不執行。<br>如果exec命令送出前，client斷線，redis會清空transction queue，所有命令都不會執行。<br>一但client送出了exec命令，所有命列就會被執行，就算client斷線了也無訪。</p>\n<p>如果transction過程中，要執行3個命令 1、2、3，其中2出錯了，不會像db那樣整個rollback，依然會執行到完。</p>\n<p>透過這種方式，redis就能避免多個client同時訪問，出現讀寫不一致的情況，來完成atomic transction操作。<br><img src=\"/images/Redis/TbzqlS7.png\" alt></p>\n<p>還有DISCARD (取消transcation)、WATCH(監控某個KEY，只要被更動，則transction無法被觸發，exec會得到nil)<br><img src=\"/images/Redis/Qqmv4m2.png\" alt><br>由於Multi是把命令逐條發送給redis server，server還會回應QUEUED，並且最後還要回應執行結果，所以封包數量上其實比平常都多，效率也近乎最低的。</p>\n<h2 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline?\"></a>Pipeline?</h2><p>一次執行多條命令，無關atomic，網路封包數量也最少。<br>有機會再筆記。</p>\n<h2 id=\"Why-use-Lua-Script-to-access-Redis\"><a href=\"#Why-use-Lua-Script-to-access-Redis\" class=\"headerlink\" title=\"Why use Lua Script to access Redis?\"></a>Why use Lua Script to access Redis?</h2><ul>\n<li>當需要對redis下多個命令，且每一個命令就是一次網路傳輸。</li>\n<li>多個指令中，後面的指令依賴前一個操作的結果時。</li>\n<li>Redis依然是 單執行緒下執行依序執行這些操作。</li>\n<li>如果Lua script本身內容很多，可以先把lua script載入redis, redis會返回一組SHA字串，以後就直接傳遞這SHA字串即可替代原內容。</li>\n<li>可以組合多個命令，且該次執行本身也是atomic操作。</li>\n<li>支援base、<a href=\"http://huli.logdown.com/posts/198866-lua-table\" target=\"_blank\" rel=\"noopener\">table</a>(array)、string、match、debug、<a href=\"https://www.kyne.com.au/~mark/software/lua-cjson-manual.html\" target=\"_blank\" rel=\"noopener\">cjson</a>、<a href=\"https://github.com/antirez/lua-cmsgpack\" target=\"_blank\" rel=\"noopener\">cmspack</a>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境 :</span><br><span class=\"line\">HotYoutubers 是以sorted set結構存放，</span><br><span class=\"line\">檢查要是youtuber不再名單內，則新增</span><br><span class=\"line\">要是在名單內了，則score + 1</span><br></pre></td></tr></table></figure>\n\n<p>Initial Data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> youtubers = [<span class=\"string\">'理科太太'</span>, <span class=\"string\">'赤井Akai'</span>, <span class=\"string\">'D Rebound 99'</span>, <span class=\"string\">'融融歷險記'</span>, <span class=\"string\">'志祺七七X圖文不符'</span>, <span class=\"string\">'閃亮胖時代'</span>,<span class=\"string\">'只會玩刀鋒'</span>, <span class=\"string\">'Ken桑'</span>, <span class=\"string\">'尬酒螺仔'</span>, <span class=\"string\">'我們Our channel'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> voteCnt = [<span class=\"number\">10000</span>, <span class=\"number\">9999</span>, <span class=\"number\">8999</span>, <span class=\"number\">8000</span>, <span class=\"number\">8001</span>, <span class=\"number\">9383</span>, <span class=\"number\">5345</span>, <span class=\"number\">6864</span>, <span class=\"number\">1384</span>, <span class=\"number\">5131</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newYoutubers = [<span class=\"string\">'华农兄弟'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">\"HotRanks\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> youtuberListKey = <span class=\"string\">\"Youtubers\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> promiseArray: any[]  = [];</span><br><span class=\"line\">youtubers.map(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> promiseArray.push(d));</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(youtubers.map(d) =&gt; &#123;</span><br><span class=\"line\">    redisClient.SADD(<span class=\"string\">\"KEYA\"</span>, d);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>不使用Multi</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.zscan(key, <span class=\"string\">\"0\"</span> , <span class=\"string\">\"MATCH\"</span>, youtubers[<span class=\"number\">0</span>], (err, reply) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">            error: err,</span><br><span class=\"line\">            key: key,</span><br><span class=\"line\">            target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reply[<span class=\"number\">1</span>].length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;youtubers[<span class=\"number\">0</span>]&#125;</span> increase score`</span>);</span><br><span class=\"line\">        client.zincrby(key, <span class=\"number\">1</span>, youtubers[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add new youtuber\"</span>);</span><br><span class=\"line\">        client.zadd(key, <span class=\"number\">1</span>, youtubers[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>網路封包 : 5個封包<br><img src=\"/images/Redis/VDOhrRC.png\" alt></p>\n<p><strong>使用Multi</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    client</span><br><span class=\"line\">    .multi()</span><br><span class=\"line\">    .zscan(key, <span class=\"string\">\"0\"</span> , <span class=\"string\">\"MATCH\"</span>, youtubers[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .zincrby(key, <span class=\"number\">1</span>, youtubers[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .zrevrange(key, <span class=\"number\">0</span> , <span class=\"number\">10</span>)</span><br><span class=\"line\">    .exec(<span class=\"function\">(<span class=\"params\">err, replies</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                error: err,</span><br><span class=\"line\">                key: key,</span><br><span class=\"line\">                target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(replies[<span class=\"number\">0</span>][<span class=\"number\">1</span>].length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;youtubers[<span class=\"number\">0</span>]&#125;</span> increase score`</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add new youtuber\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">結果 :</span><br><span class=\"line\">[ [ <span class=\"string\">'0'</span>, [ <span class=\"string\">'理科太太'</span>, <span class=\"string\">'10007'</span> ] ],</span><br><span class=\"line\">  <span class=\"string\">'10008'</span>,</span><br><span class=\"line\">  [ <span class=\"string\">'理科太太'</span>,</span><br><span class=\"line\">    <span class=\"string\">'赤井Akai'</span>,</span><br><span class=\"line\">    <span class=\"string\">'閃亮胖時代'</span>,</span><br><span class=\"line\">    <span class=\"string\">'D Rebound 99'</span>,</span><br><span class=\"line\">    <span class=\"string\">'志祺七七X圖文不符'</span>,</span><br><span class=\"line\">    <span class=\"string\">'融融歷險記'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ken桑'</span>,</span><br><span class=\"line\">    <span class=\"string\">'只會玩刀鋒'</span>,</span><br><span class=\"line\">    <span class=\"string\">'我們Our channel'</span>,</span><br><span class=\"line\">    <span class=\"string\">'尬酒螺仔'</span> ] ]</span><br><span class=\"line\">理科太太 increase score</span><br></pre></td></tr></table></figure>\n\n<p>封包數量 : 3個, 一個是multi起transaction,並把命令們丟進去queue，等到exec被發出調用，一次返回全部命令的結果。<br><img src=\"/images/Redis/x21LwjK.png\" alt>  </p>\n<p><strong>But!!!</strong><br>不方便做到更複雜的需求!<br>雖然zincrby在item不存在時，會幫忙新增item，並給上分數。<br>但要是想先檢查youtube set內內是否存在此youtuber時就很難了。</p>\n<ul>\n<li>使用Lua Script 來完成!<ul>\n<li>先檢查youtuber清單 “Youtubers”</li>\n<li>youtuber存在，則增加分數</li>\n<li>youtuber不存在，則回傳nil</li>\n</ul>\n</li>\n</ul>\n<p>Notes :<br><code>Lua的array都是從1開始的。\nclient.eval(luaScript, 2, key, youtuberListKey, newYoutubers[0]; 這段的2是告訴redis有兩個Key在KEYS[]當中，而在這所引外的都會是在ARGV[]當中了。\n宣告變數是用local這關鍵字宣告\nlua的null是nill\n如果變數x是table(即arry)類型，要使用 則使用#x 來使用; 例如取得x的陣列長度 #x.length\n想要對table類型做歷尋有以下方式\n使用ipair探索table中的陣列部分, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair\n使用pairs探索table中所有資料, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> luaScript = <span class=\"string\">'local youtuber = redis.call(\"HEXISTS\", KEYS[2], ARGV[1]) \\</span></span><br><span class=\"line\"><span class=\"string\">if(youtuber == 0) then \\</span></span><br><span class=\"line\"><span class=\"string\">  return nil \\</span></span><br><span class=\"line\"><span class=\"string\">else \\</span></span><br><span class=\"line\"><span class=\"string\">  return redis.call(\"zincrby\", KEYS[1], 1, ARGV[1]) \\</span></span><br><span class=\"line\"><span class=\"string\">end '</span>;</span><br><span class=\"line\">client.eval(luaScript, <span class=\"number\">2</span>, key, youtuberListKey, newYoutubers[<span class=\"number\">0</span>], (err, replies) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                    error: err,</span><br><span class=\"line\">                    key: key,</span><br><span class=\"line\">                    target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 結果 : null</span></span><br><span class=\"line\">client.eval(luaScript, <span class=\"number\">2</span>, key, youtuberListKey, youtubers[<span class=\"number\">0</span>], (err, replies) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                    error: err,</span><br><span class=\"line\">                    key: key,</span><br><span class=\"line\">                    target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 結果 : '10010'</span></span><br></pre></td></tr></table></figure>\n\n<p>封包數量 : 3, 同Multi<br><img src=\"/images/Redis/j6fwoVP.png\" alt></p>\n<p><em>But!!!</em><br>每次執行都要送這些腳本以及編譯，有沒有方法省掉呢?<br>Yes!!!<br>先把script透過script load載入，會得到一串hash string。<br>以後執行evalsha跟這hash string即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> hashScript: string;</span><br><span class=\"line\">client.script(<span class=\"string\">'load'</span>, luaScript, (err, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res);</span><br><span class=\"line\">    <span class=\"comment\">// 'aa838cb2f4f84408889222a7af3bec845f126ba8'</span></span><br><span class=\"line\">    hashScript = res;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">client.evalsha(hashScript, <span class=\"number\">2</span>, key, youtuberListKey, youtubers[<span class=\"number\">0</span>], (err, replies) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                    error: err,</span><br><span class=\"line\">                    key: key,</span><br><span class=\"line\">                    target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Redis能做到的事情蠻多的，不只是能當快取，透過Lua腳本，也能簡單的做些關聯查詢。<br>只是它畢竟是單執行緒，要是被這任務卡住太久，就喪失快取的意義了。</p>\n<p>日後有機會再筆記PUB/SUB，我在實務上的簡單應用。<br>最主要的還是他的叢集架設與資料同步/備份的部分。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Multi-What-is-it\"><a href=\"#Multi-What-is-it\" class=\"headerlink\" title=\"Multi? What is it?\"></a>Multi? What is it?</h2><p>主要執行multi和exec包圍起來的部分，當multi命令發出，redis會進入transaction狀態，redis會進入blocking，不再處理其他請求，直到發出multi的session發出exec命令為止。<br>被multi和exec包圍起來的命令們進入獨享redis的過程，直到執行完成。<br>因為是transction，所以命令要全部執行完畢，不然就是都不執行。<br>如果exec命令送出前，client斷線，redis會清空transction queue，所有命令都不會執行。<br>一但client送出了exec命令，所有命列就會被執行，就算client斷線了也無訪。</p>\n<p>如果transction過程中，要執行3個命令 1、2、3，其中2出錯了，不會像db那樣整個rollback，依然會執行到完。</p>\n<p>透過這種方式，redis就能避免多個client同時訪問，出現讀寫不一致的情況，來完成atomic transction操作。<br><img src=\"/images/Redis/TbzqlS7.png\" alt></p>\n<p>還有DISCARD (取消transcation)、WATCH(監控某個KEY，只要被更動，則transction無法被觸發，exec會得到nil)<br><img src=\"/images/Redis/Qqmv4m2.png\" alt><br>由於Multi是把命令逐條發送給redis server，server還會回應QUEUED，並且最後還要回應執行結果，所以封包數量上其實比平常都多，效率也近乎最低的。</p>\n<h2 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline?\"></a>Pipeline?</h2><p>一次執行多條命令，無關atomic，網路封包數量也最少。<br>有機會再筆記。</p>\n<h2 id=\"Why-use-Lua-Script-to-access-Redis\"><a href=\"#Why-use-Lua-Script-to-access-Redis\" class=\"headerlink\" title=\"Why use Lua Script to access Redis?\"></a>Why use Lua Script to access Redis?</h2><ul>\n<li>當需要對redis下多個命令，且每一個命令就是一次網路傳輸。</li>\n<li>多個指令中，後面的指令依賴前一個操作的結果時。</li>\n<li>Redis依然是 單執行緒下執行依序執行這些操作。</li>\n<li>如果Lua script本身內容很多，可以先把lua script載入redis, redis會返回一組SHA字串，以後就直接傳遞這SHA字串即可替代原內容。</li>\n<li>可以組合多個命令，且該次執行本身也是atomic操作。</li>\n<li>支援base、<a href=\"http://huli.logdown.com/posts/198866-lua-table\" target=\"_blank\" rel=\"noopener\">table</a>(array)、string、match、debug、<a href=\"https://www.kyne.com.au/~mark/software/lua-cjson-manual.html\" target=\"_blank\" rel=\"noopener\">cjson</a>、<a href=\"https://github.com/antirez/lua-cmsgpack\" target=\"_blank\" rel=\"noopener\">cmspack</a>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">情境 :</span><br><span class=\"line\">HotYoutubers 是以sorted set結構存放，</span><br><span class=\"line\">檢查要是youtuber不再名單內，則新增</span><br><span class=\"line\">要是在名單內了，則score + 1</span><br></pre></td></tr></table></figure>\n\n<p>Initial Data</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> youtubers = [<span class=\"string\">'理科太太'</span>, <span class=\"string\">'赤井Akai'</span>, <span class=\"string\">'D Rebound 99'</span>, <span class=\"string\">'融融歷險記'</span>, <span class=\"string\">'志祺七七X圖文不符'</span>, <span class=\"string\">'閃亮胖時代'</span>,<span class=\"string\">'只會玩刀鋒'</span>, <span class=\"string\">'Ken桑'</span>, <span class=\"string\">'尬酒螺仔'</span>, <span class=\"string\">'我們Our channel'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> voteCnt = [<span class=\"number\">10000</span>, <span class=\"number\">9999</span>, <span class=\"number\">8999</span>, <span class=\"number\">8000</span>, <span class=\"number\">8001</span>, <span class=\"number\">9383</span>, <span class=\"number\">5345</span>, <span class=\"number\">6864</span>, <span class=\"number\">1384</span>, <span class=\"number\">5131</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> newYoutubers = [<span class=\"string\">'华农兄弟'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">\"HotRanks\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> youtuberListKey = <span class=\"string\">\"Youtubers\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> promiseArray: any[]  = [];</span><br><span class=\"line\">youtubers.map(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> promiseArray.push(d));</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(youtubers.map(d) =&gt; &#123;</span><br><span class=\"line\">    redisClient.SADD(<span class=\"string\">\"KEYA\"</span>, d);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>不使用Multi</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client.zscan(key, <span class=\"string\">\"0\"</span> , <span class=\"string\">\"MATCH\"</span>, youtubers[<span class=\"number\">0</span>], (err, reply) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">            error: err,</span><br><span class=\"line\">            key: key,</span><br><span class=\"line\">            target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reply[<span class=\"number\">1</span>].length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;youtubers[<span class=\"number\">0</span>]&#125;</span> increase score`</span>);</span><br><span class=\"line\">        client.zincrby(key, <span class=\"number\">1</span>, youtubers[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add new youtuber\"</span>);</span><br><span class=\"line\">        client.zadd(key, <span class=\"number\">1</span>, youtubers[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>網路封包 : 5個封包<br><img src=\"/images/Redis/VDOhrRC.png\" alt></p>\n<p><strong>使用Multi</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    client</span><br><span class=\"line\">    .multi()</span><br><span class=\"line\">    .zscan(key, <span class=\"string\">\"0\"</span> , <span class=\"string\">\"MATCH\"</span>, youtubers[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .zincrby(key, <span class=\"number\">1</span>, youtubers[<span class=\"number\">0</span>])</span><br><span class=\"line\">    .zrevrange(key, <span class=\"number\">0</span> , <span class=\"number\">10</span>)</span><br><span class=\"line\">    .exec(<span class=\"function\">(<span class=\"params\">err, replies</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                error: err,</span><br><span class=\"line\">                key: key,</span><br><span class=\"line\">                target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(replies[<span class=\"number\">0</span>][<span class=\"number\">1</span>].length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;youtubers[<span class=\"number\">0</span>]&#125;</span> increase score`</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"add new youtuber\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">結果 :</span><br><span class=\"line\">[ [ <span class=\"string\">'0'</span>, [ <span class=\"string\">'理科太太'</span>, <span class=\"string\">'10007'</span> ] ],</span><br><span class=\"line\">  <span class=\"string\">'10008'</span>,</span><br><span class=\"line\">  [ <span class=\"string\">'理科太太'</span>,</span><br><span class=\"line\">    <span class=\"string\">'赤井Akai'</span>,</span><br><span class=\"line\">    <span class=\"string\">'閃亮胖時代'</span>,</span><br><span class=\"line\">    <span class=\"string\">'D Rebound 99'</span>,</span><br><span class=\"line\">    <span class=\"string\">'志祺七七X圖文不符'</span>,</span><br><span class=\"line\">    <span class=\"string\">'融融歷險記'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Ken桑'</span>,</span><br><span class=\"line\">    <span class=\"string\">'只會玩刀鋒'</span>,</span><br><span class=\"line\">    <span class=\"string\">'我們Our channel'</span>,</span><br><span class=\"line\">    <span class=\"string\">'尬酒螺仔'</span> ] ]</span><br><span class=\"line\">理科太太 increase score</span><br></pre></td></tr></table></figure>\n\n<p>封包數量 : 3個, 一個是multi起transaction,並把命令們丟進去queue，等到exec被發出調用，一次返回全部命令的結果。<br><img src=\"/images/Redis/x21LwjK.png\" alt>  </p>\n<p><strong>But!!!</strong><br>不方便做到更複雜的需求!<br>雖然zincrby在item不存在時，會幫忙新增item，並給上分數。<br>但要是想先檢查youtube set內內是否存在此youtuber時就很難了。</p>\n<ul>\n<li>使用Lua Script 來完成!<ul>\n<li>先檢查youtuber清單 “Youtubers”</li>\n<li>youtuber存在，則增加分數</li>\n<li>youtuber不存在，則回傳nil</li>\n</ul>\n</li>\n</ul>\n<p>Notes :<br><code>Lua的array都是從1開始的。\nclient.eval(luaScript, 2, key, youtuberListKey, newYoutubers[0]; 這段的2是告訴redis有兩個Key在KEYS[]當中，而在這所引外的都會是在ARGV[]當中了。\n宣告變數是用local這關鍵字宣告\nlua的null是nill\n如果變數x是table(即arry)類型，要使用 則使用#x 來使用; 例如取得x的陣列長度 #x.length\n想要對table類型做歷尋有以下方式\n使用ipair探索table中的陣列部分, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair\n使用pairs探索table中所有資料, for k, v in ipair(變數x) do ; k就是k, v則是value, ipair</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> luaScript = <span class=\"string\">'local youtuber = redis.call(\"HEXISTS\", KEYS[2], ARGV[1]) \\</span></span><br><span class=\"line\"><span class=\"string\">if(youtuber == 0) then \\</span></span><br><span class=\"line\"><span class=\"string\">  return nil \\</span></span><br><span class=\"line\"><span class=\"string\">else \\</span></span><br><span class=\"line\"><span class=\"string\">  return redis.call(\"zincrby\", KEYS[1], 1, ARGV[1]) \\</span></span><br><span class=\"line\"><span class=\"string\">end '</span>;</span><br><span class=\"line\">client.eval(luaScript, <span class=\"number\">2</span>, key, youtuberListKey, newYoutubers[<span class=\"number\">0</span>], (err, replies) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                    error: err,</span><br><span class=\"line\">                    key: key,</span><br><span class=\"line\">                    target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 結果 : null</span></span><br><span class=\"line\">client.eval(luaScript, <span class=\"number\">2</span>, key, youtuberListKey, youtubers[<span class=\"number\">0</span>], (err, replies) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                    error: err,</span><br><span class=\"line\">                    key: key,</span><br><span class=\"line\">                    target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 結果 : '10010'</span></span><br></pre></td></tr></table></figure>\n\n<p>封包數量 : 3, 同Multi<br><img src=\"/images/Redis/j6fwoVP.png\" alt></p>\n<p><em>But!!!</em><br>每次執行都要送這些腳本以及編譯，有沒有方法省掉呢?<br>Yes!!!<br>先把script透過script load載入，會得到一串hash string。<br>以後執行evalsha跟這hash string即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> hashScript: string;</span><br><span class=\"line\">client.script(<span class=\"string\">'load'</span>, luaScript, (err, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res);</span><br><span class=\"line\">    <span class=\"comment\">// 'aa838cb2f4f84408889222a7af3bec845f126ba8'</span></span><br><span class=\"line\">    hashScript = res;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">client.evalsha(hashScript, <span class=\"number\">2</span>, key, youtuberListKey, youtubers[<span class=\"number\">0</span>], (err, replies) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(&#123;</span><br><span class=\"line\">                    error: err,</span><br><span class=\"line\">                    key: key,</span><br><span class=\"line\">                    target:  youtubers[<span class=\"number\">0</span>]</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(replies);</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Redis能做到的事情蠻多的，不只是能當快取，透過Lua腳本，也能簡單的做些關聯查詢。<br>只是它畢竟是單執行緒，要是被這任務卡住太久，就喪失快取的意義了。</p>\n<p>日後有機會再筆記PUB/SUB，我在實務上的簡單應用。<br>最主要的還是他的叢集架設與資料同步/備份的部分。</p>\n"},{"title":"Odds, Margin, Market","date":"2019-07-18T15:05:15.000Z","_content":"![](https://i.imgur.com/oIGcrXh.png)\n\n![](https://i.imgur.com/1E4eb4x.png)\n# 歐賠\n各大家娛樂網的分析結果 \n    * 歷史紀錄的統計\n    * 人氣形勢\n    * 歷史淵源\n    * 戰意、球隊凝聚力\n    * 主客場戰績\n    * 近況\n    * 過往戰績\n    * 核心球員受傷、心理、生理等狀況\n    * 聯賽特性\n    * 排名\n    * 突發事件\n[Poisson線上計算](https://sinceawin.com/data/tools/poisson)\n根據上面各家自己算出來的主勝、客勝、和局的機率。\n![](https://i.imgur.com/Np1BdHt.png)\n\n再把各機率取倒數, 得到賠率(期望值)\n主勝賠率: 1/0.5198 = 1.92\n客勝賠率: 1/0.2339 = 4.2753\n和局賠率: 1/0.2462 = 4.0617\n但這跟圖上的會不同，因為同上的會有margin做細微調整.\n\n# 毛利 margin / 抽水(house edge) \n其中 100 / 93.57% = 106.861\n則margin = 6.861%\n\n上面的各選項機率 * 106.861 會得到\n0.5198 * 106.861 = 55.546%\n0.2339 * 106.861 = 24.994%\n0.2462 * 106.861 = 26.309%\n\n主勝賠率 : 1 / 55.546% = 1.80\n和賠率  : 1 / 24.99% = 4.00\n客勝賠率 : 1 / 26.309% = 3.80 \n**得到跟Bet360一樣的賠率了**\n\n用機率表示的原因?\n因為 賠率(期望值)的倒數應該是和對應的投注成正比的.\n因為表示發生的機會越高. 玩家勝出的機會也是越高的. \n應該會有很多人來投注該選項, 對應的投注量也就很大.\n表示莊家要賠錢的風險也越高.\n\nMargin = 106.86%\n其中的1是本金, 莊家要返還給玩家的, 剩下的才是莊家要賺的部份.\n所以 1 / 106.86% = 93.57% 就是一場比賽的理論返還率.\n[top 100 bookmakers ranking](https://www.top100bookmakers.com/profit-margin/)\n[margin calculator](https://www.pinnacle.com/en/betting-resources/betting-tools/margin-calculator)\n\n#### 操盤\n同盤口的margin鮮少會在期間作異動, 因為賠率代表著風險, 也代表著銷量.\n所以大的莊家幾乎margin不會改變, 變得是該盤的賠率.\n\n# 凱利指數\n公式?(各莊家的平均勝率*陪率 來計算) 怎來的? 不重要!\n目的在於體現 冷門出現的可能性\n凱利指數越低的, 莊家覺得越容易出現 ;\n越高的表示月不容易開出 換言之 > 1 都不容易開出\n\n# Handicap / Spread (讓分盤) \n盤口 = 讓球\n把假設的入球數字加給比較不被看好的隊伍上 ; \n換句話說就是被看好的隊伍最後分數扣掉該數字.\n只開出一個讓球盤, 俗稱單票\n多個讓球盤, 俗稱套票\n![](https://i.imgur.com/9YqYGnS.png)\n8種讓分的盤口    \n![](https://i.imgur.com/CX1W3oK.png)\n2種讓分的盤口\n\n讓分有分成 \n    * 讓半顆跟整數顆的讓分盤\n        * 目的 -> 沒有平手 ; 平手要去別的玩法(ex 1x2, double chance)\n        * 平手則投注作廢, 退回本金\n        * 讓0 : 賭輸贏\n        * 讓半球 : 讓球方以任何分數勝出, 就算贏(1:0) ; 平手,輸掉都算輸(1:1)\n        * 讓一球 : 讓球方以兩球以上勝出, 就算贏(3:1) ; 讓球方分數-1而平手, 退回本金(2:1) ; 其餘都是輸(1:1/0:1)  \n    * 讓0.25跟0.75顆的亞洲讓分盤\n        * 0.25 : 平手退回本金/2 (基本不影響球隊輸贏)\n        * 0.75 : 讓球隊伍分數-1, 為平手退回本金/2\n舉例 :\n|讓分盤口|比賽結果|主隊盤口贏|客隊盤口贏|\n|------------|-----------|---------------|--------------|\n|0(平手盤)| 1:0 | 主贏 | 客輸|\n|0| 1:1 | **refund(走盤)** | **refund** |\n|0| 0:1 | 主輸 | 客贏|\n|-0.25(平手/半球) | 1:0(淨勝 >= 1) | 主贏 | 客輸|\n|-0.25 | 1:1 | **贏半** | **輸半**|\n|-0.25 | 0:1 | 主輸 | 客贏|\n|-0.5(半球) | 1:0(淨勝 >= 1) | 主贏 | 客輸|\n|-0.5 | 1:1 | 主輸 | 客贏|\n|-0.5 | 0:1 | 主輸 | 客贏|\n|-0.75(半球/1球) | 2:0(淨勝 >= 2) | 主贏 | 客輸|\n|-0.75 | 1:0(淨勝 = 1) | **贏半** | **輸半**|\n|-0.75 | 1:1 | 主輸 | 客贏|\n|-0.75 | 0:1 | 主輸 | 客贏|\n|-1(1球) | 2:0(淨勝 >= 2) | 主贏 | 客輸|\n|-1 | 1:0(淨勝 = 1) | **refund** | **refund**|\n|-1 | 0:0 | 主輸 | 客贏|\n|-1 | 0:1 | 主輸 | 客贏|\n|-1.5(球半)|.. |.. |..|\n|-2 (2球) | ..|.. |..|\n\n# 亞洲盤\n透過讓球盤, 讓兩個相差懸殊的球隊, 有機會在一個相對公平的平台上較勁, 從而拉平了雙方客觀上的實力差距.\n主要是基於歐洲賠率為基礎開發出來的玩法.\n早期由澳門博彩公司開發出來的, 後來印尼為主的沙巴體育, 菲律賓的明升, 歐洲的BET365、立博等陸續開出了讓分盤, 而為了拓展亞洲市場所以稱為亞洲盤. \n\n### 上盤/下盤\n* 上盤 : 讓球的一方 (主場球隊/比較被看好的球隊)\n* 下盤 : 受讓的一方\n\n### 升盤/降盤\n* 升盤 : 該場從讓1.5變成 讓1.5/2, 上升了一個盤口\n* 降盤 : 該場從最初的1.5變成了1/1.5, 下降了一個盤口\n\n盤口來回震盪, 表示兩邊投注金額變化很大\n盤口幾乎沒震盪, 表示兩邊payoff是平衡的.\n最常發生在快開踢前, 表示場外較量異常激烈.\n\n### 水位\n雙方的獲勝賠率, 一組比例數據, 莊家獲取利潤的手段\n雙方水位和 正常都< 2, 大概在1.8-1.9之間, 這距離1-2的差額就是莊家的直觀利潤. \n舉例要是水位和=1.9; 兩邊賠率一樣\n兩邊各被下注1000萬, 則最後比賽結束時, 莊家能收入100萬元.\n\n\n# 初盤\n一開始在早盤所開出的1x2和odds\n最能體現兩隊之間的實力差距; 或是莊家對於兩隊的態度\n\n# 即時\n開踢前的1x2其賠率走勢\n![](https://i.imgur.com/Pn3vNPR.png)\n\n\n# 終賠(最終賠率) \n就賽果反應在賠率上囉\n也是最終人會買的時刻, 因為幾乎可以胸有成竹的去投注. \n但也可能提早關盤.\n終盤幾乎各家都會對齊, 只差在水位策略的細微調整.\n\n# 賠率種類\n* HongKong Odds [0, 100]\n    * \\> 0 的正數, 不包含本金\n    * HK -> ML \n        * \\> 1 : -1 / (odds)\n        * <= 1 : odds\n    * HK -> DEC\n        * odds + 1\n    * HK -> INDO \n        * \\> 1 : odds\n        * <= 1 : -1 * (1/odds)\n    * HK -> American\n        * < 1 : -1 * (100 / odds)\n        * \\>= 1 : 100 * odds\n* MalaY Odds : [-1, 1]玩弱隊\n    * 負數(輸少) : 從餘額扣除 期望金額*(-1*賠率)的錢, 贏就是贏回跟期望金額一樣的錢 ; 換句話說, 我如果想要贏得期望金額這樣的金錢, 我需要投注 期望金額*(-1*賠率), 如果贏了, 返回期望金額\n    \n    * 正數(贏少) : 跟HK一樣  返還投注金額*賠率\n    * ML -> HK : \n        * 負數 : 1 / (-1 * odds)\n        * 正數 : -1 * 1/odds-1_  \n        \nStake|Odds|Win|Lose |Draw\n-----|----|---|-----|----\n100  | 0.8 | 80 | -100 | 0\n100  | -0.71| 100 | -71 | 0\n\n* Decimal Odds (歐洲賠率) [1, 100]\n    *> 1 的正數, 包含本金\n    * DEC -> HK \n        * odds -1\n* Indo Odds : 玩強隊 [-100, -1] , [1, 100]\n    * \\>= 1 (贏多) : 投注100$, 贏了, 返還金額 = 投注金額*賠率 ; 輸了賠100\\$\n        * \n    * < -1 (輸多) : 賠率-1.25 , 期望金額100$, 要從餘額扣除100*1.25 = 125\\$, 這樣贏了才能獲得 100\\$的期望金額; 輸掉就賠125\\$, 125 > 100\\$, 所以叫輸多\n\n* Fractional Odds\n* American Odds\n    * < 1 : 賠率113, 想淨勝100$, 要投入113\\$ \n* [Myanmar Odds](https://onlinebettingservicemyanmar.blog/2019/05/30/how-to-bet-myanmar-odds-betting-lines/)\n    * +60\n    * -50\n\n#### [Odds Converter](https://www.sportsbookreview.com/picks/tools/odds-converter/)\n# Settle\n","source":"_posts/Odds-Margin-Market.md","raw":"---\ntitle: 'Odds, Margin, Market'\ndate: 2019-07-18 23:05:15\ntags:\n    - Sportsbook\n---\n![](https://i.imgur.com/oIGcrXh.png)\n\n![](https://i.imgur.com/1E4eb4x.png)\n# 歐賠\n各大家娛樂網的分析結果 \n    * 歷史紀錄的統計\n    * 人氣形勢\n    * 歷史淵源\n    * 戰意、球隊凝聚力\n    * 主客場戰績\n    * 近況\n    * 過往戰績\n    * 核心球員受傷、心理、生理等狀況\n    * 聯賽特性\n    * 排名\n    * 突發事件\n[Poisson線上計算](https://sinceawin.com/data/tools/poisson)\n根據上面各家自己算出來的主勝、客勝、和局的機率。\n![](https://i.imgur.com/Np1BdHt.png)\n\n再把各機率取倒數, 得到賠率(期望值)\n主勝賠率: 1/0.5198 = 1.92\n客勝賠率: 1/0.2339 = 4.2753\n和局賠率: 1/0.2462 = 4.0617\n但這跟圖上的會不同，因為同上的會有margin做細微調整.\n\n# 毛利 margin / 抽水(house edge) \n其中 100 / 93.57% = 106.861\n則margin = 6.861%\n\n上面的各選項機率 * 106.861 會得到\n0.5198 * 106.861 = 55.546%\n0.2339 * 106.861 = 24.994%\n0.2462 * 106.861 = 26.309%\n\n主勝賠率 : 1 / 55.546% = 1.80\n和賠率  : 1 / 24.99% = 4.00\n客勝賠率 : 1 / 26.309% = 3.80 \n**得到跟Bet360一樣的賠率了**\n\n用機率表示的原因?\n因為 賠率(期望值)的倒數應該是和對應的投注成正比的.\n因為表示發生的機會越高. 玩家勝出的機會也是越高的. \n應該會有很多人來投注該選項, 對應的投注量也就很大.\n表示莊家要賠錢的風險也越高.\n\nMargin = 106.86%\n其中的1是本金, 莊家要返還給玩家的, 剩下的才是莊家要賺的部份.\n所以 1 / 106.86% = 93.57% 就是一場比賽的理論返還率.\n[top 100 bookmakers ranking](https://www.top100bookmakers.com/profit-margin/)\n[margin calculator](https://www.pinnacle.com/en/betting-resources/betting-tools/margin-calculator)\n\n#### 操盤\n同盤口的margin鮮少會在期間作異動, 因為賠率代表著風險, 也代表著銷量.\n所以大的莊家幾乎margin不會改變, 變得是該盤的賠率.\n\n# 凱利指數\n公式?(各莊家的平均勝率*陪率 來計算) 怎來的? 不重要!\n目的在於體現 冷門出現的可能性\n凱利指數越低的, 莊家覺得越容易出現 ;\n越高的表示月不容易開出 換言之 > 1 都不容易開出\n\n# Handicap / Spread (讓分盤) \n盤口 = 讓球\n把假設的入球數字加給比較不被看好的隊伍上 ; \n換句話說就是被看好的隊伍最後分數扣掉該數字.\n只開出一個讓球盤, 俗稱單票\n多個讓球盤, 俗稱套票\n![](https://i.imgur.com/9YqYGnS.png)\n8種讓分的盤口    \n![](https://i.imgur.com/CX1W3oK.png)\n2種讓分的盤口\n\n讓分有分成 \n    * 讓半顆跟整數顆的讓分盤\n        * 目的 -> 沒有平手 ; 平手要去別的玩法(ex 1x2, double chance)\n        * 平手則投注作廢, 退回本金\n        * 讓0 : 賭輸贏\n        * 讓半球 : 讓球方以任何分數勝出, 就算贏(1:0) ; 平手,輸掉都算輸(1:1)\n        * 讓一球 : 讓球方以兩球以上勝出, 就算贏(3:1) ; 讓球方分數-1而平手, 退回本金(2:1) ; 其餘都是輸(1:1/0:1)  \n    * 讓0.25跟0.75顆的亞洲讓分盤\n        * 0.25 : 平手退回本金/2 (基本不影響球隊輸贏)\n        * 0.75 : 讓球隊伍分數-1, 為平手退回本金/2\n舉例 :\n|讓分盤口|比賽結果|主隊盤口贏|客隊盤口贏|\n|------------|-----------|---------------|--------------|\n|0(平手盤)| 1:0 | 主贏 | 客輸|\n|0| 1:1 | **refund(走盤)** | **refund** |\n|0| 0:1 | 主輸 | 客贏|\n|-0.25(平手/半球) | 1:0(淨勝 >= 1) | 主贏 | 客輸|\n|-0.25 | 1:1 | **贏半** | **輸半**|\n|-0.25 | 0:1 | 主輸 | 客贏|\n|-0.5(半球) | 1:0(淨勝 >= 1) | 主贏 | 客輸|\n|-0.5 | 1:1 | 主輸 | 客贏|\n|-0.5 | 0:1 | 主輸 | 客贏|\n|-0.75(半球/1球) | 2:0(淨勝 >= 2) | 主贏 | 客輸|\n|-0.75 | 1:0(淨勝 = 1) | **贏半** | **輸半**|\n|-0.75 | 1:1 | 主輸 | 客贏|\n|-0.75 | 0:1 | 主輸 | 客贏|\n|-1(1球) | 2:0(淨勝 >= 2) | 主贏 | 客輸|\n|-1 | 1:0(淨勝 = 1) | **refund** | **refund**|\n|-1 | 0:0 | 主輸 | 客贏|\n|-1 | 0:1 | 主輸 | 客贏|\n|-1.5(球半)|.. |.. |..|\n|-2 (2球) | ..|.. |..|\n\n# 亞洲盤\n透過讓球盤, 讓兩個相差懸殊的球隊, 有機會在一個相對公平的平台上較勁, 從而拉平了雙方客觀上的實力差距.\n主要是基於歐洲賠率為基礎開發出來的玩法.\n早期由澳門博彩公司開發出來的, 後來印尼為主的沙巴體育, 菲律賓的明升, 歐洲的BET365、立博等陸續開出了讓分盤, 而為了拓展亞洲市場所以稱為亞洲盤. \n\n### 上盤/下盤\n* 上盤 : 讓球的一方 (主場球隊/比較被看好的球隊)\n* 下盤 : 受讓的一方\n\n### 升盤/降盤\n* 升盤 : 該場從讓1.5變成 讓1.5/2, 上升了一個盤口\n* 降盤 : 該場從最初的1.5變成了1/1.5, 下降了一個盤口\n\n盤口來回震盪, 表示兩邊投注金額變化很大\n盤口幾乎沒震盪, 表示兩邊payoff是平衡的.\n最常發生在快開踢前, 表示場外較量異常激烈.\n\n### 水位\n雙方的獲勝賠率, 一組比例數據, 莊家獲取利潤的手段\n雙方水位和 正常都< 2, 大概在1.8-1.9之間, 這距離1-2的差額就是莊家的直觀利潤. \n舉例要是水位和=1.9; 兩邊賠率一樣\n兩邊各被下注1000萬, 則最後比賽結束時, 莊家能收入100萬元.\n\n\n# 初盤\n一開始在早盤所開出的1x2和odds\n最能體現兩隊之間的實力差距; 或是莊家對於兩隊的態度\n\n# 即時\n開踢前的1x2其賠率走勢\n![](https://i.imgur.com/Pn3vNPR.png)\n\n\n# 終賠(最終賠率) \n就賽果反應在賠率上囉\n也是最終人會買的時刻, 因為幾乎可以胸有成竹的去投注. \n但也可能提早關盤.\n終盤幾乎各家都會對齊, 只差在水位策略的細微調整.\n\n# 賠率種類\n* HongKong Odds [0, 100]\n    * \\> 0 的正數, 不包含本金\n    * HK -> ML \n        * \\> 1 : -1 / (odds)\n        * <= 1 : odds\n    * HK -> DEC\n        * odds + 1\n    * HK -> INDO \n        * \\> 1 : odds\n        * <= 1 : -1 * (1/odds)\n    * HK -> American\n        * < 1 : -1 * (100 / odds)\n        * \\>= 1 : 100 * odds\n* MalaY Odds : [-1, 1]玩弱隊\n    * 負數(輸少) : 從餘額扣除 期望金額*(-1*賠率)的錢, 贏就是贏回跟期望金額一樣的錢 ; 換句話說, 我如果想要贏得期望金額這樣的金錢, 我需要投注 期望金額*(-1*賠率), 如果贏了, 返回期望金額\n    \n    * 正數(贏少) : 跟HK一樣  返還投注金額*賠率\n    * ML -> HK : \n        * 負數 : 1 / (-1 * odds)\n        * 正數 : -1 * 1/odds-1_  \n        \nStake|Odds|Win|Lose |Draw\n-----|----|---|-----|----\n100  | 0.8 | 80 | -100 | 0\n100  | -0.71| 100 | -71 | 0\n\n* Decimal Odds (歐洲賠率) [1, 100]\n    *> 1 的正數, 包含本金\n    * DEC -> HK \n        * odds -1\n* Indo Odds : 玩強隊 [-100, -1] , [1, 100]\n    * \\>= 1 (贏多) : 投注100$, 贏了, 返還金額 = 投注金額*賠率 ; 輸了賠100\\$\n        * \n    * < -1 (輸多) : 賠率-1.25 , 期望金額100$, 要從餘額扣除100*1.25 = 125\\$, 這樣贏了才能獲得 100\\$的期望金額; 輸掉就賠125\\$, 125 > 100\\$, 所以叫輸多\n\n* Fractional Odds\n* American Odds\n    * < 1 : 賠率113, 想淨勝100$, 要投入113\\$ \n* [Myanmar Odds](https://onlinebettingservicemyanmar.blog/2019/05/30/how-to-bet-myanmar-odds-betting-lines/)\n    * +60\n    * -50\n\n#### [Odds Converter](https://www.sportsbookreview.com/picks/tools/odds-converter/)\n# Settle\n","slug":"Odds-Margin-Market","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cme000zck6xshyth2ye","content":"<p><img src=\"https://i.imgur.com/oIGcrXh.png\" alt></p>\n<p><img src=\"https://i.imgur.com/1E4eb4x.png\" alt></p>\n<h1 id=\"歐賠\"><a href=\"#歐賠\" class=\"headerlink\" title=\"歐賠\"></a>歐賠</h1><p>各大家娛樂網的分析結果<br>    * 歷史紀錄的統計<br>    * 人氣形勢<br>    * 歷史淵源<br>    * 戰意、球隊凝聚力<br>    * 主客場戰績<br>    * 近況<br>    * 過往戰績<br>    * 核心球員受傷、心理、生理等狀況<br>    * 聯賽特性<br>    * 排名<br>    * 突發事件<br><a href=\"https://sinceawin.com/data/tools/poisson\" target=\"_blank\" rel=\"noopener\">Poisson線上計算</a><br>根據上面各家自己算出來的主勝、客勝、和局的機率。<br><img src=\"https://i.imgur.com/Np1BdHt.png\" alt></p>\n<p>再把各機率取倒數, 得到賠率(期望值)<br>主勝賠率: 1/0.5198 = 1.92<br>客勝賠率: 1/0.2339 = 4.2753<br>和局賠率: 1/0.2462 = 4.0617<br>但這跟圖上的會不同，因為同上的會有margin做細微調整.</p>\n<h1 id=\"毛利-margin-抽水-house-edge\"><a href=\"#毛利-margin-抽水-house-edge\" class=\"headerlink\" title=\"毛利 margin / 抽水(house edge)\"></a>毛利 margin / 抽水(house edge)</h1><p>其中 100 / 93.57% = 106.861<br>則margin = 6.861%</p>\n<p>上面的各選項機率 * 106.861 會得到<br>0.5198 * 106.861 = 55.546%<br>0.2339 * 106.861 = 24.994%<br>0.2462 * 106.861 = 26.309%</p>\n<p>主勝賠率 : 1 / 55.546% = 1.80<br>和賠率  : 1 / 24.99% = 4.00<br>客勝賠率 : 1 / 26.309% = 3.80<br><strong>得到跟Bet360一樣的賠率了</strong></p>\n<p>用機率表示的原因?<br>因為 賠率(期望值)的倒數應該是和對應的投注成正比的.<br>因為表示發生的機會越高. 玩家勝出的機會也是越高的.<br>應該會有很多人來投注該選項, 對應的投注量也就很大.<br>表示莊家要賠錢的風險也越高.</p>\n<p>Margin = 106.86%<br>其中的1是本金, 莊家要返還給玩家的, 剩下的才是莊家要賺的部份.<br>所以 1 / 106.86% = 93.57% 就是一場比賽的理論返還率.<br><a href=\"https://www.top100bookmakers.com/profit-margin/\" target=\"_blank\" rel=\"noopener\">top 100 bookmakers ranking</a><br><a href=\"https://www.pinnacle.com/en/betting-resources/betting-tools/margin-calculator\" target=\"_blank\" rel=\"noopener\">margin calculator</a></p>\n<h4 id=\"操盤\"><a href=\"#操盤\" class=\"headerlink\" title=\"操盤\"></a>操盤</h4><p>同盤口的margin鮮少會在期間作異動, 因為賠率代表著風險, 也代表著銷量.<br>所以大的莊家幾乎margin不會改變, 變得是該盤的賠率.</p>\n<h1 id=\"凱利指數\"><a href=\"#凱利指數\" class=\"headerlink\" title=\"凱利指數\"></a>凱利指數</h1><p>公式?(各莊家的平均勝率*陪率 來計算) 怎來的? 不重要!<br>目的在於體現 冷門出現的可能性<br>凱利指數越低的, 莊家覺得越容易出現 ;<br>越高的表示月不容易開出 換言之 &gt; 1 都不容易開出</p>\n<h1 id=\"Handicap-Spread-讓分盤\"><a href=\"#Handicap-Spread-讓分盤\" class=\"headerlink\" title=\"Handicap / Spread (讓分盤)\"></a>Handicap / Spread (讓分盤)</h1><p>盤口 = 讓球<br>把假設的入球數字加給比較不被看好的隊伍上 ;<br>換句話說就是被看好的隊伍最後分數扣掉該數字.<br>只開出一個讓球盤, 俗稱單票<br>多個讓球盤, 俗稱套票<br><img src=\"https://i.imgur.com/9YqYGnS.png\" alt><br>8種讓分的盤口<br><img src=\"https://i.imgur.com/CX1W3oK.png\" alt><br>2種讓分的盤口</p>\n<p>讓分有分成<br>    * 讓半顆跟整數顆的讓分盤<br>        * 目的 -&gt; 沒有平手 ; 平手要去別的玩法(ex 1x2, double chance)<br>        * 平手則投注作廢, 退回本金<br>        * 讓0 : 賭輸贏<br>        * 讓半球 : 讓球方以任何分數勝出, 就算贏(1:0) ; 平手,輸掉都算輸(1:1)<br>        * 讓一球 : 讓球方以兩球以上勝出, 就算贏(3:1) ; 讓球方分數-1而平手, 退回本金(2:1) ; 其餘都是輸(1:1/0:1)<br>    * 讓0.25跟0.75顆的亞洲讓分盤<br>        * 0.25 : 平手退回本金/2 (基本不影響球隊輸贏)<br>        * 0.75 : 讓球隊伍分數-1, 為平手退回本金/2<br>舉例 :<br>|讓分盤口|比賽結果|主隊盤口贏|客隊盤口贏|<br>|————|———–|—————|————–|<br>|0(平手盤)| 1:0 | 主贏 | 客輸|<br>|0| 1:1 | <strong>refund(走盤)</strong> | <strong>refund</strong> |<br>|0| 0:1 | 主輸 | 客贏|<br>|-0.25(平手/半球) | 1:0(淨勝 &gt;= 1) | 主贏 | 客輸|<br>|-0.25 | 1:1 | <strong>贏半</strong> | <strong>輸半</strong>|<br>|-0.25 | 0:1 | 主輸 | 客贏|<br>|-0.5(半球) | 1:0(淨勝 &gt;= 1) | 主贏 | 客輸|<br>|-0.5 | 1:1 | 主輸 | 客贏|<br>|-0.5 | 0:1 | 主輸 | 客贏|<br>|-0.75(半球/1球) | 2:0(淨勝 &gt;= 2) | 主贏 | 客輸|<br>|-0.75 | 1:0(淨勝 = 1) | <strong>贏半</strong> | <strong>輸半</strong>|<br>|-0.75 | 1:1 | 主輸 | 客贏|<br>|-0.75 | 0:1 | 主輸 | 客贏|<br>|-1(1球) | 2:0(淨勝 &gt;= 2) | 主贏 | 客輸|<br>|-1 | 1:0(淨勝 = 1) | <strong>refund</strong> | <strong>refund</strong>|<br>|-1 | 0:0 | 主輸 | 客贏|<br>|-1 | 0:1 | 主輸 | 客贏|<br>|-1.5(球半)|.. |.. |..|<br>|-2 (2球) | ..|.. |..|</p>\n<h1 id=\"亞洲盤\"><a href=\"#亞洲盤\" class=\"headerlink\" title=\"亞洲盤\"></a>亞洲盤</h1><p>透過讓球盤, 讓兩個相差懸殊的球隊, 有機會在一個相對公平的平台上較勁, 從而拉平了雙方客觀上的實力差距.<br>主要是基於歐洲賠率為基礎開發出來的玩法.<br>早期由澳門博彩公司開發出來的, 後來印尼為主的沙巴體育, 菲律賓的明升, 歐洲的BET365、立博等陸續開出了讓分盤, 而為了拓展亞洲市場所以稱為亞洲盤. </p>\n<h3 id=\"上盤-下盤\"><a href=\"#上盤-下盤\" class=\"headerlink\" title=\"上盤/下盤\"></a>上盤/下盤</h3><ul>\n<li>上盤 : 讓球的一方 (主場球隊/比較被看好的球隊)</li>\n<li>下盤 : 受讓的一方</li>\n</ul>\n<h3 id=\"升盤-降盤\"><a href=\"#升盤-降盤\" class=\"headerlink\" title=\"升盤/降盤\"></a>升盤/降盤</h3><ul>\n<li>升盤 : 該場從讓1.5變成 讓1.5/2, 上升了一個盤口</li>\n<li>降盤 : 該場從最初的1.5變成了1/1.5, 下降了一個盤口</li>\n</ul>\n<p>盤口來回震盪, 表示兩邊投注金額變化很大<br>盤口幾乎沒震盪, 表示兩邊payoff是平衡的.<br>最常發生在快開踢前, 表示場外較量異常激烈.</p>\n<h3 id=\"水位\"><a href=\"#水位\" class=\"headerlink\" title=\"水位\"></a>水位</h3><p>雙方的獲勝賠率, 一組比例數據, 莊家獲取利潤的手段<br>雙方水位和 正常都&lt; 2, 大概在1.8-1.9之間, 這距離1-2的差額就是莊家的直觀利潤.<br>舉例要是水位和=1.9; 兩邊賠率一樣<br>兩邊各被下注1000萬, 則最後比賽結束時, 莊家能收入100萬元.</p>\n<h1 id=\"初盤\"><a href=\"#初盤\" class=\"headerlink\" title=\"初盤\"></a>初盤</h1><p>一開始在早盤所開出的1x2和odds<br>最能體現兩隊之間的實力差距; 或是莊家對於兩隊的態度</p>\n<h1 id=\"即時\"><a href=\"#即時\" class=\"headerlink\" title=\"即時\"></a>即時</h1><p>開踢前的1x2其賠率走勢<br><img src=\"https://i.imgur.com/Pn3vNPR.png\" alt></p>\n<h1 id=\"終賠-最終賠率\"><a href=\"#終賠-最終賠率\" class=\"headerlink\" title=\"終賠(最終賠率)\"></a>終賠(最終賠率)</h1><p>就賽果反應在賠率上囉<br>也是最終人會買的時刻, 因為幾乎可以胸有成竹的去投注.<br>但也可能提早關盤.<br>終盤幾乎各家都會對齊, 只差在水位策略的細微調整.</p>\n<h1 id=\"賠率種類\"><a href=\"#賠率種類\" class=\"headerlink\" title=\"賠率種類\"></a>賠率種類</h1><ul>\n<li><p>HongKong Odds [0, 100]</p>\n<ul>\n<li>&gt; 0 的正數, 不包含本金</li>\n<li>HK -&gt; ML <ul>\n<li>&gt; 1 : -1 / (odds)</li>\n<li>&lt;= 1 : odds</li>\n</ul>\n</li>\n<li>HK -&gt; DEC<ul>\n<li>odds + 1</li>\n</ul>\n</li>\n<li>HK -&gt; INDO <ul>\n<li>&gt; 1 : odds</li>\n<li>&lt;= 1 : -1 * (1/odds)</li>\n</ul>\n</li>\n<li>HK -&gt; American<ul>\n<li>&lt; 1 : -1 * (100 / odds)</li>\n<li>&gt;= 1 : 100 * odds</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>MalaY Odds : [-1, 1]玩弱隊</p>\n<ul>\n<li><p>負數(輸少) : 從餘額扣除 期望金額<em>(-1*賠率)的錢, 贏就是贏回跟期望金額一樣的錢 ; 換句話說, 我如果想要贏得期望金額這樣的金錢, 我需要投注 期望金額</em>(-1*賠率), 如果贏了, 返回期望金額</p>\n</li>\n<li><p>正數(贏少) : 跟HK一樣  返還投注金額*賠率</p>\n</li>\n<li><p>ML -&gt; HK : </p>\n<ul>\n<li>負數 : 1 / (-1 * odds)</li>\n<li>正數 : -1 * 1/odds-1_  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Stake</th>\n<th>Odds</th>\n<th>Win</th>\n<th>Lose</th>\n<th>Draw</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>100</td>\n<td>0.8</td>\n<td>80</td>\n<td>-100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>100</td>\n<td>-0.71</td>\n<td>100</td>\n<td>-71</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>Decimal Odds (歐洲賠率) [1, 100]<br>  *&gt; 1 的正數, 包含本金</p>\n<ul>\n<li>DEC -&gt; HK <ul>\n<li>odds -1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Indo Odds : 玩強隊 [-100, -1] , [1, 100]</p>\n<ul>\n<li>&gt;= 1 (贏多) : 投注100$, 贏了, 返還金額 = 投注金額*賠率 ; 輸了賠100$<br>  * </li>\n<li>&lt; -1 (輸多) : 賠率-1.25 , 期望金額100$, 要從餘額扣除100*1.25 = 125$, 這樣贏了才能獲得 100$的期望金額; 輸掉就賠125$, 125 &gt; 100$, 所以叫輸多</li>\n</ul>\n</li>\n<li><p>Fractional Odds</p>\n</li>\n<li><p>American Odds</p>\n<ul>\n<li>&lt; 1 : 賠率113, 想淨勝100$, 要投入113$ </li>\n</ul>\n</li>\n<li><p><a href=\"https://onlinebettingservicemyanmar.blog/2019/05/30/how-to-bet-myanmar-odds-betting-lines/\" target=\"_blank\" rel=\"noopener\">Myanmar Odds</a></p>\n<ul>\n<li>+60</li>\n<li>-50</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Odds-Converter\"><a href=\"#Odds-Converter\" class=\"headerlink\" title=\"Odds Converter\"></a><a href=\"https://www.sportsbookreview.com/picks/tools/odds-converter/\" target=\"_blank\" rel=\"noopener\">Odds Converter</a></h4><h1 id=\"Settle\"><a href=\"#Settle\" class=\"headerlink\" title=\"Settle\"></a>Settle</h1>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/oIGcrXh.png\" alt></p>\n<p><img src=\"https://i.imgur.com/1E4eb4x.png\" alt></p>\n<h1 id=\"歐賠\"><a href=\"#歐賠\" class=\"headerlink\" title=\"歐賠\"></a>歐賠</h1><p>各大家娛樂網的分析結果<br>    * 歷史紀錄的統計<br>    * 人氣形勢<br>    * 歷史淵源<br>    * 戰意、球隊凝聚力<br>    * 主客場戰績<br>    * 近況<br>    * 過往戰績<br>    * 核心球員受傷、心理、生理等狀況<br>    * 聯賽特性<br>    * 排名<br>    * 突發事件<br><a href=\"https://sinceawin.com/data/tools/poisson\" target=\"_blank\" rel=\"noopener\">Poisson線上計算</a><br>根據上面各家自己算出來的主勝、客勝、和局的機率。<br><img src=\"https://i.imgur.com/Np1BdHt.png\" alt></p>\n<p>再把各機率取倒數, 得到賠率(期望值)<br>主勝賠率: 1/0.5198 = 1.92<br>客勝賠率: 1/0.2339 = 4.2753<br>和局賠率: 1/0.2462 = 4.0617<br>但這跟圖上的會不同，因為同上的會有margin做細微調整.</p>\n<h1 id=\"毛利-margin-抽水-house-edge\"><a href=\"#毛利-margin-抽水-house-edge\" class=\"headerlink\" title=\"毛利 margin / 抽水(house edge)\"></a>毛利 margin / 抽水(house edge)</h1><p>其中 100 / 93.57% = 106.861<br>則margin = 6.861%</p>\n<p>上面的各選項機率 * 106.861 會得到<br>0.5198 * 106.861 = 55.546%<br>0.2339 * 106.861 = 24.994%<br>0.2462 * 106.861 = 26.309%</p>\n<p>主勝賠率 : 1 / 55.546% = 1.80<br>和賠率  : 1 / 24.99% = 4.00<br>客勝賠率 : 1 / 26.309% = 3.80<br><strong>得到跟Bet360一樣的賠率了</strong></p>\n<p>用機率表示的原因?<br>因為 賠率(期望值)的倒數應該是和對應的投注成正比的.<br>因為表示發生的機會越高. 玩家勝出的機會也是越高的.<br>應該會有很多人來投注該選項, 對應的投注量也就很大.<br>表示莊家要賠錢的風險也越高.</p>\n<p>Margin = 106.86%<br>其中的1是本金, 莊家要返還給玩家的, 剩下的才是莊家要賺的部份.<br>所以 1 / 106.86% = 93.57% 就是一場比賽的理論返還率.<br><a href=\"https://www.top100bookmakers.com/profit-margin/\" target=\"_blank\" rel=\"noopener\">top 100 bookmakers ranking</a><br><a href=\"https://www.pinnacle.com/en/betting-resources/betting-tools/margin-calculator\" target=\"_blank\" rel=\"noopener\">margin calculator</a></p>\n<h4 id=\"操盤\"><a href=\"#操盤\" class=\"headerlink\" title=\"操盤\"></a>操盤</h4><p>同盤口的margin鮮少會在期間作異動, 因為賠率代表著風險, 也代表著銷量.<br>所以大的莊家幾乎margin不會改變, 變得是該盤的賠率.</p>\n<h1 id=\"凱利指數\"><a href=\"#凱利指數\" class=\"headerlink\" title=\"凱利指數\"></a>凱利指數</h1><p>公式?(各莊家的平均勝率*陪率 來計算) 怎來的? 不重要!<br>目的在於體現 冷門出現的可能性<br>凱利指數越低的, 莊家覺得越容易出現 ;<br>越高的表示月不容易開出 換言之 &gt; 1 都不容易開出</p>\n<h1 id=\"Handicap-Spread-讓分盤\"><a href=\"#Handicap-Spread-讓分盤\" class=\"headerlink\" title=\"Handicap / Spread (讓分盤)\"></a>Handicap / Spread (讓分盤)</h1><p>盤口 = 讓球<br>把假設的入球數字加給比較不被看好的隊伍上 ;<br>換句話說就是被看好的隊伍最後分數扣掉該數字.<br>只開出一個讓球盤, 俗稱單票<br>多個讓球盤, 俗稱套票<br><img src=\"https://i.imgur.com/9YqYGnS.png\" alt><br>8種讓分的盤口<br><img src=\"https://i.imgur.com/CX1W3oK.png\" alt><br>2種讓分的盤口</p>\n<p>讓分有分成<br>    * 讓半顆跟整數顆的讓分盤<br>        * 目的 -&gt; 沒有平手 ; 平手要去別的玩法(ex 1x2, double chance)<br>        * 平手則投注作廢, 退回本金<br>        * 讓0 : 賭輸贏<br>        * 讓半球 : 讓球方以任何分數勝出, 就算贏(1:0) ; 平手,輸掉都算輸(1:1)<br>        * 讓一球 : 讓球方以兩球以上勝出, 就算贏(3:1) ; 讓球方分數-1而平手, 退回本金(2:1) ; 其餘都是輸(1:1/0:1)<br>    * 讓0.25跟0.75顆的亞洲讓分盤<br>        * 0.25 : 平手退回本金/2 (基本不影響球隊輸贏)<br>        * 0.75 : 讓球隊伍分數-1, 為平手退回本金/2<br>舉例 :<br>|讓分盤口|比賽結果|主隊盤口贏|客隊盤口贏|<br>|————|———–|—————|————–|<br>|0(平手盤)| 1:0 | 主贏 | 客輸|<br>|0| 1:1 | <strong>refund(走盤)</strong> | <strong>refund</strong> |<br>|0| 0:1 | 主輸 | 客贏|<br>|-0.25(平手/半球) | 1:0(淨勝 &gt;= 1) | 主贏 | 客輸|<br>|-0.25 | 1:1 | <strong>贏半</strong> | <strong>輸半</strong>|<br>|-0.25 | 0:1 | 主輸 | 客贏|<br>|-0.5(半球) | 1:0(淨勝 &gt;= 1) | 主贏 | 客輸|<br>|-0.5 | 1:1 | 主輸 | 客贏|<br>|-0.5 | 0:1 | 主輸 | 客贏|<br>|-0.75(半球/1球) | 2:0(淨勝 &gt;= 2) | 主贏 | 客輸|<br>|-0.75 | 1:0(淨勝 = 1) | <strong>贏半</strong> | <strong>輸半</strong>|<br>|-0.75 | 1:1 | 主輸 | 客贏|<br>|-0.75 | 0:1 | 主輸 | 客贏|<br>|-1(1球) | 2:0(淨勝 &gt;= 2) | 主贏 | 客輸|<br>|-1 | 1:0(淨勝 = 1) | <strong>refund</strong> | <strong>refund</strong>|<br>|-1 | 0:0 | 主輸 | 客贏|<br>|-1 | 0:1 | 主輸 | 客贏|<br>|-1.5(球半)|.. |.. |..|<br>|-2 (2球) | ..|.. |..|</p>\n<h1 id=\"亞洲盤\"><a href=\"#亞洲盤\" class=\"headerlink\" title=\"亞洲盤\"></a>亞洲盤</h1><p>透過讓球盤, 讓兩個相差懸殊的球隊, 有機會在一個相對公平的平台上較勁, 從而拉平了雙方客觀上的實力差距.<br>主要是基於歐洲賠率為基礎開發出來的玩法.<br>早期由澳門博彩公司開發出來的, 後來印尼為主的沙巴體育, 菲律賓的明升, 歐洲的BET365、立博等陸續開出了讓分盤, 而為了拓展亞洲市場所以稱為亞洲盤. </p>\n<h3 id=\"上盤-下盤\"><a href=\"#上盤-下盤\" class=\"headerlink\" title=\"上盤/下盤\"></a>上盤/下盤</h3><ul>\n<li>上盤 : 讓球的一方 (主場球隊/比較被看好的球隊)</li>\n<li>下盤 : 受讓的一方</li>\n</ul>\n<h3 id=\"升盤-降盤\"><a href=\"#升盤-降盤\" class=\"headerlink\" title=\"升盤/降盤\"></a>升盤/降盤</h3><ul>\n<li>升盤 : 該場從讓1.5變成 讓1.5/2, 上升了一個盤口</li>\n<li>降盤 : 該場從最初的1.5變成了1/1.5, 下降了一個盤口</li>\n</ul>\n<p>盤口來回震盪, 表示兩邊投注金額變化很大<br>盤口幾乎沒震盪, 表示兩邊payoff是平衡的.<br>最常發生在快開踢前, 表示場外較量異常激烈.</p>\n<h3 id=\"水位\"><a href=\"#水位\" class=\"headerlink\" title=\"水位\"></a>水位</h3><p>雙方的獲勝賠率, 一組比例數據, 莊家獲取利潤的手段<br>雙方水位和 正常都&lt; 2, 大概在1.8-1.9之間, 這距離1-2的差額就是莊家的直觀利潤.<br>舉例要是水位和=1.9; 兩邊賠率一樣<br>兩邊各被下注1000萬, 則最後比賽結束時, 莊家能收入100萬元.</p>\n<h1 id=\"初盤\"><a href=\"#初盤\" class=\"headerlink\" title=\"初盤\"></a>初盤</h1><p>一開始在早盤所開出的1x2和odds<br>最能體現兩隊之間的實力差距; 或是莊家對於兩隊的態度</p>\n<h1 id=\"即時\"><a href=\"#即時\" class=\"headerlink\" title=\"即時\"></a>即時</h1><p>開踢前的1x2其賠率走勢<br><img src=\"https://i.imgur.com/Pn3vNPR.png\" alt></p>\n<h1 id=\"終賠-最終賠率\"><a href=\"#終賠-最終賠率\" class=\"headerlink\" title=\"終賠(最終賠率)\"></a>終賠(最終賠率)</h1><p>就賽果反應在賠率上囉<br>也是最終人會買的時刻, 因為幾乎可以胸有成竹的去投注.<br>但也可能提早關盤.<br>終盤幾乎各家都會對齊, 只差在水位策略的細微調整.</p>\n<h1 id=\"賠率種類\"><a href=\"#賠率種類\" class=\"headerlink\" title=\"賠率種類\"></a>賠率種類</h1><ul>\n<li><p>HongKong Odds [0, 100]</p>\n<ul>\n<li>&gt; 0 的正數, 不包含本金</li>\n<li>HK -&gt; ML <ul>\n<li>&gt; 1 : -1 / (odds)</li>\n<li>&lt;= 1 : odds</li>\n</ul>\n</li>\n<li>HK -&gt; DEC<ul>\n<li>odds + 1</li>\n</ul>\n</li>\n<li>HK -&gt; INDO <ul>\n<li>&gt; 1 : odds</li>\n<li>&lt;= 1 : -1 * (1/odds)</li>\n</ul>\n</li>\n<li>HK -&gt; American<ul>\n<li>&lt; 1 : -1 * (100 / odds)</li>\n<li>&gt;= 1 : 100 * odds</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>MalaY Odds : [-1, 1]玩弱隊</p>\n<ul>\n<li><p>負數(輸少) : 從餘額扣除 期望金額<em>(-1*賠率)的錢, 贏就是贏回跟期望金額一樣的錢 ; 換句話說, 我如果想要贏得期望金額這樣的金錢, 我需要投注 期望金額</em>(-1*賠率), 如果贏了, 返回期望金額</p>\n</li>\n<li><p>正數(贏少) : 跟HK一樣  返還投注金額*賠率</p>\n</li>\n<li><p>ML -&gt; HK : </p>\n<ul>\n<li>負數 : 1 / (-1 * odds)</li>\n<li>正數 : -1 * 1/odds-1_  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Stake</th>\n<th>Odds</th>\n<th>Win</th>\n<th>Lose</th>\n<th>Draw</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>100</td>\n<td>0.8</td>\n<td>80</td>\n<td>-100</td>\n<td>0</td>\n</tr>\n<tr>\n<td>100</td>\n<td>-0.71</td>\n<td>100</td>\n<td>-71</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>Decimal Odds (歐洲賠率) [1, 100]<br>  *&gt; 1 的正數, 包含本金</p>\n<ul>\n<li>DEC -&gt; HK <ul>\n<li>odds -1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Indo Odds : 玩強隊 [-100, -1] , [1, 100]</p>\n<ul>\n<li>&gt;= 1 (贏多) : 投注100$, 贏了, 返還金額 = 投注金額*賠率 ; 輸了賠100$<br>  * </li>\n<li>&lt; -1 (輸多) : 賠率-1.25 , 期望金額100$, 要從餘額扣除100*1.25 = 125$, 這樣贏了才能獲得 100$的期望金額; 輸掉就賠125$, 125 &gt; 100$, 所以叫輸多</li>\n</ul>\n</li>\n<li><p>Fractional Odds</p>\n</li>\n<li><p>American Odds</p>\n<ul>\n<li>&lt; 1 : 賠率113, 想淨勝100$, 要投入113$ </li>\n</ul>\n</li>\n<li><p><a href=\"https://onlinebettingservicemyanmar.blog/2019/05/30/how-to-bet-myanmar-odds-betting-lines/\" target=\"_blank\" rel=\"noopener\">Myanmar Odds</a></p>\n<ul>\n<li>+60</li>\n<li>-50</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Odds-Converter\"><a href=\"#Odds-Converter\" class=\"headerlink\" title=\"Odds Converter\"></a><a href=\"https://www.sportsbookreview.com/picks/tools/odds-converter/\" target=\"_blank\" rel=\"noopener\">Odds Converter</a></h4><h1 id=\"Settle\"><a href=\"#Settle\" class=\"headerlink\" title=\"Settle\"></a>Settle</h1>"},{"title":"PixiJS-簡介","date":"2017-06-05T15:59:50.000Z","_content":"# PixiJS - PixiJs 簡介\n`Pixi.js is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.`\n<!--more-->\nPixiJS官網上的說明這是一個套件，能讓玩家創造出豐富的、互動的、跨平台的應用/遊戲。開發者不必深入理解WebGL的API或是處理瀏覽器的相容性問題的一個容易上手的套件。\n\n利用texture(紋理)來準備遊戲圖形，使用Proton粒子引擎做到particle effect(粒子效果)，以及如何將Pixi整合到自己做的遊戲引擎中。當然它不只適用於遊戲，也能用來創建任何交互式的應用程式。\n\n## 安裝\n小弟安裝學習的版本是V4.0.0\n直接使用官網提供的CDN載點\n[Pixi Link](https://github.com/pixijs/pixi.js/wiki/FAQs#where-can-i-get-a-build)\n```javascript\n<head>\n  <meta charset=\"utf-8\">\n  <title>Hello World</title>\n</head>\n  <script src=\"pixi.min.js\"></script>\n<body>\n  <script type=\"text/javascript\">\n    var type = \"WebGL\"\n    if(!PIXI.utils.isWebGLSupported()){\n      type = \"canvas\"\n    }\n    PIXI.utils.sayHello(type)\n  </script>\n</body>\n```","source":"_posts/PixiJS-簡介.md","raw":"---\ntitle: PixiJS-簡介\ndate: 2017-06-05 23:59:50\ntags:\n    - JavaSCript\n    - Pixi\n---\n# PixiJS - PixiJs 簡介\n`Pixi.js is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.`\n<!--more-->\nPixiJS官網上的說明這是一個套件，能讓玩家創造出豐富的、互動的、跨平台的應用/遊戲。開發者不必深入理解WebGL的API或是處理瀏覽器的相容性問題的一個容易上手的套件。\n\n利用texture(紋理)來準備遊戲圖形，使用Proton粒子引擎做到particle effect(粒子效果)，以及如何將Pixi整合到自己做的遊戲引擎中。當然它不只適用於遊戲，也能用來創建任何交互式的應用程式。\n\n## 安裝\n小弟安裝學習的版本是V4.0.0\n直接使用官網提供的CDN載點\n[Pixi Link](https://github.com/pixijs/pixi.js/wiki/FAQs#where-can-i-get-a-build)\n```javascript\n<head>\n  <meta charset=\"utf-8\">\n  <title>Hello World</title>\n</head>\n  <script src=\"pixi.min.js\"></script>\n<body>\n  <script type=\"text/javascript\">\n    var type = \"WebGL\"\n    if(!PIXI.utils.isWebGLSupported()){\n      type = \"canvas\"\n    }\n    PIXI.utils.sayHello(type)\n  </script>\n</body>\n```","slug":"PixiJS-簡介","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmg0012ck6xet66fpbb","content":"<h1 id=\"PixiJS-PixiJs-簡介\"><a href=\"#PixiJS-PixiJs-簡介\" class=\"headerlink\" title=\"PixiJS - PixiJs 簡介\"></a>PixiJS - PixiJs 簡介</h1><p><code>Pixi.js is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.</code></p>\n<a id=\"more\"></a>\n<p>PixiJS官網上的說明這是一個套件，能讓玩家創造出豐富的、互動的、跨平台的應用/遊戲。開發者不必深入理解WebGL的API或是處理瀏覽器的相容性問題的一個容易上手的套件。</p>\n<p>利用texture(紋理)來準備遊戲圖形，使用Proton粒子引擎做到particle effect(粒子效果)，以及如何將Pixi整合到自己做的遊戲引擎中。當然它不只適用於遊戲，也能用來創建任何交互式的應用程式。</p>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>小弟安裝學習的版本是V4.0.0<br>直接使用官網提供的CDN載點<br><a href=\"https://github.com/pixijs/pixi.js/wiki/FAQs#where-can-i-get-a-build\" target=\"_blank\" rel=\"noopener\">Pixi Link</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Hello World&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">\"pixi.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"string\">\"WebGL\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!PIXI.utils.isWebGLSupported())&#123;</span><br><span class=\"line\">      type = <span class=\"string\">\"canvas\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PIXI.utils.sayHello(type)</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"PixiJS-PixiJs-簡介\"><a href=\"#PixiJS-PixiJs-簡介\" class=\"headerlink\" title=\"PixiJS - PixiJs 簡介\"></a>PixiJS - PixiJs 簡介</h1><p><code>Pixi.js is a rendering library that will allow you to create rich, interactive graphics, cross platform applications, and games without having to dive into the WebGL API or deal with browser and device compatibility.</code></p>","more":"<p>PixiJS官網上的說明這是一個套件，能讓玩家創造出豐富的、互動的、跨平台的應用/遊戲。開發者不必深入理解WebGL的API或是處理瀏覽器的相容性問題的一個容易上手的套件。</p>\n<p>利用texture(紋理)來準備遊戲圖形，使用Proton粒子引擎做到particle effect(粒子效果)，以及如何將Pixi整合到自己做的遊戲引擎中。當然它不只適用於遊戲，也能用來創建任何交互式的應用程式。</p>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>小弟安裝學習的版本是V4.0.0<br>直接使用官網提供的CDN載點<br><a href=\"https://github.com/pixijs/pixi.js/wiki/FAQs#where-can-i-get-a-build\" target=\"_blank\" rel=\"noopener\">Pixi Link</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">\"utf-8\"</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Hello World&lt;<span class=\"regexp\">/title&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>head&gt;</span><br><span class=\"line\">  &lt;script src=<span class=\"string\">\"pixi.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"string\">\"WebGL\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!PIXI.utils.isWebGLSupported())&#123;</span><br><span class=\"line\">      type = <span class=\"string\">\"canvas\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    PIXI.utils.sayHello(type)</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Rx and Pormise","date":"2019-02-14T04:59:23.000Z","_content":"# Reactive Programing (響應式編程)\nDef : 一種面向(data flow)數據流和(propagation of change)變化傳播的編程風格。\n\n* propagation of change 變化傳播\n最初的資料是否會隨著後續對應變量的變化而變化。\n    * 在inperative programming中\nA+B=C\n*2+3=5\n2+4=5 not 6\n當B的資料發生改變之後，C的數值必沒有隨著B的改變而改變。\n    * 在Reactive Programing中\nA+B=C\n2+3=5\n2+4=6\n    * 在MVVM中，存在一種M到V的綁定關係\n![](/images/Rx/ofzzCyr.png)\n當Model由model1變為model2時，View也隨之進行了變化，從view1變成view2.\n所以MVVM框架，也實現了RX中的propagation of change概念。\n\n* data flow(stream)\n監聽一系列的事件流，並對這一系列事件進行 映射(Map)、過濾(Filter)、合併(Merge)等處理後，在響應整個事件流的callback(回調)，該過程便是 面相數據流的編程。\n\n數據流被封裝在一個叫做Observable的實例中，通過觀察者模式，對數據流進行統一的訂閱，並在中間插入像filter這樣的操作，從而對Observable所封裝的數據流進行處理。\n\n```\nmyObservable.filter(fn).subscribe(callback);\n```\n\n### ReactiveX\n微軟開發維護的Reactive Programing套件。\n結合了 觀察者模式、迭代器模式、函數式編程(Functional Programming)。\n\n* Observable\nRx核心概念!!\n所有產生出來的非同步數據都先包裝程Observable對象，Observable對象是把這些非同步數據轉換成 data stream的形式。所以這些Observable對象等同於data stream的源頭，後續操作都圍繞著這些被轉換的流動數據展開的。\n![](/images/Rx/fXMFsde.png)\n上圖最上方的箭頭(時間軸)表示了最初的Observable對象，這個對象發出了3個數據，這3個可能是點擊事件的數據，也可能是response的數據。\n經過map處理後，原來的Observable對象會變成一個新的Observable對象，並且原來的3個數據會轉換成新的數據在新的Observable對象數據流裡流動。\n\n概念雷同於 工廠生產線上的 生產流水線。\n![](/images/Rx/Img244356699.jpg)\nObservable對象相當於半成品，map相當於流水線上的工人，加工後變成成品。\n\n* RX 是 借鑒了集合的操作思想，把複雜的非同步數據流處理問題，簡化成同步的集合處理問題。\n換言之，開發者能透過Observable，操作集合一樣操作複雜的非同步數據流。\n* Operator\nOperator是實現了迭代器模式、函數式編程的利器。\nOperator是Observable的操作方式。每一個數據流，都能透過某個operator對該Observable對象進行操作。大部分operator操作完後，會返回一個新的Observable對象給下一個operator處理。\n也因此，這樣方便在各個operator間透過鍊式寫法編寫。\n\n```\nlet newObservable = observable\n                    .debounceTime(500)\n                    .take(2);\n```\n\n### Compare With Promise\n能用promise的場景, RxJs都適用，因為RxJs是作為promise的超集合存在的。\n```javascript\nlet promise = new Promise((resolve, reject) => {\n    // some code\n    if(/* 異步執行成功 */) resolve(value);\n    reject(error);\n});\n```\n```javascript\nlet observable = new Observable((observer) => {\n    observer.next(value1);\n    observer.next(value2);\n    \n    observer.error(err);\n})\n```\nPormise只能針對單一的非同步事件進行resolve()，但在Observable中，不僅能處理單一的非同步事件(就是調用observer的next())，而且能以streaming形式響應多個非同步事件。\n還有對於Promise中的all()、race()等，RxJs都有對應的解決方案。\n\n```javascript\nlet newPromise = Promise.all(promiseReq1, promiseReq2);\nlet newObservable = Rx.Observable.forkJoin(obsReq1, obsReq2);\n```","source":"_posts/Rx-and-Pormise.md","raw":"---\ntitle: Rx and Pormise\ndate: 2019-02-14 12:59:23\ntags:\n    - Rx\n    - JavaScript\n---\n# Reactive Programing (響應式編程)\nDef : 一種面向(data flow)數據流和(propagation of change)變化傳播的編程風格。\n\n* propagation of change 變化傳播\n最初的資料是否會隨著後續對應變量的變化而變化。\n    * 在inperative programming中\nA+B=C\n*2+3=5\n2+4=5 not 6\n當B的資料發生改變之後，C的數值必沒有隨著B的改變而改變。\n    * 在Reactive Programing中\nA+B=C\n2+3=5\n2+4=6\n    * 在MVVM中，存在一種M到V的綁定關係\n![](/images/Rx/ofzzCyr.png)\n當Model由model1變為model2時，View也隨之進行了變化，從view1變成view2.\n所以MVVM框架，也實現了RX中的propagation of change概念。\n\n* data flow(stream)\n監聽一系列的事件流，並對這一系列事件進行 映射(Map)、過濾(Filter)、合併(Merge)等處理後，在響應整個事件流的callback(回調)，該過程便是 面相數據流的編程。\n\n數據流被封裝在一個叫做Observable的實例中，通過觀察者模式，對數據流進行統一的訂閱，並在中間插入像filter這樣的操作，從而對Observable所封裝的數據流進行處理。\n\n```\nmyObservable.filter(fn).subscribe(callback);\n```\n\n### ReactiveX\n微軟開發維護的Reactive Programing套件。\n結合了 觀察者模式、迭代器模式、函數式編程(Functional Programming)。\n\n* Observable\nRx核心概念!!\n所有產生出來的非同步數據都先包裝程Observable對象，Observable對象是把這些非同步數據轉換成 data stream的形式。所以這些Observable對象等同於data stream的源頭，後續操作都圍繞著這些被轉換的流動數據展開的。\n![](/images/Rx/fXMFsde.png)\n上圖最上方的箭頭(時間軸)表示了最初的Observable對象，這個對象發出了3個數據，這3個可能是點擊事件的數據，也可能是response的數據。\n經過map處理後，原來的Observable對象會變成一個新的Observable對象，並且原來的3個數據會轉換成新的數據在新的Observable對象數據流裡流動。\n\n概念雷同於 工廠生產線上的 生產流水線。\n![](/images/Rx/Img244356699.jpg)\nObservable對象相當於半成品，map相當於流水線上的工人，加工後變成成品。\n\n* RX 是 借鑒了集合的操作思想，把複雜的非同步數據流處理問題，簡化成同步的集合處理問題。\n換言之，開發者能透過Observable，操作集合一樣操作複雜的非同步數據流。\n* Operator\nOperator是實現了迭代器模式、函數式編程的利器。\nOperator是Observable的操作方式。每一個數據流，都能透過某個operator對該Observable對象進行操作。大部分operator操作完後，會返回一個新的Observable對象給下一個operator處理。\n也因此，這樣方便在各個operator間透過鍊式寫法編寫。\n\n```\nlet newObservable = observable\n                    .debounceTime(500)\n                    .take(2);\n```\n\n### Compare With Promise\n能用promise的場景, RxJs都適用，因為RxJs是作為promise的超集合存在的。\n```javascript\nlet promise = new Promise((resolve, reject) => {\n    // some code\n    if(/* 異步執行成功 */) resolve(value);\n    reject(error);\n});\n```\n```javascript\nlet observable = new Observable((observer) => {\n    observer.next(value1);\n    observer.next(value2);\n    \n    observer.error(err);\n})\n```\nPormise只能針對單一的非同步事件進行resolve()，但在Observable中，不僅能處理單一的非同步事件(就是調用observer的next())，而且能以streaming形式響應多個非同步事件。\n還有對於Promise中的all()、race()等，RxJs都有對應的解決方案。\n\n```javascript\nlet newPromise = Promise.all(promiseReq1, promiseReq2);\nlet newObservable = Rx.Observable.forkJoin(obsReq1, obsReq2);\n```","slug":"Rx-and-Pormise","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmg0014ck6xz10gvhc1","content":"<h1 id=\"Reactive-Programing-響應式編程\"><a href=\"#Reactive-Programing-響應式編程\" class=\"headerlink\" title=\"Reactive Programing (響應式編程)\"></a>Reactive Programing (響應式編程)</h1><p>Def : 一種面向(data flow)數據流和(propagation of change)變化傳播的編程風格。</p>\n<ul>\n<li><p>propagation of change 變化傳播<br>最初的資料是否會隨著後續對應變量的變化而變化。</p>\n<ul>\n<li>在inperative programming中<br>A+B=C</li>\n</ul>\n</li>\n<li><p>2+3=5<br>2+4=5 not 6<br>當B的資料發生改變之後，C的數值必沒有隨著B的改變而改變。</p>\n<ul>\n<li>在Reactive Programing中<br>A+B=C<br>2+3=5<br>2+4=6</li>\n<li>在MVVM中，存在一種M到V的綁定關係<br><img src=\"/images/Rx/ofzzCyr.png\" alt><br>當Model由model1變為model2時，View也隨之進行了變化，從view1變成view2.<br>所以MVVM框架，也實現了RX中的propagation of change概念。</li>\n</ul>\n</li>\n<li><p>data flow(stream)<br>監聽一系列的事件流，並對這一系列事件進行 映射(Map)、過濾(Filter)、合併(Merge)等處理後，在響應整個事件流的callback(回調)，該過程便是 面相數據流的編程。</p>\n</li>\n</ul>\n<p>數據流被封裝在一個叫做Observable的實例中，通過觀察者模式，對數據流進行統一的訂閱，並在中間插入像filter這樣的操作，從而對Observable所封裝的數據流進行處理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObservable.filter(fn).subscribe(callback);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReactiveX\"><a href=\"#ReactiveX\" class=\"headerlink\" title=\"ReactiveX\"></a>ReactiveX</h3><p>微軟開發維護的Reactive Programing套件。<br>結合了 觀察者模式、迭代器模式、函數式編程(Functional Programming)。</p>\n<ul>\n<li>Observable<br>Rx核心概念!!<br>所有產生出來的非同步數據都先包裝程Observable對象，Observable對象是把這些非同步數據轉換成 data stream的形式。所以這些Observable對象等同於data stream的源頭，後續操作都圍繞著這些被轉換的流動數據展開的。<br><img src=\"/images/Rx/fXMFsde.png\" alt><br>上圖最上方的箭頭(時間軸)表示了最初的Observable對象，這個對象發出了3個數據，這3個可能是點擊事件的數據，也可能是response的數據。<br>經過map處理後，原來的Observable對象會變成一個新的Observable對象，並且原來的3個數據會轉換成新的數據在新的Observable對象數據流裡流動。</li>\n</ul>\n<p>概念雷同於 工廠生產線上的 生產流水線。<br><img src=\"/images/Rx/Img244356699.jpg\" alt><br>Observable對象相當於半成品，map相當於流水線上的工人，加工後變成成品。</p>\n<ul>\n<li>RX 是 借鑒了集合的操作思想，把複雜的非同步數據流處理問題，簡化成同步的集合處理問題。<br>換言之，開發者能透過Observable，操作集合一樣操作複雜的非同步數據流。</li>\n<li>Operator<br>Operator是實現了迭代器模式、函數式編程的利器。<br>Operator是Observable的操作方式。每一個數據流，都能透過某個operator對該Observable對象進行操作。大部分operator操作完後，會返回一個新的Observable對象給下一個operator處理。<br>也因此，這樣方便在各個operator間透過鍊式寫法編寫。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let newObservable = observable</span><br><span class=\"line\">                    .debounceTime(500)</span><br><span class=\"line\">                    .take(2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Compare-With-Promise\"><a href=\"#Compare-With-Promise\" class=\"headerlink\" title=\"Compare With Promise\"></a>Compare With Promise</h3><p>能用promise的場景, RxJs都適用，因為RxJs是作為promise的超集合存在的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"comment\">/* 異步執行成功 */</span>) resolve(value);</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(value1);</span><br><span class=\"line\">    observer.next(value2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    observer.error(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Pormise只能針對單一的非同步事件進行resolve()，但在Observable中，不僅能處理單一的非同步事件(就是調用observer的next())，而且能以streaming形式響應多個非同步事件。<br>還有對於Promise中的all()、race()等，RxJs都有對應的解決方案。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newPromise = <span class=\"built_in\">Promise</span>.all(promiseReq1, promiseReq2);</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObservable = Rx.Observable.forkJoin(obsReq1, obsReq2);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Reactive-Programing-響應式編程\"><a href=\"#Reactive-Programing-響應式編程\" class=\"headerlink\" title=\"Reactive Programing (響應式編程)\"></a>Reactive Programing (響應式編程)</h1><p>Def : 一種面向(data flow)數據流和(propagation of change)變化傳播的編程風格。</p>\n<ul>\n<li><p>propagation of change 變化傳播<br>最初的資料是否會隨著後續對應變量的變化而變化。</p>\n<ul>\n<li>在inperative programming中<br>A+B=C</li>\n</ul>\n</li>\n<li><p>2+3=5<br>2+4=5 not 6<br>當B的資料發生改變之後，C的數值必沒有隨著B的改變而改變。</p>\n<ul>\n<li>在Reactive Programing中<br>A+B=C<br>2+3=5<br>2+4=6</li>\n<li>在MVVM中，存在一種M到V的綁定關係<br><img src=\"/images/Rx/ofzzCyr.png\" alt><br>當Model由model1變為model2時，View也隨之進行了變化，從view1變成view2.<br>所以MVVM框架，也實現了RX中的propagation of change概念。</li>\n</ul>\n</li>\n<li><p>data flow(stream)<br>監聽一系列的事件流，並對這一系列事件進行 映射(Map)、過濾(Filter)、合併(Merge)等處理後，在響應整個事件流的callback(回調)，該過程便是 面相數據流的編程。</p>\n</li>\n</ul>\n<p>數據流被封裝在一個叫做Observable的實例中，通過觀察者模式，對數據流進行統一的訂閱，並在中間插入像filter這樣的操作，從而對Observable所封裝的數據流進行處理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myObservable.filter(fn).subscribe(callback);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReactiveX\"><a href=\"#ReactiveX\" class=\"headerlink\" title=\"ReactiveX\"></a>ReactiveX</h3><p>微軟開發維護的Reactive Programing套件。<br>結合了 觀察者模式、迭代器模式、函數式編程(Functional Programming)。</p>\n<ul>\n<li>Observable<br>Rx核心概念!!<br>所有產生出來的非同步數據都先包裝程Observable對象，Observable對象是把這些非同步數據轉換成 data stream的形式。所以這些Observable對象等同於data stream的源頭，後續操作都圍繞著這些被轉換的流動數據展開的。<br><img src=\"/images/Rx/fXMFsde.png\" alt><br>上圖最上方的箭頭(時間軸)表示了最初的Observable對象，這個對象發出了3個數據，這3個可能是點擊事件的數據，也可能是response的數據。<br>經過map處理後，原來的Observable對象會變成一個新的Observable對象，並且原來的3個數據會轉換成新的數據在新的Observable對象數據流裡流動。</li>\n</ul>\n<p>概念雷同於 工廠生產線上的 生產流水線。<br><img src=\"/images/Rx/Img244356699.jpg\" alt><br>Observable對象相當於半成品，map相當於流水線上的工人，加工後變成成品。</p>\n<ul>\n<li>RX 是 借鑒了集合的操作思想，把複雜的非同步數據流處理問題，簡化成同步的集合處理問題。<br>換言之，開發者能透過Observable，操作集合一樣操作複雜的非同步數據流。</li>\n<li>Operator<br>Operator是實現了迭代器模式、函數式編程的利器。<br>Operator是Observable的操作方式。每一個數據流，都能透過某個operator對該Observable對象進行操作。大部分operator操作完後，會返回一個新的Observable對象給下一個operator處理。<br>也因此，這樣方便在各個operator間透過鍊式寫法編寫。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let newObservable = observable</span><br><span class=\"line\">                    .debounceTime(500)</span><br><span class=\"line\">                    .take(2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Compare-With-Promise\"><a href=\"#Compare-With-Promise\" class=\"headerlink\" title=\"Compare With Promise\"></a>Compare With Promise</h3><p>能用promise的場景, RxJs都適用，因為RxJs是作為promise的超集合存在的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// some code</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"comment\">/* 異步執行成功 */</span>) resolve(value);</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(value1);</span><br><span class=\"line\">    observer.next(value2);</span><br><span class=\"line\">    </span><br><span class=\"line\">    observer.error(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Pormise只能針對單一的非同步事件進行resolve()，但在Observable中，不僅能處理單一的非同步事件(就是調用observer的next())，而且能以streaming形式響應多個非同步事件。<br>還有對於Promise中的all()、race()等，RxJs都有對應的解決方案。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newPromise = <span class=\"built_in\">Promise</span>.all(promiseReq1, promiseReq2);</span><br><span class=\"line\"><span class=\"keyword\">let</span> newObservable = Rx.Observable.forkJoin(obsReq1, obsReq2);</span><br></pre></td></tr></table></figure>"},{"title":"Rx_IEnumberbale和IObservable","date":"2017-11-26T04:25:25.000Z","_content":"# Rx可以做的事情\nRx可以處理很多內容，例如async處理、event、IEnumberable等，\n例如 :MouseClick event、MousePosition等等的事情\n還有對於時間的處理，例如Timer，可以想成是指定時間間隔會發生的事件的值。\n還有async，可以想像成某個時間點，才開始進行的處理，且處理完成後，才會得到某個值。\n![](/images/Rx/1333383604_7864.gif)\n\n\n### Rx和Linq\nRx最基本的介面是IObservable(T) (被觀察者)，它與.NET常見的IEnumerable是不同的。\n但是能跟用Linq查找的方法一樣來查找。\n```csharp\nusing System.Reactive.Linq;\n//LinQ to Objects\nvar ix = from x in Enumerable.Range(1,10)\n         where x % 2 == 0\n         select x * x;\nvar rx = from x in Observable.Range(1,10)\n          where x % 2 == 0\n          select x * x;\n```\nRx裡雖然增加了不少新的方法，但是大部分的同名方法操作跟定義上都跟原本的一樣，這降低了很多學習成本。\n雖然介面不同，但是都可以用Linq expression來達成同樣的效果。\n所以IObservable/IObserver 和 IEnumerable/IEnumerator，可以視前者為後者的反轉。\n\n這段Code將描述IObserver介面如何反轉IEnumberator介面的。\n\n```csharp\n//簡化過的IEnumerator<T>\npublic interface IEnumberator<T>\n{\n    T current{get;}\n    bool MoveNext();\n    //void Reset(); Reset現在一般不使用\n}\n//MoveNext改回傳bool,再調用current\npublic interface IEnumberator<T>{\n  //MoveNext回傳T的instance\n  //如果結束的話，則不回傳(== void)\n  //異常的話，拋出\n  //因此有3種類型的回傳\n  T|void|Excecption GetNext(void);\n}\n//根據對偶性(Duality)，將參數和回傳值互換位置\n//以前都是被動式的去取Pull，現在則是主動的拿到Push，\n//所以改用Got\npublic interface IEnumeratorDual<T>{\n    void GotNext(T|void|Exception);\n}\n//進而按照Pull的3種回傳類型，分開定義介面\npublic interface IEnumeratorDual<T>{\n    void GotNext(T);\n    void GotVoid(void);\n    void GotException(Exception);\n}\n//最後視現在用的IObserver<T>介面\npublic interface IObserver<T>{\n    void OnNext(T value);\n    void OnComplete();\n    void OnError(Exception error);\n}\n```\n所以IObservable和IEnumberator視可以相互轉換的，兩人可透過彼此的擴充方法相互轉換。\n且這些擴充方法，在Rx中都已經定義了。\n通過這突，可以清楚的了解IEnumerable是Pull,而IObservable是Push。\n![](/images/Rx/1334422958_4462.gif)\n\n### Event use Rx\n```csharp\n//監聽Mouse move event\npublic static IObservable<MouseEventArgs> MouseMoveAsObservable(this Form form){\n    return Observable.FromEventPattern<MouseEventArgs>(from, \"MouseMode\").Select(e =>e.EventArgs);\n}\npublic void TextChangeAsObservable(){\n    //等待1秒後若沒在收到新的資料，就用最近收到的資料來處理\n    Observable.FromEventPattern<EventArgs>(textBox, \"TextChanged\").Select(_ =>textBox.Text)\n            .Throttle(TimeSpane.FromSeconds(1));\n}\n```\nThrottle可以設定一定的時間間隔，過濾掉一些不必要的輸入，上面範例中，一秒內無論發生多少次變化，只有最後一次的值才會被push出去。\n\n### Async By Rx\n```csharp\nvar req = WebRequest.Create(\"http://hoge/\");  \nreq.BeginGetResponse(ar =>  \n{  \n  try  \n  {  \n    var res = req.EndGetResponse(ar);  \n    var url = new StreamReader(res.GetResponseStream()).ReadToEnd();  \n    var req2 = WebRequest.Create(url); // 在前面請求的結果上，再發請請求 \n    req2.BeginGetResponse(ar2 =>  \n    {  \n      //再多次請求的處理下，往往需要在每一層加上try-catch\n      try  \n      {  \n        var res2 = req2.EndGetResponse(ar2);  \n        var str = new StreamReader(res2.GetResponseStream()).ReadToEnd();  \n        Dispatcher.BeginInvoke(new Action(() => MessageBox.Show(str)));  \n      }  \n      catch (WebException e) { Dispatcher.BeginInvoke(new Action(() => MessageBox.Show(e.ToString()))); }  \n    }, null);  \n  }  \n  catch (WebException e)  \n  {  \n    Dispatcher.BeginInvoke(new Action(() => MessageBox.Show(e.ToString())));  \n  }  \n}, null);\n```\n\n```csharp\nWebRequest.Create(\"http://hoge/\")\n    .DownloadStringAsysnc()\n    .SelectMany(url => WebRequest.Create(url).DownloadStringAsync())\n    .ObserveOnDisaptcher()\n    .Subscribe(\n        str =>MeesageBox.Show(str),\n        e => MessageBox.Show(e.ToString());\n    )\npublic static class WebRequestExtensions{\n    return Observable.FromAsyncPattern<WebResponse>(request.BeginGetResponse, request.EndGetResponse)()\n            .Select(res => {\n                using(var stram = res.GetResponseStream())\n                using(var sr = new StreamReader(stream)){\n                    return sr.ReadToEnd();\n                }\n            });\n}\n```\n使用Rx能把Lambda expression的call back改寫成Method Chain，降低閱讀複雜度。","source":"_posts/Rx-IEnumberbale和IObservable.md","raw":"---\ntitle: Rx_IEnumberbale和IObservable\ndate: 2017-11-26 12:25:25\ntags:\n    - Rx\n---\n# Rx可以做的事情\nRx可以處理很多內容，例如async處理、event、IEnumberable等，\n例如 :MouseClick event、MousePosition等等的事情\n還有對於時間的處理，例如Timer，可以想成是指定時間間隔會發生的事件的值。\n還有async，可以想像成某個時間點，才開始進行的處理，且處理完成後，才會得到某個值。\n![](/images/Rx/1333383604_7864.gif)\n\n\n### Rx和Linq\nRx最基本的介面是IObservable(T) (被觀察者)，它與.NET常見的IEnumerable是不同的。\n但是能跟用Linq查找的方法一樣來查找。\n```csharp\nusing System.Reactive.Linq;\n//LinQ to Objects\nvar ix = from x in Enumerable.Range(1,10)\n         where x % 2 == 0\n         select x * x;\nvar rx = from x in Observable.Range(1,10)\n          where x % 2 == 0\n          select x * x;\n```\nRx裡雖然增加了不少新的方法，但是大部分的同名方法操作跟定義上都跟原本的一樣，這降低了很多學習成本。\n雖然介面不同，但是都可以用Linq expression來達成同樣的效果。\n所以IObservable/IObserver 和 IEnumerable/IEnumerator，可以視前者為後者的反轉。\n\n這段Code將描述IObserver介面如何反轉IEnumberator介面的。\n\n```csharp\n//簡化過的IEnumerator<T>\npublic interface IEnumberator<T>\n{\n    T current{get;}\n    bool MoveNext();\n    //void Reset(); Reset現在一般不使用\n}\n//MoveNext改回傳bool,再調用current\npublic interface IEnumberator<T>{\n  //MoveNext回傳T的instance\n  //如果結束的話，則不回傳(== void)\n  //異常的話，拋出\n  //因此有3種類型的回傳\n  T|void|Excecption GetNext(void);\n}\n//根據對偶性(Duality)，將參數和回傳值互換位置\n//以前都是被動式的去取Pull，現在則是主動的拿到Push，\n//所以改用Got\npublic interface IEnumeratorDual<T>{\n    void GotNext(T|void|Exception);\n}\n//進而按照Pull的3種回傳類型，分開定義介面\npublic interface IEnumeratorDual<T>{\n    void GotNext(T);\n    void GotVoid(void);\n    void GotException(Exception);\n}\n//最後視現在用的IObserver<T>介面\npublic interface IObserver<T>{\n    void OnNext(T value);\n    void OnComplete();\n    void OnError(Exception error);\n}\n```\n所以IObservable和IEnumberator視可以相互轉換的，兩人可透過彼此的擴充方法相互轉換。\n且這些擴充方法，在Rx中都已經定義了。\n通過這突，可以清楚的了解IEnumerable是Pull,而IObservable是Push。\n![](/images/Rx/1334422958_4462.gif)\n\n### Event use Rx\n```csharp\n//監聽Mouse move event\npublic static IObservable<MouseEventArgs> MouseMoveAsObservable(this Form form){\n    return Observable.FromEventPattern<MouseEventArgs>(from, \"MouseMode\").Select(e =>e.EventArgs);\n}\npublic void TextChangeAsObservable(){\n    //等待1秒後若沒在收到新的資料，就用最近收到的資料來處理\n    Observable.FromEventPattern<EventArgs>(textBox, \"TextChanged\").Select(_ =>textBox.Text)\n            .Throttle(TimeSpane.FromSeconds(1));\n}\n```\nThrottle可以設定一定的時間間隔，過濾掉一些不必要的輸入，上面範例中，一秒內無論發生多少次變化，只有最後一次的值才會被push出去。\n\n### Async By Rx\n```csharp\nvar req = WebRequest.Create(\"http://hoge/\");  \nreq.BeginGetResponse(ar =>  \n{  \n  try  \n  {  \n    var res = req.EndGetResponse(ar);  \n    var url = new StreamReader(res.GetResponseStream()).ReadToEnd();  \n    var req2 = WebRequest.Create(url); // 在前面請求的結果上，再發請請求 \n    req2.BeginGetResponse(ar2 =>  \n    {  \n      //再多次請求的處理下，往往需要在每一層加上try-catch\n      try  \n      {  \n        var res2 = req2.EndGetResponse(ar2);  \n        var str = new StreamReader(res2.GetResponseStream()).ReadToEnd();  \n        Dispatcher.BeginInvoke(new Action(() => MessageBox.Show(str)));  \n      }  \n      catch (WebException e) { Dispatcher.BeginInvoke(new Action(() => MessageBox.Show(e.ToString()))); }  \n    }, null);  \n  }  \n  catch (WebException e)  \n  {  \n    Dispatcher.BeginInvoke(new Action(() => MessageBox.Show(e.ToString())));  \n  }  \n}, null);\n```\n\n```csharp\nWebRequest.Create(\"http://hoge/\")\n    .DownloadStringAsysnc()\n    .SelectMany(url => WebRequest.Create(url).DownloadStringAsync())\n    .ObserveOnDisaptcher()\n    .Subscribe(\n        str =>MeesageBox.Show(str),\n        e => MessageBox.Show(e.ToString());\n    )\npublic static class WebRequestExtensions{\n    return Observable.FromAsyncPattern<WebResponse>(request.BeginGetResponse, request.EndGetResponse)()\n            .Select(res => {\n                using(var stram = res.GetResponseStream())\n                using(var sr = new StreamReader(stream)){\n                    return sr.ReadToEnd();\n                }\n            });\n}\n```\n使用Rx能把Lambda expression的call back改寫成Method Chain，降低閱讀複雜度。","slug":"Rx-IEnumberbale和IObservable","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmh0016ck6xw26zz3kh","content":"<h1 id=\"Rx可以做的事情\"><a href=\"#Rx可以做的事情\" class=\"headerlink\" title=\"Rx可以做的事情\"></a>Rx可以做的事情</h1><p>Rx可以處理很多內容，例如async處理、event、IEnumberable等，<br>例如 :MouseClick event、MousePosition等等的事情<br>還有對於時間的處理，例如Timer，可以想成是指定時間間隔會發生的事件的值。<br>還有async，可以想像成某個時間點，才開始進行的處理，且處理完成後，才會得到某個值。<br><img src=\"/images/Rx/1333383604_7864.gif\" alt></p>\n<h3 id=\"Rx和Linq\"><a href=\"#Rx和Linq\" class=\"headerlink\" title=\"Rx和Linq\"></a>Rx和Linq</h3><p>Rx最基本的介面是IObservable(T) (被觀察者)，它與.NET常見的IEnumerable是不同的。<br>但是能跟用Linq查找的方法一樣來查找。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Reactive.Linq;</span><br><span class=\"line\"><span class=\"comment\">//LinQ to Objects</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ix = <span class=\"keyword\">from</span> x <span class=\"keyword\">in</span> Enumerable.Range(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">         <span class=\"keyword\">where</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"keyword\">select</span> x * x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rx = <span class=\"keyword\">from</span> x <span class=\"keyword\">in</span> Observable.Range(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">          <span class=\"keyword\">where</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"keyword\">select</span> x * x;</span><br></pre></td></tr></table></figure>\n\n<p>Rx裡雖然增加了不少新的方法，但是大部分的同名方法操作跟定義上都跟原本的一樣，這降低了很多學習成本。<br>雖然介面不同，但是都可以用Linq expression來達成同樣的效果。<br>所以IObservable/IObserver 和 IEnumerable/IEnumerator，可以視前者為後者的反轉。</p>\n<p>這段Code將描述IObserver介面如何反轉IEnumberator介面的。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//簡化過的IEnumerator&lt;T&gt;</span></span><br><span class=\"line\">public interface IEnumberator&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T current&#123;<span class=\"keyword\">get</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">MoveNext</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//void Reset(); Reset現在一般不使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//MoveNext改回傳bool,再調用current</span></span><br><span class=\"line\">public interface IEnumberator&lt;T&gt;&#123;</span><br><span class=\"line\">  <span class=\"comment\">//MoveNext回傳T的instance</span></span><br><span class=\"line\">  <span class=\"comment\">//如果結束的話，則不回傳(== void)</span></span><br><span class=\"line\">  <span class=\"comment\">//異常的話，拋出</span></span><br><span class=\"line\">  <span class=\"comment\">//因此有3種類型的回傳</span></span><br><span class=\"line\">  T|<span class=\"keyword\">void</span>|<span class=\"function\">Excecption <span class=\"title\">GetNext</span>(<span class=\"params\"><span class=\"keyword\">void</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//根據對偶性(Duality)，將參數和回傳值互換位置</span></span><br><span class=\"line\"><span class=\"comment\">//以前都是被動式的去取Pull，現在則是主動的拿到Push，</span></span><br><span class=\"line\"><span class=\"comment\">//所以改用Got</span></span><br><span class=\"line\">public interface IEnumeratorDual&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotNext</span>(<span class=\"params\">T|<span class=\"keyword\">void</span>|Exception</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//進而按照Pull的3種回傳類型，分開定義介面</span></span><br><span class=\"line\">public interface IEnumeratorDual&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotNext</span>(<span class=\"params\">T</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotVoid</span>(<span class=\"params\"><span class=\"keyword\">void</span></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotException</span>(<span class=\"params\">Exception</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最後視現在用的IObserver&lt;T&gt;介面</span></span><br><span class=\"line\">public interface IObserver&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnNext</span>(<span class=\"params\">T <span class=\"keyword\">value</span></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnComplete</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnError</span>(<span class=\"params\">Exception error</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以IObservable和IEnumberator視可以相互轉換的，兩人可透過彼此的擴充方法相互轉換。<br>且這些擴充方法，在Rx中都已經定義了。<br>通過這突，可以清楚的了解IEnumerable是Pull,而IObservable是Push。<br><img src=\"/images/Rx/1334422958_4462.gif\" alt></p>\n<h3 id=\"Event-use-Rx\"><a href=\"#Event-use-Rx\" class=\"headerlink\" title=\"Event use Rx\"></a>Event use Rx</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//監聽Mouse move event</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IObservable&lt;MouseEventArgs&gt; <span class=\"title\">MouseMoveAsObservable</span>(<span class=\"params\"><span class=\"keyword\">this</span> Form form</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.FromEventPattern&lt;MouseEventArgs&gt;(<span class=\"keyword\">from</span>, <span class=\"string\">\"MouseMode\"</span>).Select(e =&gt;e.EventArgs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TextChangeAsObservable</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//等待1秒後若沒在收到新的資料，就用最近收到的資料來處理</span></span><br><span class=\"line\">    Observable.FromEventPattern&lt;EventArgs&gt;(textBox, <span class=\"string\">\"TextChanged\"</span>).Select(_ =&gt;textBox.Text)</span><br><span class=\"line\">            .Throttle(TimeSpane.FromSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Throttle可以設定一定的時間間隔，過濾掉一些不必要的輸入，上面範例中，一秒內無論發生多少次變化，只有最後一次的值才會被push出去。</p>\n<h3 id=\"Async-By-Rx\"><a href=\"#Async-By-Rx\" class=\"headerlink\" title=\"Async By Rx\"></a>Async By Rx</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> req = WebRequest.Create(<span class=\"string\">\"http://hoge/\"</span>);  </span><br><span class=\"line\">req.BeginGetResponse(ar =&gt;  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">try</span>  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = req.EndGetResponse(ar);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"keyword\">new</span> StreamReader(res.GetResponseStream()).ReadToEnd();  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> req2 = WebRequest.Create(url); <span class=\"comment\">// 在前面請求的結果上，再發請請求 </span></span><br><span class=\"line\">    req2.BeginGetResponse(ar2 =&gt;  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">      <span class=\"comment\">//再多次請求的處理下，往往需要在每一層加上try-catch</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span>  </span><br><span class=\"line\">      &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> res2 = req2.EndGetResponse(ar2);  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> StreamReader(res2.GetResponseStream()).ReadToEnd();  </span><br><span class=\"line\">        Dispatcher.BeginInvoke(<span class=\"keyword\">new</span> Action(() =&gt; MessageBox.Show(str)));  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (WebException e) &#123; Dispatcher.BeginInvoke(<span class=\"keyword\">new</span> Action(() =&gt; MessageBox.Show(e.ToString()))); &#125;  </span><br><span class=\"line\">    &#125;, <span class=\"literal\">null</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (WebException e)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    Dispatcher.BeginInvoke(<span class=\"keyword\">new</span> Action(() =&gt; MessageBox.Show(e.ToString())));  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;, <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebRequest.Create(<span class=\"string\">\"http://hoge/\"</span>)</span><br><span class=\"line\">    .DownloadStringAsysnc()</span><br><span class=\"line\">    .SelectMany(url =&gt; WebRequest.Create(url).DownloadStringAsync())</span><br><span class=\"line\">    .ObserveOnDisaptcher()</span><br><span class=\"line\">    .Subscribe(</span><br><span class=\"line\">        str =&gt;MeesageBox.Show(str),</span><br><span class=\"line\">        e =&gt; MessageBox.Show(e.ToString());</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">WebRequestExtensions</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.FromAsyncPattern&lt;WebResponse&gt;(request.BeginGetResponse, request.EndGetResponse)()</span><br><span class=\"line\">            .Select(res =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> stram = res.GetResponseStream())</span><br><span class=\"line\">                <span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(stream))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> sr.ReadToEnd();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用Rx能把Lambda expression的call back改寫成Method Chain，降低閱讀複雜度。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Rx可以做的事情\"><a href=\"#Rx可以做的事情\" class=\"headerlink\" title=\"Rx可以做的事情\"></a>Rx可以做的事情</h1><p>Rx可以處理很多內容，例如async處理、event、IEnumberable等，<br>例如 :MouseClick event、MousePosition等等的事情<br>還有對於時間的處理，例如Timer，可以想成是指定時間間隔會發生的事件的值。<br>還有async，可以想像成某個時間點，才開始進行的處理，且處理完成後，才會得到某個值。<br><img src=\"/images/Rx/1333383604_7864.gif\" alt></p>\n<h3 id=\"Rx和Linq\"><a href=\"#Rx和Linq\" class=\"headerlink\" title=\"Rx和Linq\"></a>Rx和Linq</h3><p>Rx最基本的介面是IObservable(T) (被觀察者)，它與.NET常見的IEnumerable是不同的。<br>但是能跟用Linq查找的方法一樣來查找。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Reactive.Linq;</span><br><span class=\"line\"><span class=\"comment\">//LinQ to Objects</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ix = <span class=\"keyword\">from</span> x <span class=\"keyword\">in</span> Enumerable.Range(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">         <span class=\"keyword\">where</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"keyword\">select</span> x * x;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rx = <span class=\"keyword\">from</span> x <span class=\"keyword\">in</span> Observable.Range(<span class=\"number\">1</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">          <span class=\"keyword\">where</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">          <span class=\"keyword\">select</span> x * x;</span><br></pre></td></tr></table></figure>\n\n<p>Rx裡雖然增加了不少新的方法，但是大部分的同名方法操作跟定義上都跟原本的一樣，這降低了很多學習成本。<br>雖然介面不同，但是都可以用Linq expression來達成同樣的效果。<br>所以IObservable/IObserver 和 IEnumerable/IEnumerator，可以視前者為後者的反轉。</p>\n<p>這段Code將描述IObserver介面如何反轉IEnumberator介面的。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//簡化過的IEnumerator&lt;T&gt;</span></span><br><span class=\"line\">public interface IEnumberator&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T current&#123;<span class=\"keyword\">get</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">MoveNext</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//void Reset(); Reset現在一般不使用</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//MoveNext改回傳bool,再調用current</span></span><br><span class=\"line\">public interface IEnumberator&lt;T&gt;&#123;</span><br><span class=\"line\">  <span class=\"comment\">//MoveNext回傳T的instance</span></span><br><span class=\"line\">  <span class=\"comment\">//如果結束的話，則不回傳(== void)</span></span><br><span class=\"line\">  <span class=\"comment\">//異常的話，拋出</span></span><br><span class=\"line\">  <span class=\"comment\">//因此有3種類型的回傳</span></span><br><span class=\"line\">  T|<span class=\"keyword\">void</span>|<span class=\"function\">Excecption <span class=\"title\">GetNext</span>(<span class=\"params\"><span class=\"keyword\">void</span></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//根據對偶性(Duality)，將參數和回傳值互換位置</span></span><br><span class=\"line\"><span class=\"comment\">//以前都是被動式的去取Pull，現在則是主動的拿到Push，</span></span><br><span class=\"line\"><span class=\"comment\">//所以改用Got</span></span><br><span class=\"line\">public interface IEnumeratorDual&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotNext</span>(<span class=\"params\">T|<span class=\"keyword\">void</span>|Exception</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//進而按照Pull的3種回傳類型，分開定義介面</span></span><br><span class=\"line\">public interface IEnumeratorDual&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotNext</span>(<span class=\"params\">T</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotVoid</span>(<span class=\"params\"><span class=\"keyword\">void</span></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">GotException</span>(<span class=\"params\">Exception</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//最後視現在用的IObserver&lt;T&gt;介面</span></span><br><span class=\"line\">public interface IObserver&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnNext</span>(<span class=\"params\">T <span class=\"keyword\">value</span></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnComplete</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnError</span>(<span class=\"params\">Exception error</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以IObservable和IEnumberator視可以相互轉換的，兩人可透過彼此的擴充方法相互轉換。<br>且這些擴充方法，在Rx中都已經定義了。<br>通過這突，可以清楚的了解IEnumerable是Pull,而IObservable是Push。<br><img src=\"/images/Rx/1334422958_4462.gif\" alt></p>\n<h3 id=\"Event-use-Rx\"><a href=\"#Event-use-Rx\" class=\"headerlink\" title=\"Event use Rx\"></a>Event use Rx</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//監聽Mouse move event</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IObservable&lt;MouseEventArgs&gt; <span class=\"title\">MouseMoveAsObservable</span>(<span class=\"params\"><span class=\"keyword\">this</span> Form form</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.FromEventPattern&lt;MouseEventArgs&gt;(<span class=\"keyword\">from</span>, <span class=\"string\">\"MouseMode\"</span>).Select(e =&gt;e.EventArgs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TextChangeAsObservable</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//等待1秒後若沒在收到新的資料，就用最近收到的資料來處理</span></span><br><span class=\"line\">    Observable.FromEventPattern&lt;EventArgs&gt;(textBox, <span class=\"string\">\"TextChanged\"</span>).Select(_ =&gt;textBox.Text)</span><br><span class=\"line\">            .Throttle(TimeSpane.FromSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Throttle可以設定一定的時間間隔，過濾掉一些不必要的輸入，上面範例中，一秒內無論發生多少次變化，只有最後一次的值才會被push出去。</p>\n<h3 id=\"Async-By-Rx\"><a href=\"#Async-By-Rx\" class=\"headerlink\" title=\"Async By Rx\"></a>Async By Rx</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> req = WebRequest.Create(<span class=\"string\">\"http://hoge/\"</span>);  </span><br><span class=\"line\">req.BeginGetResponse(ar =&gt;  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  <span class=\"keyword\">try</span>  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = req.EndGetResponse(ar);  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"keyword\">new</span> StreamReader(res.GetResponseStream()).ReadToEnd();  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> req2 = WebRequest.Create(url); <span class=\"comment\">// 在前面請求的結果上，再發請請求 </span></span><br><span class=\"line\">    req2.BeginGetResponse(ar2 =&gt;  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">      <span class=\"comment\">//再多次請求的處理下，往往需要在每一層加上try-catch</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span>  </span><br><span class=\"line\">      &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> res2 = req2.EndGetResponse(ar2);  </span><br><span class=\"line\">        <span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> StreamReader(res2.GetResponseStream()).ReadToEnd();  </span><br><span class=\"line\">        Dispatcher.BeginInvoke(<span class=\"keyword\">new</span> Action(() =&gt; MessageBox.Show(str)));  </span><br><span class=\"line\">      &#125;  </span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (WebException e) &#123; Dispatcher.BeginInvoke(<span class=\"keyword\">new</span> Action(() =&gt; MessageBox.Show(e.ToString()))); &#125;  </span><br><span class=\"line\">    &#125;, <span class=\"literal\">null</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (WebException e)  </span><br><span class=\"line\">  &#123;  </span><br><span class=\"line\">    Dispatcher.BeginInvoke(<span class=\"keyword\">new</span> Action(() =&gt; MessageBox.Show(e.ToString())));  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;, <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebRequest.Create(<span class=\"string\">\"http://hoge/\"</span>)</span><br><span class=\"line\">    .DownloadStringAsysnc()</span><br><span class=\"line\">    .SelectMany(url =&gt; WebRequest.Create(url).DownloadStringAsync())</span><br><span class=\"line\">    .ObserveOnDisaptcher()</span><br><span class=\"line\">    .Subscribe(</span><br><span class=\"line\">        str =&gt;MeesageBox.Show(str),</span><br><span class=\"line\">        e =&gt; MessageBox.Show(e.ToString());</span><br><span class=\"line\">    )</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">WebRequestExtensions</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Observable.FromAsyncPattern&lt;WebResponse&gt;(request.BeginGetResponse, request.EndGetResponse)()</span><br><span class=\"line\">            .Select(res =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> stram = res.GetResponseStream())</span><br><span class=\"line\">                <span class=\"keyword\">using</span>(<span class=\"keyword\">var</span> sr = <span class=\"keyword\">new</span> StreamReader(stream))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> sr.ReadToEnd();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用Rx能把Lambda expression的call back改寫成Method Chain，降低閱讀複雜度。</p>\n"},{"title":"Rx簡介","date":"2019-07-14T04:21:13.000Z","_content":"# When to use Rx\n\n### 使用Rx來精心地安排非同步和事件流的計算\n經常為了處理單一事件或是非同步的計算，而把程式的結構搞得非常的複雜，通常會設計狀態機來循序處理。\n還得處理每一個節點的成功跟失敗端點。這讓程式非常難以了解跟維護。\n\nRx的出現，使得這些計算跟處理成為一等公民(First-class citizens)。提供了一些模型和可組合的API來處理這些非同步操作。\n\nSample :\n```csharp\nvar scheduler = new ControlScheduler(this);\nvar keyDown = Observale.FromEvent<KeyEventHandler, KeyEventArgs>(\n    d => d.Invoke, \n    h => textBox.keyUp += h,\n    h => textBox.KeyUp -= h\n);\nvar dictionarySuggest = keyDown.Select( _ =>textBox1.Text)\n                               .Where(text =>!string.IsNullOrEmpty(text))\n                               .DistingctUntilChanged()\n                               .Throttle(TimeSpan.FromMilliseconds(250), scheduler)\n                               .SelectMany(\n                                   text => AsyncLookupInDictionary(text)\n                                            .TakeUntil(keyDown)\n                               );\ndictionarySuggest.Subscribe(\n    results => listView1.Items.AddRange(results.Select(\n        result =>new ListViewItem(result)).ToArray()\n    ),\n    error =>LogError(error)\n);\n```\n\n這範例展示了UI如何接收用戶的鍵入並接收顯示。\n透過Rx建立了一個可觀察的序列(Observable sequence)，依附在KeyUp事件下。\n然後每個事件的上層，嵌入了幾個filter和projection， 確保事件只有透過事件觸發時，會發射event stream和唯一的值。\n像是KeyUp事件每次都會戳一次，但是其他動作並不會。\n並且透過Throttle操作子，確保在250ms區間內的行為只會觸發一次，透過延遲觸發節省昂貴的查找。\n\n在傳統的作法上，Throttling的做法通常是透過timer callback來實作，但是timer本身很可能就會錯誤並拋出exceptions。\n一旦用戶鍵入並過濾完畢，就可以執行字典查找了，但通常這會透過Http來做請求，所以這個操作本身就是個async操作。\nSelectMany操作子允許輕鬆的組合多個async操作，不只組合了成功的狀態，也能追蹤每個單獨操作中出現的異常。\n在以往，這通常是引入不同的callback，\n如果用戶在操作時，仍然繼續鍵入新的值，通常會希望不會在看到之前操作的結果，因此舊的查詢結果就不必再顯示出來。\nTakeUntil操作確保，一旦偵測到新的KeyDown，就會忽略字典的查找。\n\n最後我們訂閱這個observable sequence的結果，我們掛載了2個函式在訂閱的呼叫上\n\n1. 接收成功的計算結果\n2. 接收異常\n\n### 使用Rx開始來處理非同步序列的資料\nRx 遵循著以下幾個文法 OnNext* (OnCompleted|OnError)?。\n這些文法允許多個信息隨著時間的推移而倒入，使得Rx適用於能操作單個信息的操作，甚至於多個信息。\n\nSameple :\n```csharp\n//open a 4GB file for async reading in block of 64k\nvar inFile = new FileStream(@\"d:\\temp\\4GBfile.txt\", \n    FileMode.Open, \n    FileAccess.Read,\n    FileShare.Read,\n    2 << 15,\n    true);\n//open a file for async writing in blocks of 64k\nvar outFile = new FileStream(@\"d:\\temp\\Encrypted.txt\",\n    FileMode.OpenOrCreate,\n    FileAccess.Write,\n    FileShare.None,\n    2 << 15, \n    true);\ninFile.AsyncRead(2 << 15)\n      .Select(Encrypt)\n      .WriteToStream(outFile)\n      .Subscribe(\n          _ =>Console.WriteLine(\"Successfully encrypted the file.\"),\n          error => Console.WriteLine(\n              \"An error occurred while encrypting the file :{0},\n              error.Message\n          )\n      );\n```\n\n在這範例中，4GB的檔案，被整個讀取，並且透過加密存到另一個檔案。\n讀取整份檔案進去記憶體，透過加密跟寫檔出來，這是個非常高成本的操作。\n取而代之，我們依靠Rx可以產生許多個信息的event stream。\n以64K的區塊來非同步讀取文件，這產生了一個observable sequence。\n然後我們分別加密每個區塊，一旦區塊經過加密，就會立即的被發送到下一個管線，已被保存到另一份文件中。\nWriteToStream操作就是一個可以處理多個信息的非同步操作。\n\n### The Rx Contract\nIObservable和IObserver只用來這些方法的參數和回傳型別。\nRx類別對這兩個介面做了比.net更多的假設。\n這些假設使得所有Rx類型的producer和consumbers都應該遵從的行為契約。\n這份契約使得去推論和證明程式的正確性。\n\n### Rx的假設文法\n信息被送到IObserver介面時必須遵從的文法 :\nOnNext* (OnCompleted |OnError)?\n這組文法允許observable sequences去送出任意數量的OnNext信息到 被訂閱的observer實例中。\n或是單一結果的成功(OnCompleted), 或是任何的失敗(OnError)。\n\n單一信息能很明確的指示出這一個observer sequence的消費者可以安全地執行清理操作。\n單一的失敗信息，能確保多個observable sequences可以終止。\n\nSample :\n```csharp\nvar count = 0;\nxs.Subscribe(v => {\n    count++ ;\n    },\n    e => Console.WriteLine(e.Message),\n    () =>Console.WriteLine(\"OnNext has been called {0} times.\"), count)\n;\n```\n這範例我們能安全的假設一旦呼叫了OnComplete，OnNext中的調用變數不會被改變。\n\n### 假設observer實例可以被當作Rx給序列化呼叫\n由於Rx是使用發布-訂閱模式，在.net中是支援multi threadss的，因此不同的信息可能同時到達不同的thread被處理。\n如果observale sequenc的消費者就不得不再每個地方來處理這問題，此時程式就需要實行大量的內文管理，來避免併發問題。\n這種方式寫的程式非常難以維護，且效能可能很低落。\n\n由於不是所有的observable sequence都有信息是來自不同的執行緒的上下文，\n因此只有下述這種obervale sequence的producer才需要做序列化，確保消費者，可以安全的假設信息是以序列化的方式到達。\n\nSample :\n```csharp\nvar count = 0;\nxs.Subscribe(v=>{\n    count++;\n    Console.WriteLine(\"OnNext has been called {0} times\", count)\n});\n```\n在這範例中，不需要對count做任何lock或是讀寫互斥鎖的實作，因為只有OnNext的呼叫可以ˇ隨時得讀取和寫值到count。\n\n### 確保在OnError和OnCompleted之後，資源會被清除\n上面指出了，只要OnError或是OnCompleted被調用後，就不會再有信息被送達。\n因此可以確保在OnError或是OnCompleted被觸發後，清除任何訂閱使用的資源。\n\nSample :\n```csharp\nObservavle.Using(\n    () => new FileStream(@\"d:\\temp\\test.txt\", \n        FileMode.Create),\n    fs => Observable.Range(0, 10000)\n            .Select(v => Encoding.ASCII.GetBytes(v.ToString()))\n            .WriteToStream(fs))\n          .Subscribe();\n```\n這範例中使用了Using去建立資源，這資源將會被disposed在unsubscription被呼叫之後。\n\n### 盡最大努力去退訂所有未完成的工作\n當unsubscribe被呼叫後，observable sequence將會盡最大的努力去阻止所有未完成的工作。\n這也意味著還沒開始的排隊作業都不會被啟用。\n任何已經在進行中的工作都可能完成。因為放棄正在進行中的工作並不是一個安全的行為。\n只是這些工作的結果並不會被發送到任何以前訂閱的觀察者的實例中了。\n\nSample 1 :\n```csharp\nObservable.Timer(TimeSpan.FromSeconds(2)).Subscribe(...)Displose()\n```\n在這範例中，訂閱由Timer建立出來的oberservable sequence將在ThreadPool scheduler去形成一個排隊列緒，在2秒內去發送OnNext信息。\n訂閱之後立即取消，由於排成計畫尚未開始，因此將從scheduler中刪除。\n\nSample 2 :\n```csharp\nObservable.Start(() => {\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    return 5;\n}).Subscribe(...).Dispose();\n```\n在這範例之中，Start操作子，立即安排lambda function做完參數。訂閱後將observer實例作為此執行的監聽器。\n由於一旦訂閱被執行，它將繼續運行並且忽略返回值5。\n\n","source":"_posts/Rx簡介.md","raw":"---\ntitle: Rx簡介\ndate: 2019-07-14 12:21:13\ntags:\n    - Rx\n---\n# When to use Rx\n\n### 使用Rx來精心地安排非同步和事件流的計算\n經常為了處理單一事件或是非同步的計算，而把程式的結構搞得非常的複雜，通常會設計狀態機來循序處理。\n還得處理每一個節點的成功跟失敗端點。這讓程式非常難以了解跟維護。\n\nRx的出現，使得這些計算跟處理成為一等公民(First-class citizens)。提供了一些模型和可組合的API來處理這些非同步操作。\n\nSample :\n```csharp\nvar scheduler = new ControlScheduler(this);\nvar keyDown = Observale.FromEvent<KeyEventHandler, KeyEventArgs>(\n    d => d.Invoke, \n    h => textBox.keyUp += h,\n    h => textBox.KeyUp -= h\n);\nvar dictionarySuggest = keyDown.Select( _ =>textBox1.Text)\n                               .Where(text =>!string.IsNullOrEmpty(text))\n                               .DistingctUntilChanged()\n                               .Throttle(TimeSpan.FromMilliseconds(250), scheduler)\n                               .SelectMany(\n                                   text => AsyncLookupInDictionary(text)\n                                            .TakeUntil(keyDown)\n                               );\ndictionarySuggest.Subscribe(\n    results => listView1.Items.AddRange(results.Select(\n        result =>new ListViewItem(result)).ToArray()\n    ),\n    error =>LogError(error)\n);\n```\n\n這範例展示了UI如何接收用戶的鍵入並接收顯示。\n透過Rx建立了一個可觀察的序列(Observable sequence)，依附在KeyUp事件下。\n然後每個事件的上層，嵌入了幾個filter和projection， 確保事件只有透過事件觸發時，會發射event stream和唯一的值。\n像是KeyUp事件每次都會戳一次，但是其他動作並不會。\n並且透過Throttle操作子，確保在250ms區間內的行為只會觸發一次，透過延遲觸發節省昂貴的查找。\n\n在傳統的作法上，Throttling的做法通常是透過timer callback來實作，但是timer本身很可能就會錯誤並拋出exceptions。\n一旦用戶鍵入並過濾完畢，就可以執行字典查找了，但通常這會透過Http來做請求，所以這個操作本身就是個async操作。\nSelectMany操作子允許輕鬆的組合多個async操作，不只組合了成功的狀態，也能追蹤每個單獨操作中出現的異常。\n在以往，這通常是引入不同的callback，\n如果用戶在操作時，仍然繼續鍵入新的值，通常會希望不會在看到之前操作的結果，因此舊的查詢結果就不必再顯示出來。\nTakeUntil操作確保，一旦偵測到新的KeyDown，就會忽略字典的查找。\n\n最後我們訂閱這個observable sequence的結果，我們掛載了2個函式在訂閱的呼叫上\n\n1. 接收成功的計算結果\n2. 接收異常\n\n### 使用Rx開始來處理非同步序列的資料\nRx 遵循著以下幾個文法 OnNext* (OnCompleted|OnError)?。\n這些文法允許多個信息隨著時間的推移而倒入，使得Rx適用於能操作單個信息的操作，甚至於多個信息。\n\nSameple :\n```csharp\n//open a 4GB file for async reading in block of 64k\nvar inFile = new FileStream(@\"d:\\temp\\4GBfile.txt\", \n    FileMode.Open, \n    FileAccess.Read,\n    FileShare.Read,\n    2 << 15,\n    true);\n//open a file for async writing in blocks of 64k\nvar outFile = new FileStream(@\"d:\\temp\\Encrypted.txt\",\n    FileMode.OpenOrCreate,\n    FileAccess.Write,\n    FileShare.None,\n    2 << 15, \n    true);\ninFile.AsyncRead(2 << 15)\n      .Select(Encrypt)\n      .WriteToStream(outFile)\n      .Subscribe(\n          _ =>Console.WriteLine(\"Successfully encrypted the file.\"),\n          error => Console.WriteLine(\n              \"An error occurred while encrypting the file :{0},\n              error.Message\n          )\n      );\n```\n\n在這範例中，4GB的檔案，被整個讀取，並且透過加密存到另一個檔案。\n讀取整份檔案進去記憶體，透過加密跟寫檔出來，這是個非常高成本的操作。\n取而代之，我們依靠Rx可以產生許多個信息的event stream。\n以64K的區塊來非同步讀取文件，這產生了一個observable sequence。\n然後我們分別加密每個區塊，一旦區塊經過加密，就會立即的被發送到下一個管線，已被保存到另一份文件中。\nWriteToStream操作就是一個可以處理多個信息的非同步操作。\n\n### The Rx Contract\nIObservable和IObserver只用來這些方法的參數和回傳型別。\nRx類別對這兩個介面做了比.net更多的假設。\n這些假設使得所有Rx類型的producer和consumbers都應該遵從的行為契約。\n這份契約使得去推論和證明程式的正確性。\n\n### Rx的假設文法\n信息被送到IObserver介面時必須遵從的文法 :\nOnNext* (OnCompleted |OnError)?\n這組文法允許observable sequences去送出任意數量的OnNext信息到 被訂閱的observer實例中。\n或是單一結果的成功(OnCompleted), 或是任何的失敗(OnError)。\n\n單一信息能很明確的指示出這一個observer sequence的消費者可以安全地執行清理操作。\n單一的失敗信息，能確保多個observable sequences可以終止。\n\nSample :\n```csharp\nvar count = 0;\nxs.Subscribe(v => {\n    count++ ;\n    },\n    e => Console.WriteLine(e.Message),\n    () =>Console.WriteLine(\"OnNext has been called {0} times.\"), count)\n;\n```\n這範例我們能安全的假設一旦呼叫了OnComplete，OnNext中的調用變數不會被改變。\n\n### 假設observer實例可以被當作Rx給序列化呼叫\n由於Rx是使用發布-訂閱模式，在.net中是支援multi threadss的，因此不同的信息可能同時到達不同的thread被處理。\n如果observale sequenc的消費者就不得不再每個地方來處理這問題，此時程式就需要實行大量的內文管理，來避免併發問題。\n這種方式寫的程式非常難以維護，且效能可能很低落。\n\n由於不是所有的observable sequence都有信息是來自不同的執行緒的上下文，\n因此只有下述這種obervale sequence的producer才需要做序列化，確保消費者，可以安全的假設信息是以序列化的方式到達。\n\nSample :\n```csharp\nvar count = 0;\nxs.Subscribe(v=>{\n    count++;\n    Console.WriteLine(\"OnNext has been called {0} times\", count)\n});\n```\n在這範例中，不需要對count做任何lock或是讀寫互斥鎖的實作，因為只有OnNext的呼叫可以ˇ隨時得讀取和寫值到count。\n\n### 確保在OnError和OnCompleted之後，資源會被清除\n上面指出了，只要OnError或是OnCompleted被調用後，就不會再有信息被送達。\n因此可以確保在OnError或是OnCompleted被觸發後，清除任何訂閱使用的資源。\n\nSample :\n```csharp\nObservavle.Using(\n    () => new FileStream(@\"d:\\temp\\test.txt\", \n        FileMode.Create),\n    fs => Observable.Range(0, 10000)\n            .Select(v => Encoding.ASCII.GetBytes(v.ToString()))\n            .WriteToStream(fs))\n          .Subscribe();\n```\n這範例中使用了Using去建立資源，這資源將會被disposed在unsubscription被呼叫之後。\n\n### 盡最大努力去退訂所有未完成的工作\n當unsubscribe被呼叫後，observable sequence將會盡最大的努力去阻止所有未完成的工作。\n這也意味著還沒開始的排隊作業都不會被啟用。\n任何已經在進行中的工作都可能完成。因為放棄正在進行中的工作並不是一個安全的行為。\n只是這些工作的結果並不會被發送到任何以前訂閱的觀察者的實例中了。\n\nSample 1 :\n```csharp\nObservable.Timer(TimeSpan.FromSeconds(2)).Subscribe(...)Displose()\n```\n在這範例中，訂閱由Timer建立出來的oberservable sequence將在ThreadPool scheduler去形成一個排隊列緒，在2秒內去發送OnNext信息。\n訂閱之後立即取消，由於排成計畫尚未開始，因此將從scheduler中刪除。\n\nSample 2 :\n```csharp\nObservable.Start(() => {\n    Thread.Sleep(TimeSpan.FromSeconds(2));\n    return 5;\n}).Subscribe(...).Dispose();\n```\n在這範例之中，Start操作子，立即安排lambda function做完參數。訂閱後將observer實例作為此執行的監聽器。\n由於一旦訂閱被執行，它將繼續運行並且忽略返回值5。\n\n","slug":"Rx簡介","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmi0018ck6xl0h67auu","content":"<h1 id=\"When-to-use-Rx\"><a href=\"#When-to-use-Rx\" class=\"headerlink\" title=\"When to use Rx\"></a>When to use Rx</h1><h3 id=\"使用Rx來精心地安排非同步和事件流的計算\"><a href=\"#使用Rx來精心地安排非同步和事件流的計算\" class=\"headerlink\" title=\"使用Rx來精心地安排非同步和事件流的計算\"></a>使用Rx來精心地安排非同步和事件流的計算</h3><p>經常為了處理單一事件或是非同步的計算，而把程式的結構搞得非常的複雜，通常會設計狀態機來循序處理。<br>還得處理每一個節點的成功跟失敗端點。這讓程式非常難以了解跟維護。</p>\n<p>Rx的出現，使得這些計算跟處理成為一等公民(First-class citizens)。提供了一些模型和可組合的API來處理這些非同步操作。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scheduler = <span class=\"keyword\">new</span> ControlScheduler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> keyDown = Observale.FromEvent&lt;KeyEventHandler, KeyEventArgs&gt;(</span><br><span class=\"line\">    d =&gt; d.Invoke, </span><br><span class=\"line\">    h =&gt; textBox.keyUp += h,</span><br><span class=\"line\">    h =&gt; textBox.KeyUp -= h</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dictionarySuggest = keyDown.Select( _ =&gt;textBox1.Text)</span><br><span class=\"line\">                               .Where(text =&gt;!<span class=\"keyword\">string</span>.IsNullOrEmpty(text))</span><br><span class=\"line\">                               .DistingctUntilChanged()</span><br><span class=\"line\">                               .Throttle(TimeSpan.FromMilliseconds(<span class=\"number\">250</span>), scheduler)</span><br><span class=\"line\">                               .SelectMany(</span><br><span class=\"line\">                                   text =&gt; AsyncLookupInDictionary(text)</span><br><span class=\"line\">                                            .TakeUntil(keyDown)</span><br><span class=\"line\">                               );</span><br><span class=\"line\">dictionarySuggest.Subscribe(</span><br><span class=\"line\">    results =&gt; listView1.Items.AddRange(results.Select(</span><br><span class=\"line\">        result =&gt;<span class=\"keyword\">new</span> ListViewItem(result)).ToArray()</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    error =&gt;LogError(error)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>這範例展示了UI如何接收用戶的鍵入並接收顯示。<br>透過Rx建立了一個可觀察的序列(Observable sequence)，依附在KeyUp事件下。<br>然後每個事件的上層，嵌入了幾個filter和projection， 確保事件只有透過事件觸發時，會發射event stream和唯一的值。<br>像是KeyUp事件每次都會戳一次，但是其他動作並不會。<br>並且透過Throttle操作子，確保在250ms區間內的行為只會觸發一次，透過延遲觸發節省昂貴的查找。</p>\n<p>在傳統的作法上，Throttling的做法通常是透過timer callback來實作，但是timer本身很可能就會錯誤並拋出exceptions。<br>一旦用戶鍵入並過濾完畢，就可以執行字典查找了，但通常這會透過Http來做請求，所以這個操作本身就是個async操作。<br>SelectMany操作子允許輕鬆的組合多個async操作，不只組合了成功的狀態，也能追蹤每個單獨操作中出現的異常。<br>在以往，這通常是引入不同的callback，<br>如果用戶在操作時，仍然繼續鍵入新的值，通常會希望不會在看到之前操作的結果，因此舊的查詢結果就不必再顯示出來。<br>TakeUntil操作確保，一旦偵測到新的KeyDown，就會忽略字典的查找。</p>\n<p>最後我們訂閱這個observable sequence的結果，我們掛載了2個函式在訂閱的呼叫上</p>\n<ol>\n<li>接收成功的計算結果</li>\n<li>接收異常</li>\n</ol>\n<h3 id=\"使用Rx開始來處理非同步序列的資料\"><a href=\"#使用Rx開始來處理非同步序列的資料\" class=\"headerlink\" title=\"使用Rx開始來處理非同步序列的資料\"></a>使用Rx開始來處理非同步序列的資料</h3><p>Rx 遵循著以下幾個文法 OnNext* (OnCompleted|OnError)?。<br>這些文法允許多個信息隨著時間的推移而倒入，使得Rx適用於能操作單個信息的操作，甚至於多個信息。</p>\n<p>Sameple :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//open a 4GB file for async reading in block of 64k</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inFile = <span class=\"keyword\">new</span> FileStream(<span class=\"string\">@\"d:\\temp\\4GBfile.txt\"</span>, </span><br><span class=\"line\">    FileMode.Open, </span><br><span class=\"line\">    FileAccess.Read,</span><br><span class=\"line\">    FileShare.Read,</span><br><span class=\"line\">    <span class=\"number\">2</span> &lt;&lt; <span class=\"number\">15</span>,</span><br><span class=\"line\">    <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//open a file for async writing in blocks of 64k</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> outFile = <span class=\"keyword\">new</span> FileStream(<span class=\"string\">@\"d:\\temp\\Encrypted.txt\"</span>,</span><br><span class=\"line\">    FileMode.OpenOrCreate,</span><br><span class=\"line\">    FileAccess.Write,</span><br><span class=\"line\">    FileShare.None,</span><br><span class=\"line\">    <span class=\"number\">2</span> &lt;&lt; <span class=\"number\">15</span>, </span><br><span class=\"line\">    <span class=\"literal\">true</span>);</span><br><span class=\"line\">inFile.AsyncRead(<span class=\"number\">2</span> &lt;&lt; <span class=\"number\">15</span>)</span><br><span class=\"line\">      .Select(Encrypt)</span><br><span class=\"line\">      .WriteToStream(outFile)</span><br><span class=\"line\">      .Subscribe(</span><br><span class=\"line\">          _ =&gt;Console.WriteLine(<span class=\"string\">\"Successfully encrypted the file.\"</span>),</span><br><span class=\"line\">          error =&gt; Console.WriteLine(</span><br><span class=\"line\">              <span class=\"string\">\"An error occurred while encrypting the file :&#123;0&#125;,</span></span><br><span class=\"line\"><span class=\"string\">              error.Message</span></span><br><span class=\"line\"><span class=\"string\">          )</span></span><br><span class=\"line\"><span class=\"string\">      );</span></span><br></pre></td></tr></table></figure>\n\n<p>在這範例中，4GB的檔案，被整個讀取，並且透過加密存到另一個檔案。<br>讀取整份檔案進去記憶體，透過加密跟寫檔出來，這是個非常高成本的操作。<br>取而代之，我們依靠Rx可以產生許多個信息的event stream。<br>以64K的區塊來非同步讀取文件，這產生了一個observable sequence。<br>然後我們分別加密每個區塊，一旦區塊經過加密，就會立即的被發送到下一個管線，已被保存到另一份文件中。<br>WriteToStream操作就是一個可以處理多個信息的非同步操作。</p>\n<h3 id=\"The-Rx-Contract\"><a href=\"#The-Rx-Contract\" class=\"headerlink\" title=\"The Rx Contract\"></a>The Rx Contract</h3><p>IObservable和IObserver只用來這些方法的參數和回傳型別。<br>Rx類別對這兩個介面做了比.net更多的假設。<br>這些假設使得所有Rx類型的producer和consumbers都應該遵從的行為契約。<br>這份契約使得去推論和證明程式的正確性。</p>\n<h3 id=\"Rx的假設文法\"><a href=\"#Rx的假設文法\" class=\"headerlink\" title=\"Rx的假設文法\"></a>Rx的假設文法</h3><p>信息被送到IObserver介面時必須遵從的文法 :<br>OnNext* (OnCompleted |OnError)?<br>這組文法允許observable sequences去送出任意數量的OnNext信息到 被訂閱的observer實例中。<br>或是單一結果的成功(OnCompleted), 或是任何的失敗(OnError)。</p>\n<p>單一信息能很明確的指示出這一個observer sequence的消費者可以安全地執行清理操作。<br>單一的失敗信息，能確保多個observable sequences可以終止。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">xs.Subscribe(v =&gt; &#123;</span><br><span class=\"line\">    count++ ;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e =&gt; Console.WriteLine(e.Message),</span><br><span class=\"line\">    () =&gt;Console.WriteLine(<span class=\"string\">\"OnNext has been called &#123;0&#125; times.\"</span>), count)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>這範例我們能安全的假設一旦呼叫了OnComplete，OnNext中的調用變數不會被改變。</p>\n<h3 id=\"假設observer實例可以被當作Rx給序列化呼叫\"><a href=\"#假設observer實例可以被當作Rx給序列化呼叫\" class=\"headerlink\" title=\"假設observer實例可以被當作Rx給序列化呼叫\"></a>假設observer實例可以被當作Rx給序列化呼叫</h3><p>由於Rx是使用發布-訂閱模式，在.net中是支援multi threadss的，因此不同的信息可能同時到達不同的thread被處理。<br>如果observale sequenc的消費者就不得不再每個地方來處理這問題，此時程式就需要實行大量的內文管理，來避免併發問題。<br>這種方式寫的程式非常難以維護，且效能可能很低落。</p>\n<p>由於不是所有的observable sequence都有信息是來自不同的執行緒的上下文，<br>因此只有下述這種obervale sequence的producer才需要做序列化，確保消費者，可以安全的假設信息是以序列化的方式到達。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">xs.Subscribe(v=&gt;&#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"OnNext has been called &#123;0&#125; times\"</span>, count)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在這範例中，不需要對count做任何lock或是讀寫互斥鎖的實作，因為只有OnNext的呼叫可以ˇ隨時得讀取和寫值到count。</p>\n<h3 id=\"確保在OnError和OnCompleted之後，資源會被清除\"><a href=\"#確保在OnError和OnCompleted之後，資源會被清除\" class=\"headerlink\" title=\"確保在OnError和OnCompleted之後，資源會被清除\"></a>確保在OnError和OnCompleted之後，資源會被清除</h3><p>上面指出了，只要OnError或是OnCompleted被調用後，就不會再有信息被送達。<br>因此可以確保在OnError或是OnCompleted被觸發後，清除任何訂閱使用的資源。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observavle.Using(</span><br><span class=\"line\">    () =&gt; <span class=\"keyword\">new</span> FileStream(<span class=\"string\">@\"d:\\temp\\test.txt\"</span>, </span><br><span class=\"line\">        FileMode.Create),</span><br><span class=\"line\">    fs =&gt; Observable.Range(<span class=\"number\">0</span>, <span class=\"number\">10000</span>)</span><br><span class=\"line\">            .Select(v =&gt; Encoding.ASCII.GetBytes(v.ToString()))</span><br><span class=\"line\">            .WriteToStream(fs))</span><br><span class=\"line\">          .Subscribe();</span><br></pre></td></tr></table></figure>\n\n<p>這範例中使用了Using去建立資源，這資源將會被disposed在unsubscription被呼叫之後。</p>\n<h3 id=\"盡最大努力去退訂所有未完成的工作\"><a href=\"#盡最大努力去退訂所有未完成的工作\" class=\"headerlink\" title=\"盡最大努力去退訂所有未完成的工作\"></a>盡最大努力去退訂所有未完成的工作</h3><p>當unsubscribe被呼叫後，observable sequence將會盡最大的努力去阻止所有未完成的工作。<br>這也意味著還沒開始的排隊作業都不會被啟用。<br>任何已經在進行中的工作都可能完成。因為放棄正在進行中的工作並不是一個安全的行為。<br>只是這些工作的結果並不會被發送到任何以前訂閱的觀察者的實例中了。</p>\n<p>Sample 1 :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.Timer(TimeSpan.FromSeconds(<span class=\"number\">2</span>)).Subscribe(...)Displose()</span><br></pre></td></tr></table></figure>\n\n<p>在這範例中，訂閱由Timer建立出來的oberservable sequence將在ThreadPool scheduler去形成一個排隊列緒，在2秒內去發送OnNext信息。<br>訂閱之後立即取消，由於排成計畫尚未開始，因此將從scheduler中刪除。</p>\n<p>Sample 2 :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.Start(() =&gt; &#123;</span><br><span class=\"line\">    Thread.Sleep(TimeSpan.FromSeconds(<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;).Subscribe(...).Dispose();</span><br></pre></td></tr></table></figure>\n\n<p>在這範例之中，Start操作子，立即安排lambda function做完參數。訂閱後將observer實例作為此執行的監聽器。<br>由於一旦訂閱被執行，它將繼續運行並且忽略返回值5。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"When-to-use-Rx\"><a href=\"#When-to-use-Rx\" class=\"headerlink\" title=\"When to use Rx\"></a>When to use Rx</h1><h3 id=\"使用Rx來精心地安排非同步和事件流的計算\"><a href=\"#使用Rx來精心地安排非同步和事件流的計算\" class=\"headerlink\" title=\"使用Rx來精心地安排非同步和事件流的計算\"></a>使用Rx來精心地安排非同步和事件流的計算</h3><p>經常為了處理單一事件或是非同步的計算，而把程式的結構搞得非常的複雜，通常會設計狀態機來循序處理。<br>還得處理每一個節點的成功跟失敗端點。這讓程式非常難以了解跟維護。</p>\n<p>Rx的出現，使得這些計算跟處理成為一等公民(First-class citizens)。提供了一些模型和可組合的API來處理這些非同步操作。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scheduler = <span class=\"keyword\">new</span> ControlScheduler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> keyDown = Observale.FromEvent&lt;KeyEventHandler, KeyEventArgs&gt;(</span><br><span class=\"line\">    d =&gt; d.Invoke, </span><br><span class=\"line\">    h =&gt; textBox.keyUp += h,</span><br><span class=\"line\">    h =&gt; textBox.KeyUp -= h</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dictionarySuggest = keyDown.Select( _ =&gt;textBox1.Text)</span><br><span class=\"line\">                               .Where(text =&gt;!<span class=\"keyword\">string</span>.IsNullOrEmpty(text))</span><br><span class=\"line\">                               .DistingctUntilChanged()</span><br><span class=\"line\">                               .Throttle(TimeSpan.FromMilliseconds(<span class=\"number\">250</span>), scheduler)</span><br><span class=\"line\">                               .SelectMany(</span><br><span class=\"line\">                                   text =&gt; AsyncLookupInDictionary(text)</span><br><span class=\"line\">                                            .TakeUntil(keyDown)</span><br><span class=\"line\">                               );</span><br><span class=\"line\">dictionarySuggest.Subscribe(</span><br><span class=\"line\">    results =&gt; listView1.Items.AddRange(results.Select(</span><br><span class=\"line\">        result =&gt;<span class=\"keyword\">new</span> ListViewItem(result)).ToArray()</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    error =&gt;LogError(error)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>這範例展示了UI如何接收用戶的鍵入並接收顯示。<br>透過Rx建立了一個可觀察的序列(Observable sequence)，依附在KeyUp事件下。<br>然後每個事件的上層，嵌入了幾個filter和projection， 確保事件只有透過事件觸發時，會發射event stream和唯一的值。<br>像是KeyUp事件每次都會戳一次，但是其他動作並不會。<br>並且透過Throttle操作子，確保在250ms區間內的行為只會觸發一次，透過延遲觸發節省昂貴的查找。</p>\n<p>在傳統的作法上，Throttling的做法通常是透過timer callback來實作，但是timer本身很可能就會錯誤並拋出exceptions。<br>一旦用戶鍵入並過濾完畢，就可以執行字典查找了，但通常這會透過Http來做請求，所以這個操作本身就是個async操作。<br>SelectMany操作子允許輕鬆的組合多個async操作，不只組合了成功的狀態，也能追蹤每個單獨操作中出現的異常。<br>在以往，這通常是引入不同的callback，<br>如果用戶在操作時，仍然繼續鍵入新的值，通常會希望不會在看到之前操作的結果，因此舊的查詢結果就不必再顯示出來。<br>TakeUntil操作確保，一旦偵測到新的KeyDown，就會忽略字典的查找。</p>\n<p>最後我們訂閱這個observable sequence的結果，我們掛載了2個函式在訂閱的呼叫上</p>\n<ol>\n<li>接收成功的計算結果</li>\n<li>接收異常</li>\n</ol>\n<h3 id=\"使用Rx開始來處理非同步序列的資料\"><a href=\"#使用Rx開始來處理非同步序列的資料\" class=\"headerlink\" title=\"使用Rx開始來處理非同步序列的資料\"></a>使用Rx開始來處理非同步序列的資料</h3><p>Rx 遵循著以下幾個文法 OnNext* (OnCompleted|OnError)?。<br>這些文法允許多個信息隨著時間的推移而倒入，使得Rx適用於能操作單個信息的操作，甚至於多個信息。</p>\n<p>Sameple :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//open a 4GB file for async reading in block of 64k</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inFile = <span class=\"keyword\">new</span> FileStream(<span class=\"string\">@\"d:\\temp\\4GBfile.txt\"</span>, </span><br><span class=\"line\">    FileMode.Open, </span><br><span class=\"line\">    FileAccess.Read,</span><br><span class=\"line\">    FileShare.Read,</span><br><span class=\"line\">    <span class=\"number\">2</span> &lt;&lt; <span class=\"number\">15</span>,</span><br><span class=\"line\">    <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//open a file for async writing in blocks of 64k</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> outFile = <span class=\"keyword\">new</span> FileStream(<span class=\"string\">@\"d:\\temp\\Encrypted.txt\"</span>,</span><br><span class=\"line\">    FileMode.OpenOrCreate,</span><br><span class=\"line\">    FileAccess.Write,</span><br><span class=\"line\">    FileShare.None,</span><br><span class=\"line\">    <span class=\"number\">2</span> &lt;&lt; <span class=\"number\">15</span>, </span><br><span class=\"line\">    <span class=\"literal\">true</span>);</span><br><span class=\"line\">inFile.AsyncRead(<span class=\"number\">2</span> &lt;&lt; <span class=\"number\">15</span>)</span><br><span class=\"line\">      .Select(Encrypt)</span><br><span class=\"line\">      .WriteToStream(outFile)</span><br><span class=\"line\">      .Subscribe(</span><br><span class=\"line\">          _ =&gt;Console.WriteLine(<span class=\"string\">\"Successfully encrypted the file.\"</span>),</span><br><span class=\"line\">          error =&gt; Console.WriteLine(</span><br><span class=\"line\">              <span class=\"string\">\"An error occurred while encrypting the file :&#123;0&#125;,</span></span><br><span class=\"line\"><span class=\"string\">              error.Message</span></span><br><span class=\"line\"><span class=\"string\">          )</span></span><br><span class=\"line\"><span class=\"string\">      );</span></span><br></pre></td></tr></table></figure>\n\n<p>在這範例中，4GB的檔案，被整個讀取，並且透過加密存到另一個檔案。<br>讀取整份檔案進去記憶體，透過加密跟寫檔出來，這是個非常高成本的操作。<br>取而代之，我們依靠Rx可以產生許多個信息的event stream。<br>以64K的區塊來非同步讀取文件，這產生了一個observable sequence。<br>然後我們分別加密每個區塊，一旦區塊經過加密，就會立即的被發送到下一個管線，已被保存到另一份文件中。<br>WriteToStream操作就是一個可以處理多個信息的非同步操作。</p>\n<h3 id=\"The-Rx-Contract\"><a href=\"#The-Rx-Contract\" class=\"headerlink\" title=\"The Rx Contract\"></a>The Rx Contract</h3><p>IObservable和IObserver只用來這些方法的參數和回傳型別。<br>Rx類別對這兩個介面做了比.net更多的假設。<br>這些假設使得所有Rx類型的producer和consumbers都應該遵從的行為契約。<br>這份契約使得去推論和證明程式的正確性。</p>\n<h3 id=\"Rx的假設文法\"><a href=\"#Rx的假設文法\" class=\"headerlink\" title=\"Rx的假設文法\"></a>Rx的假設文法</h3><p>信息被送到IObserver介面時必須遵從的文法 :<br>OnNext* (OnCompleted |OnError)?<br>這組文法允許observable sequences去送出任意數量的OnNext信息到 被訂閱的observer實例中。<br>或是單一結果的成功(OnCompleted), 或是任何的失敗(OnError)。</p>\n<p>單一信息能很明確的指示出這一個observer sequence的消費者可以安全地執行清理操作。<br>單一的失敗信息，能確保多個observable sequences可以終止。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">xs.Subscribe(v =&gt; &#123;</span><br><span class=\"line\">    count++ ;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    e =&gt; Console.WriteLine(e.Message),</span><br><span class=\"line\">    () =&gt;Console.WriteLine(<span class=\"string\">\"OnNext has been called &#123;0&#125; times.\"</span>), count)</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n<p>這範例我們能安全的假設一旦呼叫了OnComplete，OnNext中的調用變數不會被改變。</p>\n<h3 id=\"假設observer實例可以被當作Rx給序列化呼叫\"><a href=\"#假設observer實例可以被當作Rx給序列化呼叫\" class=\"headerlink\" title=\"假設observer實例可以被當作Rx給序列化呼叫\"></a>假設observer實例可以被當作Rx給序列化呼叫</h3><p>由於Rx是使用發布-訂閱模式，在.net中是支援multi threadss的，因此不同的信息可能同時到達不同的thread被處理。<br>如果observale sequenc的消費者就不得不再每個地方來處理這問題，此時程式就需要實行大量的內文管理，來避免併發問題。<br>這種方式寫的程式非常難以維護，且效能可能很低落。</p>\n<p>由於不是所有的observable sequence都有信息是來自不同的執行緒的上下文，<br>因此只有下述這種obervale sequence的producer才需要做序列化，確保消費者，可以安全的假設信息是以序列化的方式到達。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">xs.Subscribe(v=&gt;&#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"OnNext has been called &#123;0&#125; times\"</span>, count)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在這範例中，不需要對count做任何lock或是讀寫互斥鎖的實作，因為只有OnNext的呼叫可以ˇ隨時得讀取和寫值到count。</p>\n<h3 id=\"確保在OnError和OnCompleted之後，資源會被清除\"><a href=\"#確保在OnError和OnCompleted之後，資源會被清除\" class=\"headerlink\" title=\"確保在OnError和OnCompleted之後，資源會被清除\"></a>確保在OnError和OnCompleted之後，資源會被清除</h3><p>上面指出了，只要OnError或是OnCompleted被調用後，就不會再有信息被送達。<br>因此可以確保在OnError或是OnCompleted被觸發後，清除任何訂閱使用的資源。</p>\n<p>Sample :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observavle.Using(</span><br><span class=\"line\">    () =&gt; <span class=\"keyword\">new</span> FileStream(<span class=\"string\">@\"d:\\temp\\test.txt\"</span>, </span><br><span class=\"line\">        FileMode.Create),</span><br><span class=\"line\">    fs =&gt; Observable.Range(<span class=\"number\">0</span>, <span class=\"number\">10000</span>)</span><br><span class=\"line\">            .Select(v =&gt; Encoding.ASCII.GetBytes(v.ToString()))</span><br><span class=\"line\">            .WriteToStream(fs))</span><br><span class=\"line\">          .Subscribe();</span><br></pre></td></tr></table></figure>\n\n<p>這範例中使用了Using去建立資源，這資源將會被disposed在unsubscription被呼叫之後。</p>\n<h3 id=\"盡最大努力去退訂所有未完成的工作\"><a href=\"#盡最大努力去退訂所有未完成的工作\" class=\"headerlink\" title=\"盡最大努力去退訂所有未完成的工作\"></a>盡最大努力去退訂所有未完成的工作</h3><p>當unsubscribe被呼叫後，observable sequence將會盡最大的努力去阻止所有未完成的工作。<br>這也意味著還沒開始的排隊作業都不會被啟用。<br>任何已經在進行中的工作都可能完成。因為放棄正在進行中的工作並不是一個安全的行為。<br>只是這些工作的結果並不會被發送到任何以前訂閱的觀察者的實例中了。</p>\n<p>Sample 1 :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.Timer(TimeSpan.FromSeconds(<span class=\"number\">2</span>)).Subscribe(...)Displose()</span><br></pre></td></tr></table></figure>\n\n<p>在這範例中，訂閱由Timer建立出來的oberservable sequence將在ThreadPool scheduler去形成一個排隊列緒，在2秒內去發送OnNext信息。<br>訂閱之後立即取消，由於排成計畫尚未開始，因此將從scheduler中刪除。</p>\n<p>Sample 2 :</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.Start(() =&gt; &#123;</span><br><span class=\"line\">    Thread.Sleep(TimeSpan.FromSeconds(<span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;).Subscribe(...).Dispose();</span><br></pre></td></tr></table></figure>\n\n<p>在這範例之中，Start操作子，立即安排lambda function做完參數。訂閱後將observer實例作為此執行的監聽器。<br>由於一旦訂閱被執行，它將繼續運行並且忽略返回值5。</p>\n"},{"title":"Strtegy Pattern","date":"2019-02-23T05:57:02.000Z","_content":"### 小故事\n劉備去東吳招親前，諸葛亮預測東吳會刁難劉備，甚至吞掉荊州西川，因此諸葛亮特授予趙雲三個錦囊，說是按照天機拆開解決棘手問題。\n\n三個妙計是:\n* 找喬國老幫忙(走後門)\n* 求吳國太放行(訴苦)\n* 孫夫人斷後(親情攻擊)  \n\n這三個妙計都是告訴照雲要怎麼去執行，也就是說三個計謀都有一個方法是”執行“。\n具體執行什麼內容，每個妙計會有所不同。\n\n類別圖 :\n![](/images/DP/xZEF4gP.png)\n```javascript\ninterface IStrategy {\n    // 執行錦囊\n    operate(): void;\n}\nclass BackDoor implements IStrategy {\n    public operate = () => console.log(\"找喬國老幫忙，讓吳國太施予壓力\");\n}\nclass GivenGreenLight implements IStrategy {\n    public operate = () => console.log(\"找吳國太開綠燈，給予放行\");\n}\nclass BlockEnemy implements IStrategy {\n    public operate = () => console.log(\"孫夫人斷後，擋住追兵\");\n}\n```\n\n還需要裝著計策的錦囊，以及一個執行人 趙雲。\n![](/images/DP/yFCmo8g.png)\n```javascript\nclass Context {\n    private strategy: IStrategy;\n    constructor(strategy: IStrategy) {\n        this.strategy = strategy;\n    } \n    public operate = () => this.strategy.operate();\n}\n// ZhaoYun\n(() => {\n    let context: Context;\n    console.log(\"--剛到吳國拆第一個--\");\n    context = new Context(new BackDoor());\n    context.operate();\n    console.log(\"------------------\");\n    console.log(\"--劉備樂不思蜀，拆第二個--\");\n    context = new Context(new GivenGreenLight());\n    context.operate();\n    console.log(\"------------------\");\n    console.log(\"--孫權小兵殺來，拆第三個--\");\n    context = new Context(new BlockEnemy());\n    context.operate();\n    console.log(\"------------------\");\n})()\n```\n\n## 策略模式的定義\nDefine a family of algorithms, encapsulate each one, and make them interchangeable.\n(定義一組算法，將每個算法封裝起來，並且使它們之間可以互換。)\n![](/images/DP/jC5J5vp.png)\n```javascript\ninterface IStrategy {\n    doSomething(): void;\n}\nclass ConcreteStrategy1 implements IStrategy {\n    public doSomething = () => console.log(1);\n}\nclass ConcreteStrategy2 implements IStrategy {\n    public doSomething = () => console.log(2);\n}\nclass Context {\n    private strategy: IStrategy;\n    \n    constructor(_strategy: IStrategy) {\n        this.strategy = _strategy;\n    }\n    public doAnything = () => this.strategy.doSomething();\n}\n(() => {\n   let strategy = new ConcreteStrategy1();\n   let context: Context = new Context(strategy);\n   context.doAnything();\n})()\n```\n### 回顧  \n* 使用了 OO的繼承跟多態。\n* 要定義哪個行為，是抽象策略介面。\n### Pros :  \n* 算法可以自由切換 : 只要有實現抽象策略，就成為了策略家族的一個成員，通過封裝腳色對其進行封裝，保證對外提供”可自由切換”的策略。\n* 去除多重條件判斷 : 因為多重條件不容易維護閱讀，且改壞的機率很大。使用了策略模式後，可能由其他模塊決定採用什麼策略，對外提供的訪問接口就是封裝類別，簡化了操作，也避免掉條件判斷。\n* 擴展性良好 : 只要新增一個策略成員並且實現接口就能, 類似於一個可反覆拆裝的插件，為此這模式符合了OCP原則。\n### Cons :  \n* 策略類別太多 = 類別膨脹, 可重複利用程度非常小。\n* 所有策略類別都需要對外暴露: 上層模組一定要知道有哪些策略，才能決定怎麼使用。這樣違反了LKP原則(最少知識原則); 但可以用工廠模式、代理模式或是享元模式解決。\n\n### 使用場景\n* 多個類別只有在算法或是行為上稍有不同的場景\n* 算法需要自由切換的場景\n* 需要屏蔽算法規則的場景 ; 調用者不必了解太多細節，能依據策略名稱就能知道怎使用，然後反饋給他一個極果，就結束了。\n* 如果策略超過4個，應該要考慮混和模式，解決策略類別過長跟對外暴露的問題。\n\n\n### 策略模式的例子\n#### 加減乘除計算器####\n**Version 1**\n```javascript\nclass Calculator {\n    private static readonly ADD_SYMBOL: string = \"+\";\n    private static readonly SUB_SYMBOL: string = \"-\";\n    public exec = (a: number, b: number, symbol: string) => {\n        let result: number = 0;\n        if(symbol === Calculator.ADD_SYMBOL){\n            result = this.add(a, b);\n        }else if (symbol === Calculator.SUB_SYMBOL) {\n            result = this.sub(a, b);\n        }\n        return result;\n    }\n    private add = (a: number, b: number) => a + b;\n    private sub = (a: number, b: number) => a - b;\n}\n(() => {\n    let a = 1;\n    let symbol:string = \"+\";\n    let b = 2;\n    let cal = new Calculator();\n    console.log(cal.exec(a, b, symbol));\n})()\n```\n\n**Version 2**\n使用三元運算子簡化主邏輯\n```javascript\n\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nclass Calculator {\n    private static readonly ADD_SYMBOL: string = \"+\";\n    private static readonly SUB_SYMBOL: string = \"-\";\n    public exec = (a: number, b: number, symbol: string) => \n        symbol === Calculator.ADD_SYMBOL ? a+b : a-b;\n    \n}\n(() => {\n    let a = 1;\n    let symbol:string = \"+\";\n    let b = 2;\n    let cal = new Calculator();\n    console.log(cal.exec(a, b, symbol));\n})()\n```\n\n**Version 3 引入策略模式**\n由上下文角色決定具體策略; 並且封裝角色保證策略時可以相互替換\n```javascript\ninterface Calculator {\n    exec(a: number, b: number): number;\n}\nclass Add implements Calculator {\n    constructor() {}\n    public exec = (a: number, b: number): number => a+b; \n}\nclass Sub implements Calculator {\n    constructor() {}\n    public exec = (a: number, b: number): number => a-b; \n}\nclass Context {\n    private cal: Calculator;\n    constructor(_cal: Calculator) {\n        this.cal = _cal;\n    }\n    public exec = (a: number, b: number, symbol: string) => this.cal.exec(a,b);\n}\n(() => {\n    const ADD_SYMBOL: string = \"+\";\n    const SUB_SYMBOL: string = \"-\";\n    let a = 1;\n    let symbol:string = \"+\";\n    let b = 2;\n    let context: Context;\n    if (symbol === ADD_SYMBOL) context = new Context(new Add());\n    else if (symbol === SUB_SYMBOL) context = new Context(new Sub());\n    console.log(context!.exec(a, b, symbol));\n})()\n```\n\n**Version 4 引入策略列舉**","source":"_posts/Strtegy-Pattern.md","raw":"---\ntitle: Strtegy Pattern\ndate: 2019-02-23 13:57:02\ntags:\n    - Design Pattern\n    - TypeScript\n    - JavaScript\n---\n### 小故事\n劉備去東吳招親前，諸葛亮預測東吳會刁難劉備，甚至吞掉荊州西川，因此諸葛亮特授予趙雲三個錦囊，說是按照天機拆開解決棘手問題。\n\n三個妙計是:\n* 找喬國老幫忙(走後門)\n* 求吳國太放行(訴苦)\n* 孫夫人斷後(親情攻擊)  \n\n這三個妙計都是告訴照雲要怎麼去執行，也就是說三個計謀都有一個方法是”執行“。\n具體執行什麼內容，每個妙計會有所不同。\n\n類別圖 :\n![](/images/DP/xZEF4gP.png)\n```javascript\ninterface IStrategy {\n    // 執行錦囊\n    operate(): void;\n}\nclass BackDoor implements IStrategy {\n    public operate = () => console.log(\"找喬國老幫忙，讓吳國太施予壓力\");\n}\nclass GivenGreenLight implements IStrategy {\n    public operate = () => console.log(\"找吳國太開綠燈，給予放行\");\n}\nclass BlockEnemy implements IStrategy {\n    public operate = () => console.log(\"孫夫人斷後，擋住追兵\");\n}\n```\n\n還需要裝著計策的錦囊，以及一個執行人 趙雲。\n![](/images/DP/yFCmo8g.png)\n```javascript\nclass Context {\n    private strategy: IStrategy;\n    constructor(strategy: IStrategy) {\n        this.strategy = strategy;\n    } \n    public operate = () => this.strategy.operate();\n}\n// ZhaoYun\n(() => {\n    let context: Context;\n    console.log(\"--剛到吳國拆第一個--\");\n    context = new Context(new BackDoor());\n    context.operate();\n    console.log(\"------------------\");\n    console.log(\"--劉備樂不思蜀，拆第二個--\");\n    context = new Context(new GivenGreenLight());\n    context.operate();\n    console.log(\"------------------\");\n    console.log(\"--孫權小兵殺來，拆第三個--\");\n    context = new Context(new BlockEnemy());\n    context.operate();\n    console.log(\"------------------\");\n})()\n```\n\n## 策略模式的定義\nDefine a family of algorithms, encapsulate each one, and make them interchangeable.\n(定義一組算法，將每個算法封裝起來，並且使它們之間可以互換。)\n![](/images/DP/jC5J5vp.png)\n```javascript\ninterface IStrategy {\n    doSomething(): void;\n}\nclass ConcreteStrategy1 implements IStrategy {\n    public doSomething = () => console.log(1);\n}\nclass ConcreteStrategy2 implements IStrategy {\n    public doSomething = () => console.log(2);\n}\nclass Context {\n    private strategy: IStrategy;\n    \n    constructor(_strategy: IStrategy) {\n        this.strategy = _strategy;\n    }\n    public doAnything = () => this.strategy.doSomething();\n}\n(() => {\n   let strategy = new ConcreteStrategy1();\n   let context: Context = new Context(strategy);\n   context.doAnything();\n})()\n```\n### 回顧  \n* 使用了 OO的繼承跟多態。\n* 要定義哪個行為，是抽象策略介面。\n### Pros :  \n* 算法可以自由切換 : 只要有實現抽象策略，就成為了策略家族的一個成員，通過封裝腳色對其進行封裝，保證對外提供”可自由切換”的策略。\n* 去除多重條件判斷 : 因為多重條件不容易維護閱讀，且改壞的機率很大。使用了策略模式後，可能由其他模塊決定採用什麼策略，對外提供的訪問接口就是封裝類別，簡化了操作，也避免掉條件判斷。\n* 擴展性良好 : 只要新增一個策略成員並且實現接口就能, 類似於一個可反覆拆裝的插件，為此這模式符合了OCP原則。\n### Cons :  \n* 策略類別太多 = 類別膨脹, 可重複利用程度非常小。\n* 所有策略類別都需要對外暴露: 上層模組一定要知道有哪些策略，才能決定怎麼使用。這樣違反了LKP原則(最少知識原則); 但可以用工廠模式、代理模式或是享元模式解決。\n\n### 使用場景\n* 多個類別只有在算法或是行為上稍有不同的場景\n* 算法需要自由切換的場景\n* 需要屏蔽算法規則的場景 ; 調用者不必了解太多細節，能依據策略名稱就能知道怎使用，然後反饋給他一個極果，就結束了。\n* 如果策略超過4個，應該要考慮混和模式，解決策略類別過長跟對外暴露的問題。\n\n\n### 策略模式的例子\n#### 加減乘除計算器####\n**Version 1**\n```javascript\nclass Calculator {\n    private static readonly ADD_SYMBOL: string = \"+\";\n    private static readonly SUB_SYMBOL: string = \"-\";\n    public exec = (a: number, b: number, symbol: string) => {\n        let result: number = 0;\n        if(symbol === Calculator.ADD_SYMBOL){\n            result = this.add(a, b);\n        }else if (symbol === Calculator.SUB_SYMBOL) {\n            result = this.sub(a, b);\n        }\n        return result;\n    }\n    private add = (a: number, b: number) => a + b;\n    private sub = (a: number, b: number) => a - b;\n}\n(() => {\n    let a = 1;\n    let symbol:string = \"+\";\n    let b = 2;\n    let cal = new Calculator();\n    console.log(cal.exec(a, b, symbol));\n})()\n```\n\n**Version 2**\n使用三元運算子簡化主邏輯\n```javascript\n\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nclass Calculator {\n    private static readonly ADD_SYMBOL: string = \"+\";\n    private static readonly SUB_SYMBOL: string = \"-\";\n    public exec = (a: number, b: number, symbol: string) => \n        symbol === Calculator.ADD_SYMBOL ? a+b : a-b;\n    \n}\n(() => {\n    let a = 1;\n    let symbol:string = \"+\";\n    let b = 2;\n    let cal = new Calculator();\n    console.log(cal.exec(a, b, symbol));\n})()\n```\n\n**Version 3 引入策略模式**\n由上下文角色決定具體策略; 並且封裝角色保證策略時可以相互替換\n```javascript\ninterface Calculator {\n    exec(a: number, b: number): number;\n}\nclass Add implements Calculator {\n    constructor() {}\n    public exec = (a: number, b: number): number => a+b; \n}\nclass Sub implements Calculator {\n    constructor() {}\n    public exec = (a: number, b: number): number => a-b; \n}\nclass Context {\n    private cal: Calculator;\n    constructor(_cal: Calculator) {\n        this.cal = _cal;\n    }\n    public exec = (a: number, b: number, symbol: string) => this.cal.exec(a,b);\n}\n(() => {\n    const ADD_SYMBOL: string = \"+\";\n    const SUB_SYMBOL: string = \"-\";\n    let a = 1;\n    let symbol:string = \"+\";\n    let b = 2;\n    let context: Context;\n    if (symbol === ADD_SYMBOL) context = new Context(new Add());\n    else if (symbol === SUB_SYMBOL) context = new Context(new Sub());\n    console.log(context!.exec(a, b, symbol));\n})()\n```\n\n**Version 4 引入策略列舉**","slug":"Strtegy-Pattern","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmi001ack6x4cugezmw","content":"<h3 id=\"小故事\"><a href=\"#小故事\" class=\"headerlink\" title=\"小故事\"></a>小故事</h3><p>劉備去東吳招親前，諸葛亮預測東吳會刁難劉備，甚至吞掉荊州西川，因此諸葛亮特授予趙雲三個錦囊，說是按照天機拆開解決棘手問題。</p>\n<p>三個妙計是:</p>\n<ul>\n<li>找喬國老幫忙(走後門)</li>\n<li>求吳國太放行(訴苦)</li>\n<li>孫夫人斷後(親情攻擊)  </li>\n</ul>\n<p>這三個妙計都是告訴照雲要怎麼去執行，也就是說三個計謀都有一個方法是”執行“。<br>具體執行什麼內容，每個妙計會有所不同。</p>\n<p>類別圖 :<br><img src=\"/images/DP/xZEF4gP.png\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IStrategy &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 執行錦囊</span></span><br><span class=\"line\">    operate(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BackDoor</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"找喬國老幫忙，讓吳國太施予壓力\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GivenGreenLight</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"找吳國太開綠燈，給予放行\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockEnemy</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"孫夫人斷後，擋住追兵\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>還需要裝著計策的錦囊，以及一個執行人 趙雲。<br><img src=\"/images/DP/yFCmo8g.png\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private strategy: IStrategy;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(strategy: IStrategy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.strategy.operate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ZhaoYun</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context: Context;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"--剛到吳國拆第一個--\"</span>);</span><br><span class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> BackDoor());</span><br><span class=\"line\">    context.operate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"--劉備樂不思蜀，拆第二個--\"</span>);</span><br><span class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> GivenGreenLight());</span><br><span class=\"line\">    context.operate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"--孫權小兵殺來，拆第三個--\"</span>);</span><br><span class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> BlockEnemy());</span><br><span class=\"line\">    context.operate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"策略模式的定義\"><a href=\"#策略模式的定義\" class=\"headerlink\" title=\"策略模式的定義\"></a>策略模式的定義</h2><p>Define a family of algorithms, encapsulate each one, and make them interchangeable.<br>(定義一組算法，將每個算法封裝起來，並且使它們之間可以互換。)<br><img src=\"/images/DP/jC5J5vp.png\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IStrategy &#123;</span><br><span class=\"line\">    doSomething(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategy1</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public doSomething = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategy2</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public doSomething = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private strategy: IStrategy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(_strategy: IStrategy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = _strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public doAnything = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.strategy.doSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> strategy = <span class=\"keyword\">new</span> ConcreteStrategy1();</span><br><span class=\"line\">   <span class=\"keyword\">let</span> context: Context = <span class=\"keyword\">new</span> Context(strategy);</span><br><span class=\"line\">   context.doAnything();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回顧\"><a href=\"#回顧\" class=\"headerlink\" title=\"回顧\"></a>回顧</h3><ul>\n<li>使用了 OO的繼承跟多態。</li>\n<li>要定義哪個行為，是抽象策略介面。<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h3></li>\n<li>算法可以自由切換 : 只要有實現抽象策略，就成為了策略家族的一個成員，通過封裝腳色對其進行封裝，保證對外提供”可自由切換”的策略。</li>\n<li>去除多重條件判斷 : 因為多重條件不容易維護閱讀，且改壞的機率很大。使用了策略模式後，可能由其他模塊決定採用什麼策略，對外提供的訪問接口就是封裝類別，簡化了操作，也避免掉條件判斷。</li>\n<li>擴展性良好 : 只要新增一個策略成員並且實現接口就能, 類似於一個可反覆拆裝的插件，為此這模式符合了OCP原則。<h3 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons :\"></a>Cons :</h3></li>\n<li>策略類別太多 = 類別膨脹, 可重複利用程度非常小。</li>\n<li>所有策略類別都需要對外暴露: 上層模組一定要知道有哪些策略，才能決定怎麼使用。這樣違反了LKP原則(最少知識原則); 但可以用工廠模式、代理模式或是享元模式解決。</li>\n</ul>\n<h3 id=\"使用場景\"><a href=\"#使用場景\" class=\"headerlink\" title=\"使用場景\"></a>使用場景</h3><ul>\n<li>多個類別只有在算法或是行為上稍有不同的場景</li>\n<li>算法需要自由切換的場景</li>\n<li>需要屏蔽算法規則的場景 ; 調用者不必了解太多細節，能依據策略名稱就能知道怎使用，然後反饋給他一個極果，就結束了。</li>\n<li>如果策略超過4個，應該要考慮混和模式，解決策略類別過長跟對外暴露的問題。</li>\n</ul>\n<h3 id=\"策略模式的例子\"><a href=\"#策略模式的例子\" class=\"headerlink\" title=\"策略模式的例子\"></a>策略模式的例子</h3><h4 id=\"加減乘除計算器\"><a href=\"#加減乘除計算器\" class=\"headerlink\" title=\"加減乘除計算器\"></a>加減乘除計算器</h4><p><strong>Version 1</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly ADD_SYMBOL: string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly SUB_SYMBOL: string = <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">    public exec = <span class=\"function\">(<span class=\"params\">a: number, b: number, symbol: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(symbol === Calculator.ADD_SYMBOL)&#123;</span><br><span class=\"line\">            result = <span class=\"keyword\">this</span>.add(a, b);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol === Calculator.SUB_SYMBOL) &#123;</span><br><span class=\"line\">            result = <span class=\"keyword\">this</span>.sub(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private add = <span class=\"function\">(<span class=\"params\">a: number, b: number</span>) =&gt;</span> a + b;</span><br><span class=\"line\">    private sub = <span class=\"function\">(<span class=\"params\">a: number, b: number</span>) =&gt;</span> a - b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> symbol:string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cal = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cal.exec(a, b, symbol));</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Version 2</strong><br>使用三元運算子簡化主邏輯</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly ADD_SYMBOL: string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly SUB_SYMBOL: string = <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">    public exec = <span class=\"function\">(<span class=\"params\">a: number, b: number, symbol: string</span>) =&gt;</span> </span><br><span class=\"line\">        symbol === Calculator.ADD_SYMBOL ? a+b : a-b;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> symbol:string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cal = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cal.exec(a, b, symbol));</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Version 3 引入策略模式</strong><br>由上下文角色決定具體策略; 並且封裝角色保證策略時可以相互替換</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Calculator &#123;</span><br><span class=\"line\">    exec(a: number, <span class=\"attr\">b</span>: number): number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Add</span> <span class=\"title\">implements</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">    public exec = (a: number, <span class=\"attr\">b</span>: number): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> a+b; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"title\">implements</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">    public exec = (a: number, <span class=\"attr\">b</span>: number): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> a-b; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private cal: Calculator;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(_cal: Calculator) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cal = _cal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public exec = <span class=\"function\">(<span class=\"params\">a: number, b: number, symbol: string</span>) =&gt;</span> <span class=\"keyword\">this</span>.cal.exec(a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ADD_SYMBOL: string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> SUB_SYMBOL: string = <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> symbol:string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context: Context;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (symbol === ADD_SYMBOL) context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Add());</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol === SUB_SYMBOL) context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Sub());</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(context!.exec(a, b, symbol));</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Version 4 引入策略列舉</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"小故事\"><a href=\"#小故事\" class=\"headerlink\" title=\"小故事\"></a>小故事</h3><p>劉備去東吳招親前，諸葛亮預測東吳會刁難劉備，甚至吞掉荊州西川，因此諸葛亮特授予趙雲三個錦囊，說是按照天機拆開解決棘手問題。</p>\n<p>三個妙計是:</p>\n<ul>\n<li>找喬國老幫忙(走後門)</li>\n<li>求吳國太放行(訴苦)</li>\n<li>孫夫人斷後(親情攻擊)  </li>\n</ul>\n<p>這三個妙計都是告訴照雲要怎麼去執行，也就是說三個計謀都有一個方法是”執行“。<br>具體執行什麼內容，每個妙計會有所不同。</p>\n<p>類別圖 :<br><img src=\"/images/DP/xZEF4gP.png\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IStrategy &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 執行錦囊</span></span><br><span class=\"line\">    operate(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BackDoor</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"找喬國老幫忙，讓吳國太施予壓力\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GivenGreenLight</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"找吳國太開綠燈，給予放行\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockEnemy</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"孫夫人斷後，擋住追兵\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>還需要裝著計策的錦囊，以及一個執行人 趙雲。<br><img src=\"/images/DP/yFCmo8g.png\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private strategy: IStrategy;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(strategy: IStrategy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    public operate = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.strategy.operate();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ZhaoYun</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context: Context;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"--剛到吳國拆第一個--\"</span>);</span><br><span class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> BackDoor());</span><br><span class=\"line\">    context.operate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"--劉備樂不思蜀，拆第二個--\"</span>);</span><br><span class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> GivenGreenLight());</span><br><span class=\"line\">    context.operate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"--孫權小兵殺來，拆第三個--\"</span>);</span><br><span class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> BlockEnemy());</span><br><span class=\"line\">    context.operate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"策略模式的定義\"><a href=\"#策略模式的定義\" class=\"headerlink\" title=\"策略模式的定義\"></a>策略模式的定義</h2><p>Define a family of algorithms, encapsulate each one, and make them interchangeable.<br>(定義一組算法，將每個算法封裝起來，並且使它們之間可以互換。)<br><img src=\"/images/DP/jC5J5vp.png\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IStrategy &#123;</span><br><span class=\"line\">    doSomething(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategy1</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public doSomething = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteStrategy2</span> <span class=\"title\">implements</span> <span class=\"title\">IStrategy</span> </span>&#123;</span><br><span class=\"line\">    public doSomething = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private strategy: IStrategy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(_strategy: IStrategy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.strategy = _strategy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public doAnything = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.strategy.doSomething();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> strategy = <span class=\"keyword\">new</span> ConcreteStrategy1();</span><br><span class=\"line\">   <span class=\"keyword\">let</span> context: Context = <span class=\"keyword\">new</span> Context(strategy);</span><br><span class=\"line\">   context.doAnything();</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回顧\"><a href=\"#回顧\" class=\"headerlink\" title=\"回顧\"></a>回顧</h3><ul>\n<li>使用了 OO的繼承跟多態。</li>\n<li>要定義哪個行為，是抽象策略介面。<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h3></li>\n<li>算法可以自由切換 : 只要有實現抽象策略，就成為了策略家族的一個成員，通過封裝腳色對其進行封裝，保證對外提供”可自由切換”的策略。</li>\n<li>去除多重條件判斷 : 因為多重條件不容易維護閱讀，且改壞的機率很大。使用了策略模式後，可能由其他模塊決定採用什麼策略，對外提供的訪問接口就是封裝類別，簡化了操作，也避免掉條件判斷。</li>\n<li>擴展性良好 : 只要新增一個策略成員並且實現接口就能, 類似於一個可反覆拆裝的插件，為此這模式符合了OCP原則。<h3 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons :\"></a>Cons :</h3></li>\n<li>策略類別太多 = 類別膨脹, 可重複利用程度非常小。</li>\n<li>所有策略類別都需要對外暴露: 上層模組一定要知道有哪些策略，才能決定怎麼使用。這樣違反了LKP原則(最少知識原則); 但可以用工廠模式、代理模式或是享元模式解決。</li>\n</ul>\n<h3 id=\"使用場景\"><a href=\"#使用場景\" class=\"headerlink\" title=\"使用場景\"></a>使用場景</h3><ul>\n<li>多個類別只有在算法或是行為上稍有不同的場景</li>\n<li>算法需要自由切換的場景</li>\n<li>需要屏蔽算法規則的場景 ; 調用者不必了解太多細節，能依據策略名稱就能知道怎使用，然後反饋給他一個極果，就結束了。</li>\n<li>如果策略超過4個，應該要考慮混和模式，解決策略類別過長跟對外暴露的問題。</li>\n</ul>\n<h3 id=\"策略模式的例子\"><a href=\"#策略模式的例子\" class=\"headerlink\" title=\"策略模式的例子\"></a>策略模式的例子</h3><h4 id=\"加減乘除計算器\"><a href=\"#加減乘除計算器\" class=\"headerlink\" title=\"加減乘除計算器\"></a>加減乘除計算器</h4><p><strong>Version 1</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly ADD_SYMBOL: string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly SUB_SYMBOL: string = <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">    public exec = <span class=\"function\">(<span class=\"params\">a: number, b: number, symbol: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result: number = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(symbol === Calculator.ADD_SYMBOL)&#123;</span><br><span class=\"line\">            result = <span class=\"keyword\">this</span>.add(a, b);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol === Calculator.SUB_SYMBOL) &#123;</span><br><span class=\"line\">            result = <span class=\"keyword\">this</span>.sub(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private add = <span class=\"function\">(<span class=\"params\">a: number, b: number</span>) =&gt;</span> a + b;</span><br><span class=\"line\">    private sub = <span class=\"function\">(<span class=\"params\">a: number, b: number</span>) =&gt;</span> a - b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> symbol:string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cal = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cal.exec(a, b, symbol));</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Version 2</strong><br>使用三元運算子簡化主邏輯</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">9</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly ADD_SYMBOL: string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    private <span class=\"keyword\">static</span> readonly SUB_SYMBOL: string = <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">    public exec = <span class=\"function\">(<span class=\"params\">a: number, b: number, symbol: string</span>) =&gt;</span> </span><br><span class=\"line\">        symbol === Calculator.ADD_SYMBOL ? a+b : a-b;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> symbol:string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cal = <span class=\"keyword\">new</span> Calculator();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(cal.exec(a, b, symbol));</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Version 3 引入策略模式</strong><br>由上下文角色決定具體策略; 並且封裝角色保證策略時可以相互替換</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Calculator &#123;</span><br><span class=\"line\">    exec(a: number, <span class=\"attr\">b</span>: number): number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Add</span> <span class=\"title\">implements</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">    public exec = (a: number, <span class=\"attr\">b</span>: number): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> a+b; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sub</span> <span class=\"title\">implements</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">    public exec = (a: number, <span class=\"attr\">b</span>: number): <span class=\"function\"><span class=\"params\">number</span> =&gt;</span> a-b; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private cal: Calculator;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(_cal: Calculator) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cal = _cal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public exec = <span class=\"function\">(<span class=\"params\">a: number, b: number, symbol: string</span>) =&gt;</span> <span class=\"keyword\">this</span>.cal.exec(a,b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ADD_SYMBOL: string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> SUB_SYMBOL: string = <span class=\"string\">\"-\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> symbol:string = <span class=\"string\">\"+\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> context: Context;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (symbol === ADD_SYMBOL) context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Add());</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (symbol === SUB_SYMBOL) context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> Sub());</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(context!.exec(a, b, symbol));</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>Version 4 引入策略列舉</strong></p>\n"},{"title":"TechWeekly","date":"2019-07-14T16:38:08.000Z","_content":"![](/images/News-Hero-Crop.jpg)\n\nEvery Day :\n[GoCN](https://gocn.vip/explore/category-14)\n\nEvery Saturday :\n[Flutter](https://us17.campaign-archive.com/home/?u=c8d8d18b6e2c6316ddc1d48a0&id=47548a283b)\n\nEvery Monday :\n[前端精讀](https://github.com/dt-fe/weekly)\n\nEvery Thursday\n[Go](https://golangweekly.com/issues)\n[Node](https://nodeweekly.com/issues)\n\nEvery Friday\n[JavaScript](https://javascriptweekly.com/issues)\n\nEvery Sunday\n[Techbridge](https://weekly.techbridge.cc/)","source":"_posts/Weekly.md","raw":"---\ntitle: TechWeekly\ndate: 2019-07-15 00:38:08\ncategories: \"TechWeekly\"\ntags:\n    - TechWeekly\n---\n![](/images/News-Hero-Crop.jpg)\n\nEvery Day :\n[GoCN](https://gocn.vip/explore/category-14)\n\nEvery Saturday :\n[Flutter](https://us17.campaign-archive.com/home/?u=c8d8d18b6e2c6316ddc1d48a0&id=47548a283b)\n\nEvery Monday :\n[前端精讀](https://github.com/dt-fe/weekly)\n\nEvery Thursday\n[Go](https://golangweekly.com/issues)\n[Node](https://nodeweekly.com/issues)\n\nEvery Friday\n[JavaScript](https://javascriptweekly.com/issues)\n\nEvery Sunday\n[Techbridge](https://weekly.techbridge.cc/)","slug":"Weekly","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmj001dck6xbsr4ac3k","content":"<p><img src=\"/images/News-Hero-Crop.jpg\" alt></p>\n<p>Every Day :<br><a href=\"https://gocn.vip/explore/category-14\" target=\"_blank\" rel=\"noopener\">GoCN</a></p>\n<p>Every Saturday :<br><a href=\"https://us17.campaign-archive.com/home/?u=c8d8d18b6e2c6316ddc1d48a0&id=47548a283b\" target=\"_blank\" rel=\"noopener\">Flutter</a></p>\n<p>Every Monday :<br><a href=\"https://github.com/dt-fe/weekly\" target=\"_blank\" rel=\"noopener\">前端精讀</a></p>\n<p>Every Thursday<br><a href=\"https://golangweekly.com/issues\" target=\"_blank\" rel=\"noopener\">Go</a><br><a href=\"https://nodeweekly.com/issues\" target=\"_blank\" rel=\"noopener\">Node</a></p>\n<p>Every Friday<br><a href=\"https://javascriptweekly.com/issues\" target=\"_blank\" rel=\"noopener\">JavaScript</a></p>\n<p>Every Sunday<br><a href=\"https://weekly.techbridge.cc/\" target=\"_blank\" rel=\"noopener\">Techbridge</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/News-Hero-Crop.jpg\" alt></p>\n<p>Every Day :<br><a href=\"https://gocn.vip/explore/category-14\" target=\"_blank\" rel=\"noopener\">GoCN</a></p>\n<p>Every Saturday :<br><a href=\"https://us17.campaign-archive.com/home/?u=c8d8d18b6e2c6316ddc1d48a0&id=47548a283b\" target=\"_blank\" rel=\"noopener\">Flutter</a></p>\n<p>Every Monday :<br><a href=\"https://github.com/dt-fe/weekly\" target=\"_blank\" rel=\"noopener\">前端精讀</a></p>\n<p>Every Thursday<br><a href=\"https://golangweekly.com/issues\" target=\"_blank\" rel=\"noopener\">Go</a><br><a href=\"https://nodeweekly.com/issues\" target=\"_blank\" rel=\"noopener\">Node</a></p>\n<p>Every Friday<br><a href=\"https://javascriptweekly.com/issues\" target=\"_blank\" rel=\"noopener\">JavaScript</a></p>\n<p>Every Sunday<br><a href=\"https://weekly.techbridge.cc/\" target=\"_blank\" rel=\"noopener\">Techbridge</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2020-12-20T07:56:16.169Z","updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmk001fck6x5nqarc73","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"State Pattern","date":"2017-11-21T05:51:52.000Z","_content":"實作電梯\n電梯的動作: 開門、關門、運行、停止\n![](/images/DP/Nkwi064.jpg)\n```javascript\ninterface ILift {\n    open(): void;\n    close(): void;\n    run(): void;\n    stop(): void\n}\nclass Lift implements ILift {\n    public open = () => console.log(\"電梯門打開\");\n    public close = () => console.log(\"電梯門關閉\");\n    public run = () => console.log(\"電梯上下運行\");\n    public stop = () => console.log(\"電梯停止\");\n}\n```\n```javascript\n(() =>{\n    const lift: ILift = new Lift();\n    lift.open();\n    lift.close();\n    lift.run();\n    lift.stop();\n})()\n電梯門打開\n電梯門關閉\n電梯上下運行\n電梯停止\n```\n\n**But!!!**\n電梯是有狀態的, 有前提條件的。 不可能在運行時突然開門，或是停止了不開門的情況。\n所以動作執行都有前置條件，也就是在特定狀態下才能做特定事務。\n| | Open | Close | Run | Stop |\n|———-|——|——-|—–|——|\n| 開門狀態 | x | o | x | x |\n| 關門狀態 | o | x | o | o |\n| 運行狀態 | x | x | x | o |\n| 停止狀態 | o | x | o | x |\n\n### Version 1 : 加上前置條件\n```javascript\nenum LiftState {\n    OPENING_STATE = 1,\n    CLOSING_STATE= 2,\n    RUNNIG_STATE = 3,\n    STOPPING_STATE = 4\n}\ninterface ILift {\n    setState(state: LiftState): void;\n    open(): void;\n    close(): void;\n    run(): void;\n    stop(): void\n}\nclass Lift implements ILift {\n    private state: LiftState;\n    constructor() {\n        this.state = LiftState.STOPPING_STATE;\n    }\n    public setState = (value: LiftState) => this.state = value;\n    public open = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                break;\n            case LiftState.CLOSING_STATE :\n                this.openWithoutLogic();\n                this.setState(LiftState.OPENING_STATE);\n                break;\n            case LiftState.RUNNIG_STATE : \n                break;\n            case LiftState.STOPPING_STATE :\n                this.openWithoutLogic();\n                this.setState(LiftState.OPENING_STATE);\n                break;\n        }\n    }\n    public close = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                this.closeWithoutLogic();\n                this.setState(LiftState.CLOSING_STATE);\n                break;\n            case LiftState.CLOSING_STATE :\n                break;\n            case LiftState.RUNNIG_STATE : \n                break;\n            case LiftState.STOPPING_STATE :\n                break;\n        }\n    };\n    public run = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                break;\n            case LiftState.CLOSING_STATE :\n                this.runWithoutLogic();\n                this.setState(LiftState.RUNNIG_STATE);\n                break;\n            case LiftState.RUNNIG_STATE : \n                break;\n            case LiftState.STOPPING_STATE :\n            this.runWithoutLogic();\n                this.setState(LiftState.RUNNIG_STATE);\n                break;\n        }\n    }\n    public stop = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                break;\n            case LiftState.CLOSING_STATE :\n                this.stopWithoutLogic();\n                this.setState(LiftState.STOPPING_STATE);\n                break;\n            case LiftState.RUNNIG_STATE : \n                this.stopWithoutLogic();\n                this.setState(LiftState.STOPPING_STATE);\n                break;\n            case LiftState.STOPPING_STATE :\n                break;\n        }\n    }\n    private closeWithoutLogic = () => console.log(\"電梯門關閉...\");\n    private openWithoutLogic = () => console.log(\"電梯門開啟...\");\n    private runWithoutLogic = () => console.log(\"電梯上下運行...\");\n    private stopWithoutLogic = () => console.log(\"電梯停止了...\");\n}\n(() =>{\n    const lift: ILift = new Lift();\n    lift.open();\n    lift.close();\n    lift.run();\n    lift.stop();\n})()\n電梯門開啟...\n電梯門關閉...\n電梯上下運行...\n電梯停止了...\n```\n\n### 思考問題\n實現類別Lift邏輯很饒舌，充斥著很多switch或是if-else。難以閱讀維護。\n擴展性很差，當狀態越多(通電狀態、斷電狀態)，都要增加條件。\n非常規狀態難以實踐，故障、檢修等狀態。 會違反單一職責原則。\n### 轉換思考角度\n剛剛都是以電梯的方法跟方法執行的條件去分析。\n現在換個角度思考，電梯在具有這些狀態時能夠做什麼事情， 也就是說電梯處於某個具體狀態時，思考這個狀態是由什麼動作觸發而產生的，以及在這狀態下電梯還能做什麼事情?\n\n停止狀態怎來的? 當然是因為執行了stop()\n停止狀態下，還能做什麼? 運行? 開門?\n所以只要實現電梯在一個狀態下的兩個任務模型即可 :\n\n這個狀態如何產生的\n這個狀態下還能做什麼(怎過度狀態)\n\n![](/images/DP/dRe0ZjY.jpg)\n\n\n### Version 2 : 抽象與撥離\nContext\n```javascript\nimport { LiftState } from './state';\nexport class Context {\n    private liftState?: LiftState;\n    constructor() {\n        this.liftState = undefined;\n    }\n    public getLiftState = () => this.liftState!;\n    public setLiftState = (liftState: LiftState) => {\n        this.liftState = liftState;\n        this.liftState.setContext(this);\n    }\n    public open = () => this.liftState!.open();\n    public close = () => this.liftState!.close();\n    public run = () => this.liftState!.run();\n    public stop = () => this.liftState!.stop();\n}\n```\n\nLiftState\n```javascript\nimport { Context } from \"./Context\";\nlet context = new Context();\nexport abstract class LiftState {\n    public setContext = (_context: Context) => context = _context;\n    public abstract open(): void;\n    public abstract close(): void;\n    public abstract run(): void;\n    public abstract stop(): void;\n}\nexport class OpenningState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => {\n        context.setLiftState(new ClosingState());\n        context.getLiftState().close();\n    }\n    public open = () => console.log(\"電梯門開啟...\");\n    public run = () => {};\n    public stop = () => {};\n}\nexport class ClosingState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => console.log(\"電梯門關閉...\");\n    public open = () => {\n        context.setLiftState(new OpenningState());\n        context.getLiftState().open();\n    }\n    public run = () => {\n        context.setLiftState(new RunningState());\n        context.getLiftState().run();\n    };\n    public stop = () => {\n        context.setLiftState(new StoppingState());\n        context.getLiftState().stop();\n    };\n}\nexport class RunningState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => {};\n    public open = () => {};\n    public run = () => console.log(\"電梯上下運行...\");\n    public stop = () => {\n        context.setLiftState(new StoppingState());\n        context.getLiftState().stop();\n    };\n}\nexport class StoppingState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => {};\n    public open = () => {\n        context.setLiftState(new OpenningState());\n        context.getLiftState().open();\n    };\n    public run = () => {\n        context.setLiftState(new RunningState());\n        context.getLiftState().run();\n    }\n    public stop = () => console.log(\"電梯停止了...\");\n}\n(() =>{\n    const context = new Context();\n    context.setLiftState(new ClosingState());\n    context.open();\n    context.close();\n    context.run();\n    context.stop();\n})()\n電梯門開啟...\n電梯門關閉...\n電梯上下運行...\n電梯停止了...\n```\n\n### 回顧\n* Client場景變簡單了，只要給初始狀態，調用相關方法，完全不用考慮狀態的切換變更。也就是說只看到行為的發生改變，並不用知道是狀態變化引起的改變。\n* 各場景的程式碼縮短了，因為切成各個子類別; 也取消了switch…case的判斷。\n* 符合”開閉原則”, 因為要增加狀態，除了要增加子類別，也要修改原有的類別，只是要在原有的方法上增加新的方法，而不更動原有的。\n* 符合單一職責, 現在各狀態式單獨的類別，只有與這狀態相關的因素能做修改。\n\n## 狀態模式的定義\n`Allow an object to alter its behavior when its internal state changes.\nThe object will appear to change its class.\n(當一個對象內在狀態改變時，允許其改變行為，這個對象則看起來像是改變了類別)`\n![](/images/DP/3ANdROM.jpg)\n\n* State - 抽象狀態\n    * interface或abstact class, 負責對象狀態定義，並且封裝環境腳色用來實現狀態切換。\n* ConcreateState - 具體狀態\n    * 自己的狀態行為管理，跟趨向狀態處理; 當下狀態要做的事情，以及過渡到其他狀態。\n* Context - 環境腳色   \n    * 定義client要得介面，並且負責具體狀態的切換。\n\n#### Pros :\n* 結構清晰 : 避免過多switch…case或if…else，增加可維護性\n* 遵循設計原則 : 實現”開閉原則” 和 “單一職責”\n* 封裝性良好 : 狀態變換放置到內部實現，外部不用知道  \n\n#### Cons :\n* 子類別太多 = 類別膨脹\n\n#### 使用場景\n* 行為隨著狀態改變而改變\n* 條件、分之判斷語句的替代\n\n#### 組合技\n建造者+狀態模式 : 將狀態間切換的一定順序用建造者做構建。","source":"_posts/State-Pattern.md","raw":"---\ntitle: State Pattern\ndate: 2017-11-21 13:51:52\ntags:\n    - Design Pattern\n    - TypeScript\n    - JavaScript\n---\n實作電梯\n電梯的動作: 開門、關門、運行、停止\n![](/images/DP/Nkwi064.jpg)\n```javascript\ninterface ILift {\n    open(): void;\n    close(): void;\n    run(): void;\n    stop(): void\n}\nclass Lift implements ILift {\n    public open = () => console.log(\"電梯門打開\");\n    public close = () => console.log(\"電梯門關閉\");\n    public run = () => console.log(\"電梯上下運行\");\n    public stop = () => console.log(\"電梯停止\");\n}\n```\n```javascript\n(() =>{\n    const lift: ILift = new Lift();\n    lift.open();\n    lift.close();\n    lift.run();\n    lift.stop();\n})()\n電梯門打開\n電梯門關閉\n電梯上下運行\n電梯停止\n```\n\n**But!!!**\n電梯是有狀態的, 有前提條件的。 不可能在運行時突然開門，或是停止了不開門的情況。\n所以動作執行都有前置條件，也就是在特定狀態下才能做特定事務。\n| | Open | Close | Run | Stop |\n|———-|——|——-|—–|——|\n| 開門狀態 | x | o | x | x |\n| 關門狀態 | o | x | o | o |\n| 運行狀態 | x | x | x | o |\n| 停止狀態 | o | x | o | x |\n\n### Version 1 : 加上前置條件\n```javascript\nenum LiftState {\n    OPENING_STATE = 1,\n    CLOSING_STATE= 2,\n    RUNNIG_STATE = 3,\n    STOPPING_STATE = 4\n}\ninterface ILift {\n    setState(state: LiftState): void;\n    open(): void;\n    close(): void;\n    run(): void;\n    stop(): void\n}\nclass Lift implements ILift {\n    private state: LiftState;\n    constructor() {\n        this.state = LiftState.STOPPING_STATE;\n    }\n    public setState = (value: LiftState) => this.state = value;\n    public open = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                break;\n            case LiftState.CLOSING_STATE :\n                this.openWithoutLogic();\n                this.setState(LiftState.OPENING_STATE);\n                break;\n            case LiftState.RUNNIG_STATE : \n                break;\n            case LiftState.STOPPING_STATE :\n                this.openWithoutLogic();\n                this.setState(LiftState.OPENING_STATE);\n                break;\n        }\n    }\n    public close = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                this.closeWithoutLogic();\n                this.setState(LiftState.CLOSING_STATE);\n                break;\n            case LiftState.CLOSING_STATE :\n                break;\n            case LiftState.RUNNIG_STATE : \n                break;\n            case LiftState.STOPPING_STATE :\n                break;\n        }\n    };\n    public run = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                break;\n            case LiftState.CLOSING_STATE :\n                this.runWithoutLogic();\n                this.setState(LiftState.RUNNIG_STATE);\n                break;\n            case LiftState.RUNNIG_STATE : \n                break;\n            case LiftState.STOPPING_STATE :\n            this.runWithoutLogic();\n                this.setState(LiftState.RUNNIG_STATE);\n                break;\n        }\n    }\n    public stop = () => {\n        switch (this.state) {\n            case LiftState.OPENING_STATE :\n                break;\n            case LiftState.CLOSING_STATE :\n                this.stopWithoutLogic();\n                this.setState(LiftState.STOPPING_STATE);\n                break;\n            case LiftState.RUNNIG_STATE : \n                this.stopWithoutLogic();\n                this.setState(LiftState.STOPPING_STATE);\n                break;\n            case LiftState.STOPPING_STATE :\n                break;\n        }\n    }\n    private closeWithoutLogic = () => console.log(\"電梯門關閉...\");\n    private openWithoutLogic = () => console.log(\"電梯門開啟...\");\n    private runWithoutLogic = () => console.log(\"電梯上下運行...\");\n    private stopWithoutLogic = () => console.log(\"電梯停止了...\");\n}\n(() =>{\n    const lift: ILift = new Lift();\n    lift.open();\n    lift.close();\n    lift.run();\n    lift.stop();\n})()\n電梯門開啟...\n電梯門關閉...\n電梯上下運行...\n電梯停止了...\n```\n\n### 思考問題\n實現類別Lift邏輯很饒舌，充斥著很多switch或是if-else。難以閱讀維護。\n擴展性很差，當狀態越多(通電狀態、斷電狀態)，都要增加條件。\n非常規狀態難以實踐，故障、檢修等狀態。 會違反單一職責原則。\n### 轉換思考角度\n剛剛都是以電梯的方法跟方法執行的條件去分析。\n現在換個角度思考，電梯在具有這些狀態時能夠做什麼事情， 也就是說電梯處於某個具體狀態時，思考這個狀態是由什麼動作觸發而產生的，以及在這狀態下電梯還能做什麼事情?\n\n停止狀態怎來的? 當然是因為執行了stop()\n停止狀態下，還能做什麼? 運行? 開門?\n所以只要實現電梯在一個狀態下的兩個任務模型即可 :\n\n這個狀態如何產生的\n這個狀態下還能做什麼(怎過度狀態)\n\n![](/images/DP/dRe0ZjY.jpg)\n\n\n### Version 2 : 抽象與撥離\nContext\n```javascript\nimport { LiftState } from './state';\nexport class Context {\n    private liftState?: LiftState;\n    constructor() {\n        this.liftState = undefined;\n    }\n    public getLiftState = () => this.liftState!;\n    public setLiftState = (liftState: LiftState) => {\n        this.liftState = liftState;\n        this.liftState.setContext(this);\n    }\n    public open = () => this.liftState!.open();\n    public close = () => this.liftState!.close();\n    public run = () => this.liftState!.run();\n    public stop = () => this.liftState!.stop();\n}\n```\n\nLiftState\n```javascript\nimport { Context } from \"./Context\";\nlet context = new Context();\nexport abstract class LiftState {\n    public setContext = (_context: Context) => context = _context;\n    public abstract open(): void;\n    public abstract close(): void;\n    public abstract run(): void;\n    public abstract stop(): void;\n}\nexport class OpenningState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => {\n        context.setLiftState(new ClosingState());\n        context.getLiftState().close();\n    }\n    public open = () => console.log(\"電梯門開啟...\");\n    public run = () => {};\n    public stop = () => {};\n}\nexport class ClosingState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => console.log(\"電梯門關閉...\");\n    public open = () => {\n        context.setLiftState(new OpenningState());\n        context.getLiftState().open();\n    }\n    public run = () => {\n        context.setLiftState(new RunningState());\n        context.getLiftState().run();\n    };\n    public stop = () => {\n        context.setLiftState(new StoppingState());\n        context.getLiftState().stop();\n    };\n}\nexport class RunningState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => {};\n    public open = () => {};\n    public run = () => console.log(\"電梯上下運行...\");\n    public stop = () => {\n        context.setLiftState(new StoppingState());\n        context.getLiftState().stop();\n    };\n}\nexport class StoppingState extends LiftState {\n    constructor() {\n        super();\n    }\n    public close = () => {};\n    public open = () => {\n        context.setLiftState(new OpenningState());\n        context.getLiftState().open();\n    };\n    public run = () => {\n        context.setLiftState(new RunningState());\n        context.getLiftState().run();\n    }\n    public stop = () => console.log(\"電梯停止了...\");\n}\n(() =>{\n    const context = new Context();\n    context.setLiftState(new ClosingState());\n    context.open();\n    context.close();\n    context.run();\n    context.stop();\n})()\n電梯門開啟...\n電梯門關閉...\n電梯上下運行...\n電梯停止了...\n```\n\n### 回顧\n* Client場景變簡單了，只要給初始狀態，調用相關方法，完全不用考慮狀態的切換變更。也就是說只看到行為的發生改變，並不用知道是狀態變化引起的改變。\n* 各場景的程式碼縮短了，因為切成各個子類別; 也取消了switch…case的判斷。\n* 符合”開閉原則”, 因為要增加狀態，除了要增加子類別，也要修改原有的類別，只是要在原有的方法上增加新的方法，而不更動原有的。\n* 符合單一職責, 現在各狀態式單獨的類別，只有與這狀態相關的因素能做修改。\n\n## 狀態模式的定義\n`Allow an object to alter its behavior when its internal state changes.\nThe object will appear to change its class.\n(當一個對象內在狀態改變時，允許其改變行為，這個對象則看起來像是改變了類別)`\n![](/images/DP/3ANdROM.jpg)\n\n* State - 抽象狀態\n    * interface或abstact class, 負責對象狀態定義，並且封裝環境腳色用來實現狀態切換。\n* ConcreateState - 具體狀態\n    * 自己的狀態行為管理，跟趨向狀態處理; 當下狀態要做的事情，以及過渡到其他狀態。\n* Context - 環境腳色   \n    * 定義client要得介面，並且負責具體狀態的切換。\n\n#### Pros :\n* 結構清晰 : 避免過多switch…case或if…else，增加可維護性\n* 遵循設計原則 : 實現”開閉原則” 和 “單一職責”\n* 封裝性良好 : 狀態變換放置到內部實現，外部不用知道  \n\n#### Cons :\n* 子類別太多 = 類別膨脹\n\n#### 使用場景\n* 行為隨著狀態改變而改變\n* 條件、分之判斷語句的替代\n\n#### 組合技\n建造者+狀態模式 : 將狀態間切換的一定順序用建造者做構建。","slug":"State-Pattern","published":1,"updated":"2020-12-20T07:56:16.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cml001jck6xzewi2ax6","content":"<p>實作電梯<br>電梯的動作: 開門、關門、運行、停止<br><img src=\"/images/DP/Nkwi064.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ILift &#123;</span><br><span class=\"line\">    open(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    close(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    run(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    stop(): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lift</span> <span class=\"title\">implements</span> <span class=\"title\">ILift</span> </span>&#123;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門打開\"</span>);</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門關閉\"</span>);</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯上下運行\"</span>);</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯停止\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lift: ILift = <span class=\"keyword\">new</span> Lift();</span><br><span class=\"line\">    lift.open();</span><br><span class=\"line\">    lift.close();</span><br><span class=\"line\">    lift.run();</span><br><span class=\"line\">    lift.stop();</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">電梯門打開</span><br><span class=\"line\">電梯門關閉</span><br><span class=\"line\">電梯上下運行</span><br><span class=\"line\">電梯停止</span><br></pre></td></tr></table></figure>\n\n<p><strong>But!!!</strong><br>電梯是有狀態的, 有前提條件的。 不可能在運行時突然開門，或是停止了不開門的情況。<br>所以動作執行都有前置條件，也就是在特定狀態下才能做特定事務。<br>| | Open | Close | Run | Stop |<br>|———-|——|——-|—–|——|<br>| 開門狀態 | x | o | x | x |<br>| 關門狀態 | o | x | o | o |<br>| 運行狀態 | x | x | x | o |<br>| 停止狀態 | o | x | o | x |</p>\n<h3 id=\"Version-1-加上前置條件\"><a href=\"#Version-1-加上前置條件\" class=\"headerlink\" title=\"Version 1 : 加上前置條件\"></a>Version 1 : 加上前置條件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum LiftState &#123;</span><br><span class=\"line\">    OPENING_STATE = <span class=\"number\">1</span>,</span><br><span class=\"line\">    CLOSING_STATE= <span class=\"number\">2</span>,</span><br><span class=\"line\">    RUNNIG_STATE = <span class=\"number\">3</span>,</span><br><span class=\"line\">    STOPPING_STATE = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface ILift &#123;</span><br><span class=\"line\">    setState(state: LiftState): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    open(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    close(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    run(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    stop(): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lift</span> <span class=\"title\">implements</span> <span class=\"title\">ILift</span> </span>&#123;</span><br><span class=\"line\">    private state: LiftState;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = LiftState.STOPPING_STATE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public setState = <span class=\"function\">(<span class=\"params\">value: LiftState</span>) =&gt;</span> <span class=\"keyword\">this</span>.state = value;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.openWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.OPENING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.openWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.OPENING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.closeWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.CLOSING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.runWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.RUNNIG_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.runWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.RUNNIG_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.stopWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.STOPPING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">this</span>.stopWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.STOPPING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private closeWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門關閉...\"</span>);</span><br><span class=\"line\">    private openWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門開啟...\"</span>);</span><br><span class=\"line\">    private runWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯上下運行...\"</span>);</span><br><span class=\"line\">    private stopWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯停止了...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lift: ILift = <span class=\"keyword\">new</span> Lift();</span><br><span class=\"line\">    lift.open();</span><br><span class=\"line\">    lift.close();</span><br><span class=\"line\">    lift.run();</span><br><span class=\"line\">    lift.stop();</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">電梯門開啟...</span><br><span class=\"line\">電梯門關閉...</span><br><span class=\"line\">電梯上下運行...</span><br><span class=\"line\">電梯停止了...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思考問題\"><a href=\"#思考問題\" class=\"headerlink\" title=\"思考問題\"></a>思考問題</h3><p>實現類別Lift邏輯很饒舌，充斥著很多switch或是if-else。難以閱讀維護。<br>擴展性很差，當狀態越多(通電狀態、斷電狀態)，都要增加條件。<br>非常規狀態難以實踐，故障、檢修等狀態。 會違反單一職責原則。</p>\n<h3 id=\"轉換思考角度\"><a href=\"#轉換思考角度\" class=\"headerlink\" title=\"轉換思考角度\"></a>轉換思考角度</h3><p>剛剛都是以電梯的方法跟方法執行的條件去分析。<br>現在換個角度思考，電梯在具有這些狀態時能夠做什麼事情， 也就是說電梯處於某個具體狀態時，思考這個狀態是由什麼動作觸發而產生的，以及在這狀態下電梯還能做什麼事情?</p>\n<p>停止狀態怎來的? 當然是因為執行了stop()<br>停止狀態下，還能做什麼? 運行? 開門?<br>所以只要實現電梯在一個狀態下的兩個任務模型即可 :</p>\n<p>這個狀態如何產生的<br>這個狀態下還能做什麼(怎過度狀態)</p>\n<p><img src=\"/images/DP/dRe0ZjY.jpg\" alt></p>\n<h3 id=\"Version-2-抽象與撥離\"><a href=\"#Version-2-抽象與撥離\" class=\"headerlink\" title=\"Version 2 : 抽象與撥離\"></a>Version 2 : 抽象與撥離</h3><p>Context</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; LiftState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./state'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private liftState?: LiftState;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.liftState = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public getLiftState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!;</span><br><span class=\"line\">    public setLiftState = <span class=\"function\">(<span class=\"params\">liftState: LiftState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.liftState = liftState;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.liftState.setContext(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.open();</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.close();</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.run();</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.stop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LiftState</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Context &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./Context\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\"><span class=\"keyword\">export</span> abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    public setContext = <span class=\"function\">(<span class=\"params\">_context: Context</span>) =&gt;</span> context = _context;</span><br><span class=\"line\">    public abstract open(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    public abstract close(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    public abstract run(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    public abstract stop(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenningState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> ClosingState());</span><br><span class=\"line\">        context.getLiftState().close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門開啟...\"</span>);</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClosingState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門關閉...\"</span>);</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> OpenningState());</span><br><span class=\"line\">        context.getLiftState().open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> RunningState());</span><br><span class=\"line\">        context.getLiftState().run();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> StoppingState());</span><br><span class=\"line\">        context.getLiftState().stop();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunningState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯上下運行...\"</span>);</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> StoppingState());</span><br><span class=\"line\">        context.getLiftState().stop();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StoppingState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> OpenningState());</span><br><span class=\"line\">        context.getLiftState().open();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> RunningState());</span><br><span class=\"line\">        context.getLiftState().run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯停止了...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\">    context.setLiftState(<span class=\"keyword\">new</span> ClosingState());</span><br><span class=\"line\">    context.open();</span><br><span class=\"line\">    context.close();</span><br><span class=\"line\">    context.run();</span><br><span class=\"line\">    context.stop();</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">電梯門開啟...</span><br><span class=\"line\">電梯門關閉...</span><br><span class=\"line\">電梯上下運行...</span><br><span class=\"line\">電梯停止了...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回顧\"><a href=\"#回顧\" class=\"headerlink\" title=\"回顧\"></a>回顧</h3><ul>\n<li>Client場景變簡單了，只要給初始狀態，調用相關方法，完全不用考慮狀態的切換變更。也就是說只看到行為的發生改變，並不用知道是狀態變化引起的改變。</li>\n<li>各場景的程式碼縮短了，因為切成各個子類別; 也取消了switch…case的判斷。</li>\n<li>符合”開閉原則”, 因為要增加狀態，除了要增加子類別，也要修改原有的類別，只是要在原有的方法上增加新的方法，而不更動原有的。</li>\n<li>符合單一職責, 現在各狀態式單獨的類別，只有與這狀態相關的因素能做修改。</li>\n</ul>\n<h2 id=\"狀態模式的定義\"><a href=\"#狀態模式的定義\" class=\"headerlink\" title=\"狀態模式的定義\"></a>狀態模式的定義</h2><p><code>Allow an object to alter its behavior when its internal state changes.\nThe object will appear to change its class.\n(當一個對象內在狀態改變時，允許其改變行為，這個對象則看起來像是改變了類別)</code><br><img src=\"/images/DP/3ANdROM.jpg\" alt></p>\n<ul>\n<li>State - 抽象狀態<ul>\n<li>interface或abstact class, 負責對象狀態定義，並且封裝環境腳色用來實現狀態切換。</li>\n</ul>\n</li>\n<li>ConcreateState - 具體狀態<ul>\n<li>自己的狀態行為管理，跟趨向狀態處理; 當下狀態要做的事情，以及過渡到其他狀態。</li>\n</ul>\n</li>\n<li>Context - 環境腳色   <ul>\n<li>定義client要得介面，並且負責具體狀態的切換。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h4><ul>\n<li>結構清晰 : 避免過多switch…case或if…else，增加可維護性</li>\n<li>遵循設計原則 : 實現”開閉原則” 和 “單一職責”</li>\n<li>封裝性良好 : 狀態變換放置到內部實現，外部不用知道  </li>\n</ul>\n<h4 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons :\"></a>Cons :</h4><ul>\n<li>子類別太多 = 類別膨脹</li>\n</ul>\n<h4 id=\"使用場景\"><a href=\"#使用場景\" class=\"headerlink\" title=\"使用場景\"></a>使用場景</h4><ul>\n<li>行為隨著狀態改變而改變</li>\n<li>條件、分之判斷語句的替代</li>\n</ul>\n<h4 id=\"組合技\"><a href=\"#組合技\" class=\"headerlink\" title=\"組合技\"></a>組合技</h4><p>建造者+狀態模式 : 將狀態間切換的一定順序用建造者做構建。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>實作電梯<br>電梯的動作: 開門、關門、運行、停止<br><img src=\"/images/DP/Nkwi064.jpg\" alt></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface ILift &#123;</span><br><span class=\"line\">    open(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    close(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    run(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    stop(): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lift</span> <span class=\"title\">implements</span> <span class=\"title\">ILift</span> </span>&#123;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門打開\"</span>);</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門關閉\"</span>);</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯上下運行\"</span>);</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯停止\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lift: ILift = <span class=\"keyword\">new</span> Lift();</span><br><span class=\"line\">    lift.open();</span><br><span class=\"line\">    lift.close();</span><br><span class=\"line\">    lift.run();</span><br><span class=\"line\">    lift.stop();</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">電梯門打開</span><br><span class=\"line\">電梯門關閉</span><br><span class=\"line\">電梯上下運行</span><br><span class=\"line\">電梯停止</span><br></pre></td></tr></table></figure>\n\n<p><strong>But!!!</strong><br>電梯是有狀態的, 有前提條件的。 不可能在運行時突然開門，或是停止了不開門的情況。<br>所以動作執行都有前置條件，也就是在特定狀態下才能做特定事務。<br>| | Open | Close | Run | Stop |<br>|———-|——|——-|—–|——|<br>| 開門狀態 | x | o | x | x |<br>| 關門狀態 | o | x | o | o |<br>| 運行狀態 | x | x | x | o |<br>| 停止狀態 | o | x | o | x |</p>\n<h3 id=\"Version-1-加上前置條件\"><a href=\"#Version-1-加上前置條件\" class=\"headerlink\" title=\"Version 1 : 加上前置條件\"></a>Version 1 : 加上前置條件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum LiftState &#123;</span><br><span class=\"line\">    OPENING_STATE = <span class=\"number\">1</span>,</span><br><span class=\"line\">    CLOSING_STATE= <span class=\"number\">2</span>,</span><br><span class=\"line\">    RUNNIG_STATE = <span class=\"number\">3</span>,</span><br><span class=\"line\">    STOPPING_STATE = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface ILift &#123;</span><br><span class=\"line\">    setState(state: LiftState): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    open(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    close(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    run(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    stop(): <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lift</span> <span class=\"title\">implements</span> <span class=\"title\">ILift</span> </span>&#123;</span><br><span class=\"line\">    private state: LiftState;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = LiftState.STOPPING_STATE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public setState = <span class=\"function\">(<span class=\"params\">value: LiftState</span>) =&gt;</span> <span class=\"keyword\">this</span>.state = value;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.openWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.OPENING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.openWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.OPENING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.closeWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.CLOSING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.runWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.RUNNIG_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.runWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.RUNNIG_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.state) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.OPENING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.CLOSING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.stopWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.STOPPING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.RUNNIG_STATE : </span><br><span class=\"line\">                <span class=\"keyword\">this</span>.stopWithoutLogic();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.setState(LiftState.STOPPING_STATE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> LiftState.STOPPING_STATE :</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private closeWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門關閉...\"</span>);</span><br><span class=\"line\">    private openWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門開啟...\"</span>);</span><br><span class=\"line\">    private runWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯上下運行...\"</span>);</span><br><span class=\"line\">    private stopWithoutLogic = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯停止了...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lift: ILift = <span class=\"keyword\">new</span> Lift();</span><br><span class=\"line\">    lift.open();</span><br><span class=\"line\">    lift.close();</span><br><span class=\"line\">    lift.run();</span><br><span class=\"line\">    lift.stop();</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">電梯門開啟...</span><br><span class=\"line\">電梯門關閉...</span><br><span class=\"line\">電梯上下運行...</span><br><span class=\"line\">電梯停止了...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思考問題\"><a href=\"#思考問題\" class=\"headerlink\" title=\"思考問題\"></a>思考問題</h3><p>實現類別Lift邏輯很饒舌，充斥著很多switch或是if-else。難以閱讀維護。<br>擴展性很差，當狀態越多(通電狀態、斷電狀態)，都要增加條件。<br>非常規狀態難以實踐，故障、檢修等狀態。 會違反單一職責原則。</p>\n<h3 id=\"轉換思考角度\"><a href=\"#轉換思考角度\" class=\"headerlink\" title=\"轉換思考角度\"></a>轉換思考角度</h3><p>剛剛都是以電梯的方法跟方法執行的條件去分析。<br>現在換個角度思考，電梯在具有這些狀態時能夠做什麼事情， 也就是說電梯處於某個具體狀態時，思考這個狀態是由什麼動作觸發而產生的，以及在這狀態下電梯還能做什麼事情?</p>\n<p>停止狀態怎來的? 當然是因為執行了stop()<br>停止狀態下，還能做什麼? 運行? 開門?<br>所以只要實現電梯在一個狀態下的兩個任務模型即可 :</p>\n<p>這個狀態如何產生的<br>這個狀態下還能做什麼(怎過度狀態)</p>\n<p><img src=\"/images/DP/dRe0ZjY.jpg\" alt></p>\n<h3 id=\"Version-2-抽象與撥離\"><a href=\"#Version-2-抽象與撥離\" class=\"headerlink\" title=\"Version 2 : 抽象與撥離\"></a>Version 2 : 抽象與撥離</h3><p>Context</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; LiftState &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./state'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span> </span>&#123;</span><br><span class=\"line\">    private liftState?: LiftState;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.liftState = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public getLiftState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!;</span><br><span class=\"line\">    public setLiftState = <span class=\"function\">(<span class=\"params\">liftState: LiftState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.liftState = liftState;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.liftState.setContext(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.open();</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.close();</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.run();</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.liftState!.stop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LiftState</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Context &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./Context\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> context = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\"><span class=\"keyword\">export</span> abstract <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    public setContext = <span class=\"function\">(<span class=\"params\">_context: Context</span>) =&gt;</span> context = _context;</span><br><span class=\"line\">    public abstract open(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    public abstract close(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    public abstract run(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    public abstract stop(): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenningState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> ClosingState());</span><br><span class=\"line\">        context.getLiftState().close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門開啟...\"</span>);</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClosingState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯門關閉...\"</span>);</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> OpenningState());</span><br><span class=\"line\">        context.getLiftState().open();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> RunningState());</span><br><span class=\"line\">        context.getLiftState().run();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> StoppingState());</span><br><span class=\"line\">        context.getLiftState().stop();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunningState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯上下運行...\"</span>);</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> StoppingState());</span><br><span class=\"line\">        context.getLiftState().stop();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StoppingState</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiftState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public close = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\">    public open = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> OpenningState());</span><br><span class=\"line\">        context.getLiftState().open();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    public run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        context.setLiftState(<span class=\"keyword\">new</span> RunningState());</span><br><span class=\"line\">        context.getLiftState().run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public stop = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"電梯停止了...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"keyword\">new</span> Context();</span><br><span class=\"line\">    context.setLiftState(<span class=\"keyword\">new</span> ClosingState());</span><br><span class=\"line\">    context.open();</span><br><span class=\"line\">    context.close();</span><br><span class=\"line\">    context.run();</span><br><span class=\"line\">    context.stop();</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\">電梯門開啟...</span><br><span class=\"line\">電梯門關閉...</span><br><span class=\"line\">電梯上下運行...</span><br><span class=\"line\">電梯停止了...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回顧\"><a href=\"#回顧\" class=\"headerlink\" title=\"回顧\"></a>回顧</h3><ul>\n<li>Client場景變簡單了，只要給初始狀態，調用相關方法，完全不用考慮狀態的切換變更。也就是說只看到行為的發生改變，並不用知道是狀態變化引起的改變。</li>\n<li>各場景的程式碼縮短了，因為切成各個子類別; 也取消了switch…case的判斷。</li>\n<li>符合”開閉原則”, 因為要增加狀態，除了要增加子類別，也要修改原有的類別，只是要在原有的方法上增加新的方法，而不更動原有的。</li>\n<li>符合單一職責, 現在各狀態式單獨的類別，只有與這狀態相關的因素能做修改。</li>\n</ul>\n<h2 id=\"狀態模式的定義\"><a href=\"#狀態模式的定義\" class=\"headerlink\" title=\"狀態模式的定義\"></a>狀態模式的定義</h2><p><code>Allow an object to alter its behavior when its internal state changes.\nThe object will appear to change its class.\n(當一個對象內在狀態改變時，允許其改變行為，這個對象則看起來像是改變了類別)</code><br><img src=\"/images/DP/3ANdROM.jpg\" alt></p>\n<ul>\n<li>State - 抽象狀態<ul>\n<li>interface或abstact class, 負責對象狀態定義，並且封裝環境腳色用來實現狀態切換。</li>\n</ul>\n</li>\n<li>ConcreateState - 具體狀態<ul>\n<li>自己的狀態行為管理，跟趨向狀態處理; 當下狀態要做的事情，以及過渡到其他狀態。</li>\n</ul>\n</li>\n<li>Context - 環境腳色   <ul>\n<li>定義client要得介面，並且負責具體狀態的切換。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros :\"></a>Pros :</h4><ul>\n<li>結構清晰 : 避免過多switch…case或if…else，增加可維護性</li>\n<li>遵循設計原則 : 實現”開閉原則” 和 “單一職責”</li>\n<li>封裝性良好 : 狀態變換放置到內部實現，外部不用知道  </li>\n</ul>\n<h4 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons :\"></a>Cons :</h4><ul>\n<li>子類別太多 = 類別膨脹</li>\n</ul>\n<h4 id=\"使用場景\"><a href=\"#使用場景\" class=\"headerlink\" title=\"使用場景\"></a>使用場景</h4><ul>\n<li>行為隨著狀態改變而改變</li>\n<li>條件、分之判斷語句的替代</li>\n</ul>\n<h4 id=\"組合技\"><a href=\"#組合技\" class=\"headerlink\" title=\"組合技\"></a>組合技</h4><p>建造者+狀態模式 : 將狀態間切換的一定順序用建造者做構建。</p>\n"},{"title":"學Golang的緣由","date":"2020-12-20T08:17:50.000Z","_content":"![](https://i.imgur.com/DNWjAse.gif)\n### 學Golang的緣由\n<!-- more -->\n這是小弟第一次參加鐵人賽, 來挑戰一下自我.\n開始學著寫Golang的原因是因為寫了幾年NodeJS跟C#, \n但Node真的一個專案打包成docker image超臃腫.\n就嘗試找一個也支援高併發, 性能優, 方便部屬的語言, \n但希望它的執行檔大小能是超小的, 且各種OS都支援.\n就選擇Golang這語言了.\n就下班加減學一點學一點, 至今也看了兩三個月.\n一些東西紀錄在[自己的部落格](https://tedmax100.github.io/)當作筆記\n\n\n### Go語言特性\n- Google開發並負責維護的開源專案!\n-  靜態、編譯型, 自帶GC和併發處理的語言, 能編譯出目標平台的可執行檔案, 編譯速度也快.\n-  全平台適用, [Arm](https://github.com/golang/go/wiki/GoArm?fbclid=IwAR0Hz1xEpTuLCVoxJhSGY_rRj0ivwITuQr6cezd8elYMeLJu7-P4mSIiY5E)都能執行\n-  上手容易, 我覺得跟C比較真的頗容易,  但跟JS比我覺得還是差一些\n-  原生支援併發 (goroutine), 透過channel進行通信\n-  關鍵字少, 30個左右吧\n-  用字首大小寫, 判別是否是public / private\n-  沒用到的import 或者是 變數, 都會在編譯時期給予警告\n-  沒有繼承!\n- 適合寫些工具, 像是[hugo](https://gohugo.io/)、[fzf](https://github.com/junegunn/fzf)、[Drone](https://github.com/drone/drone)、[Docker](https://github.com/docker)\n- 適合其他語言大部分的業務, RestAPI, RPC, WebSocket\n- 內含[測試框架](https://golang.org/pkg/testing/)\n- 不必在煩惱 到底要i++還是++i了, 因為在Go裡沒有++i, 也不能透過i++賦值給其他的變數\n\n### 從Node到Golang\n#### Hello World \nNodeJS\n```javascript=1\nconsole.log(\"hello world\");\n```\n```bash\n> node app.js\n```\n\nGolang的對等寫法\n```go=1\npackage main\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n```\n```bash\n> go run main.go\n```\n\n#### Array 和 Slice\n```javascript=1\nconst names = [\"it\", \"home\"];\n```\n\n```go=1\nnames := []string { \"it\", \"home\"}\n```\n\n##### 印出後面幾個字的子字串\n```javascript=1\nlet game = \"it home iron man\";\nconsole.log(game.substr(8, game.length));\n```\n```go=1\ngame := \"it home iron man\"\nfmt.Println(game[8: ])\n```\n\n### 流程控制\n```javascript=1\nconst gender = 'female';\n\nswitch (gender) {\n    case 'female':\n        console.log(\"you are a girl\");\n        break;\n    case 'male':\n        console.log(\"your are a boy\");\n        break;\n    default:\n        console.log(\"wtf\");\n}\n```\n```go=1\ngender := \"female\"\nswitch gender {\ncase \"female\":\n    fmt.Println(\"you are a girl\")\ncase \"male\":\n    fmt.Println(\"your are a boy\")\ndefault:\n    fmt.Println(\"wtf\")\n}\n```\n看得出來Go省略了break這關鍵字\n\n### Loop\nJavascript有for loop, while loop, do while loop\nGo只有for loop 就能模擬上面三個\n```go=1\nfor i := 0; i < 10; i++ {\n    fmt.Println(i)\n}\n\n// key value pairs\nkvs := map[string]string{\n    \"name\":    \"it home\",\n    \"website\": \"https://ithelp.ithome.com.tw\",\n}\n\nfor key, value := range kvs {\n    fmt.Println(key, value)\n}\n```\n\n### Object\n```javascript=1\nconst Post = {\n    ID: 10213107\n    Title: \"下班加減學點Golang\",\n    Author: \"Nathan\",\n    Difficulty: \"Beginner\",\n}\n```\n```go=1\ntype Post struct {\n  ID int\n  Title string\n  Author string\n  Difficulty string\n}\n\np := Post {\n  ID: 10213107,\n  Title : \"下班加減學點Golang\",\n  Author: \"Nathan\",\n  Difficulty:\"Beginner\",\n}\n```\nGo能透過定義抽象的struct與其屬性, 在實例化\n也能透過map[string]interface來定義\n```go\nPost := map[string]interface{} {\n  \"ID\": 10213107,\n  \"Title\" : \"下班加減學點Golang\",\n  \"Author\": \"Nathan\",\n  \"Difficulty\":\"Beginner\",\n}\n```\n\n從上面幾個例子就能看的出來Node跟Go語法結構上很類似, \n所以學過Node再來學Go好像就沒那麼難了 XD\n之後會慢慢補充Go的更多東西. \n\n謝謝各位\n\n[下班加減學點Golang與Docker-鐵人賽連結](https://ithelp.ithome.com.tw/users/20104930/ironman/2647)","source":"_posts/學Golang的緣由.md","raw":"---\ntitle: 學Golang的緣由\ndate: 2020-12-20 16:17:50\ncategories: \"Go\"\ntags:\n    - Go\n    - iT邦鐵人賽11Th\n---\n![](https://i.imgur.com/DNWjAse.gif)\n### 學Golang的緣由\n<!-- more -->\n這是小弟第一次參加鐵人賽, 來挑戰一下自我.\n開始學著寫Golang的原因是因為寫了幾年NodeJS跟C#, \n但Node真的一個專案打包成docker image超臃腫.\n就嘗試找一個也支援高併發, 性能優, 方便部屬的語言, \n但希望它的執行檔大小能是超小的, 且各種OS都支援.\n就選擇Golang這語言了.\n就下班加減學一點學一點, 至今也看了兩三個月.\n一些東西紀錄在[自己的部落格](https://tedmax100.github.io/)當作筆記\n\n\n### Go語言特性\n- Google開發並負責維護的開源專案!\n-  靜態、編譯型, 自帶GC和併發處理的語言, 能編譯出目標平台的可執行檔案, 編譯速度也快.\n-  全平台適用, [Arm](https://github.com/golang/go/wiki/GoArm?fbclid=IwAR0Hz1xEpTuLCVoxJhSGY_rRj0ivwITuQr6cezd8elYMeLJu7-P4mSIiY5E)都能執行\n-  上手容易, 我覺得跟C比較真的頗容易,  但跟JS比我覺得還是差一些\n-  原生支援併發 (goroutine), 透過channel進行通信\n-  關鍵字少, 30個左右吧\n-  用字首大小寫, 判別是否是public / private\n-  沒用到的import 或者是 變數, 都會在編譯時期給予警告\n-  沒有繼承!\n- 適合寫些工具, 像是[hugo](https://gohugo.io/)、[fzf](https://github.com/junegunn/fzf)、[Drone](https://github.com/drone/drone)、[Docker](https://github.com/docker)\n- 適合其他語言大部分的業務, RestAPI, RPC, WebSocket\n- 內含[測試框架](https://golang.org/pkg/testing/)\n- 不必在煩惱 到底要i++還是++i了, 因為在Go裡沒有++i, 也不能透過i++賦值給其他的變數\n\n### 從Node到Golang\n#### Hello World \nNodeJS\n```javascript=1\nconsole.log(\"hello world\");\n```\n```bash\n> node app.js\n```\n\nGolang的對等寫法\n```go=1\npackage main\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    fmt.Println(\"hello world\")\n}\n```\n```bash\n> go run main.go\n```\n\n#### Array 和 Slice\n```javascript=1\nconst names = [\"it\", \"home\"];\n```\n\n```go=1\nnames := []string { \"it\", \"home\"}\n```\n\n##### 印出後面幾個字的子字串\n```javascript=1\nlet game = \"it home iron man\";\nconsole.log(game.substr(8, game.length));\n```\n```go=1\ngame := \"it home iron man\"\nfmt.Println(game[8: ])\n```\n\n### 流程控制\n```javascript=1\nconst gender = 'female';\n\nswitch (gender) {\n    case 'female':\n        console.log(\"you are a girl\");\n        break;\n    case 'male':\n        console.log(\"your are a boy\");\n        break;\n    default:\n        console.log(\"wtf\");\n}\n```\n```go=1\ngender := \"female\"\nswitch gender {\ncase \"female\":\n    fmt.Println(\"you are a girl\")\ncase \"male\":\n    fmt.Println(\"your are a boy\")\ndefault:\n    fmt.Println(\"wtf\")\n}\n```\n看得出來Go省略了break這關鍵字\n\n### Loop\nJavascript有for loop, while loop, do while loop\nGo只有for loop 就能模擬上面三個\n```go=1\nfor i := 0; i < 10; i++ {\n    fmt.Println(i)\n}\n\n// key value pairs\nkvs := map[string]string{\n    \"name\":    \"it home\",\n    \"website\": \"https://ithelp.ithome.com.tw\",\n}\n\nfor key, value := range kvs {\n    fmt.Println(key, value)\n}\n```\n\n### Object\n```javascript=1\nconst Post = {\n    ID: 10213107\n    Title: \"下班加減學點Golang\",\n    Author: \"Nathan\",\n    Difficulty: \"Beginner\",\n}\n```\n```go=1\ntype Post struct {\n  ID int\n  Title string\n  Author string\n  Difficulty string\n}\n\np := Post {\n  ID: 10213107,\n  Title : \"下班加減學點Golang\",\n  Author: \"Nathan\",\n  Difficulty:\"Beginner\",\n}\n```\nGo能透過定義抽象的struct與其屬性, 在實例化\n也能透過map[string]interface來定義\n```go\nPost := map[string]interface{} {\n  \"ID\": 10213107,\n  \"Title\" : \"下班加減學點Golang\",\n  \"Author\": \"Nathan\",\n  \"Difficulty\":\"Beginner\",\n}\n```\n\n從上面幾個例子就能看的出來Node跟Go語法結構上很類似, \n所以學過Node再來學Go好像就沒那麼難了 XD\n之後會慢慢補充Go的更多東西. \n\n謝謝各位\n\n[下班加減學點Golang與Docker-鐵人賽連結](https://ithelp.ithome.com.tw/users/20104930/ironman/2647)","slug":"學Golang的緣由","published":1,"updated":"2020-12-20T12:24:34.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmm001lck6xm6qfiwbx","content":"<p><img src=\"https://i.imgur.com/DNWjAse.gif\" alt></p>\n<h3 id=\"學Golang的緣由\"><a href=\"#學Golang的緣由\" class=\"headerlink\" title=\"學Golang的緣由\"></a>學Golang的緣由</h3><a id=\"more\"></a>\n<p>這是小弟第一次參加鐵人賽, 來挑戰一下自我.<br>開始學著寫Golang的原因是因為寫了幾年NodeJS跟C#,<br>但Node真的一個專案打包成docker image超臃腫.<br>就嘗試找一個也支援高併發, 性能優, 方便部屬的語言,<br>但希望它的執行檔大小能是超小的, 且各種OS都支援.<br>就選擇Golang這語言了.<br>就下班加減學一點學一點, 至今也看了兩三個月.<br>一些東西紀錄在<a href=\"https://tedmax100.github.io/\">自己的部落格</a>當作筆記</p>\n<h3 id=\"Go語言特性\"><a href=\"#Go語言特性\" class=\"headerlink\" title=\"Go語言特性\"></a>Go語言特性</h3><ul>\n<li>Google開發並負責維護的開源專案!</li>\n<li>靜態、編譯型, 自帶GC和併發處理的語言, 能編譯出目標平台的可執行檔案, 編譯速度也快.</li>\n<li>全平台適用, <a href=\"https://github.com/golang/go/wiki/GoArm?fbclid=IwAR0Hz1xEpTuLCVoxJhSGY_rRj0ivwITuQr6cezd8elYMeLJu7-P4mSIiY5E\" target=\"_blank\" rel=\"noopener\">Arm</a>都能執行</li>\n<li>上手容易, 我覺得跟C比較真的頗容易,  但跟JS比我覺得還是差一些</li>\n<li>原生支援併發 (goroutine), 透過channel進行通信</li>\n<li>關鍵字少, 30個左右吧</li>\n<li>用字首大小寫, 判別是否是public / private</li>\n<li>沒用到的import 或者是 變數, 都會在編譯時期給予警告</li>\n<li>沒有繼承!</li>\n<li>適合寫些工具, 像是<a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener\">hugo</a>、<a href=\"https://github.com/junegunn/fzf\" target=\"_blank\" rel=\"noopener\">fzf</a>、<a href=\"https://github.com/drone/drone\" target=\"_blank\" rel=\"noopener\">Drone</a>、<a href=\"https://github.com/docker\" target=\"_blank\" rel=\"noopener\">Docker</a></li>\n<li>適合其他語言大部分的業務, RestAPI, RPC, WebSocket</li>\n<li>內含<a href=\"https://golang.org/pkg/testing/\" target=\"_blank\" rel=\"noopener\">測試框架</a></li>\n<li>不必在煩惱 到底要i++還是++i了, 因為在Go裡沒有++i, 也不能透過i++賦值給其他的變數</li>\n</ul>\n<h3 id=\"從Node到Golang\"><a href=\"#從Node到Golang\" class=\"headerlink\" title=\"從Node到Golang\"></a>從Node到Golang</h3><h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><p>NodeJS</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node app.js</span><br></pre></td></tr></table></figure>\n\n<p>Golang的對等寫法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go run main.go</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Array-和-Slice\"><a href=\"#Array-和-Slice\" class=\"headerlink\" title=\"Array 和 Slice\"></a>Array 和 Slice</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">\"it\"</span>, <span class=\"string\">\"home\"</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names := []<span class=\"keyword\">string</span> &#123; <span class=\"string\">\"it\"</span>, <span class=\"string\">\"home\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"印出後面幾個字的子字串\"><a href=\"#印出後面幾個字的子字串\" class=\"headerlink\" title=\"印出後面幾個字的子字串\"></a>印出後面幾個字的子字串</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> game = <span class=\"string\">\"it home iron man\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(game.substr(<span class=\"number\">8</span>, game.length));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">game := <span class=\"string\">\"it home iron man\"</span></span><br><span class=\"line\">fmt.Println(game[<span class=\"number\">8</span>: ])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gender = <span class=\"string\">'female'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (gender) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'female'</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"you are a girl\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'male'</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"your are a boy\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wtf\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gender := <span class=\"string\">\"female\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> gender &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"female\"</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"you are a girl\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"male\"</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"your are a boy\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"wtf\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看得出來Go省略了break這關鍵字</p>\n<h3 id=\"Loop\"><a href=\"#Loop\" class=\"headerlink\" title=\"Loop\"></a>Loop</h3><p>Javascript有for loop, while loop, do while loop<br>Go只有for loop 就能模擬上面三個</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    fmt.Println(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// key value pairs</span></span><br><span class=\"line\">kvs := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>:    <span class=\"string\">\"it home\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://ithelp.ithome.com.tw\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> kvs &#123;</span><br><span class=\"line\">    fmt.Println(key, value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Post = &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">10213107</span></span><br><span class=\"line\">    Title: <span class=\"string\">\"下班加減學點Golang\"</span>,</span><br><span class=\"line\">    Author: <span class=\"string\">\"Nathan\"</span>,</span><br><span class=\"line\">    Difficulty: <span class=\"string\">\"Beginner\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Post <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID <span class=\"keyword\">int</span></span><br><span class=\"line\">  Title <span class=\"keyword\">string</span></span><br><span class=\"line\">  Author <span class=\"keyword\">string</span></span><br><span class=\"line\">  Difficulty <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p := Post &#123;</span><br><span class=\"line\">  ID: <span class=\"number\">10213107</span>,</span><br><span class=\"line\">  Title : <span class=\"string\">\"下班加減學點Golang\"</span>,</span><br><span class=\"line\">  Author: <span class=\"string\">\"Nathan\"</span>,</span><br><span class=\"line\">  Difficulty:<span class=\"string\">\"Beginner\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Go能透過定義抽象的struct與其屬性, 在實例化<br>也能透過map[string]interface來定義</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">  <span class=\"string\">\"ID\"</span>: <span class=\"number\">10213107</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Title\"</span> : <span class=\"string\">\"下班加減學點Golang\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Author\"</span>: <span class=\"string\">\"Nathan\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Difficulty\"</span>:<span class=\"string\">\"Beginner\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>從上面幾個例子就能看的出來Node跟Go語法結構上很類似,<br>所以學過Node再來學Go好像就沒那麼難了 XD<br>之後會慢慢補充Go的更多東西. </p>\n<p>謝謝各位</p>\n<p><a href=\"https://ithelp.ithome.com.tw/users/20104930/ironman/2647\" target=\"_blank\" rel=\"noopener\">下班加減學點Golang與Docker-鐵人賽連結</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://i.imgur.com/DNWjAse.gif\" alt></p>\n<h3 id=\"學Golang的緣由\"><a href=\"#學Golang的緣由\" class=\"headerlink\" title=\"學Golang的緣由\"></a>學Golang的緣由</h3>","more":"<p>這是小弟第一次參加鐵人賽, 來挑戰一下自我.<br>開始學著寫Golang的原因是因為寫了幾年NodeJS跟C#,<br>但Node真的一個專案打包成docker image超臃腫.<br>就嘗試找一個也支援高併發, 性能優, 方便部屬的語言,<br>但希望它的執行檔大小能是超小的, 且各種OS都支援.<br>就選擇Golang這語言了.<br>就下班加減學一點學一點, 至今也看了兩三個月.<br>一些東西紀錄在<a href=\"https://tedmax100.github.io/\">自己的部落格</a>當作筆記</p>\n<h3 id=\"Go語言特性\"><a href=\"#Go語言特性\" class=\"headerlink\" title=\"Go語言特性\"></a>Go語言特性</h3><ul>\n<li>Google開發並負責維護的開源專案!</li>\n<li>靜態、編譯型, 自帶GC和併發處理的語言, 能編譯出目標平台的可執行檔案, 編譯速度也快.</li>\n<li>全平台適用, <a href=\"https://github.com/golang/go/wiki/GoArm?fbclid=IwAR0Hz1xEpTuLCVoxJhSGY_rRj0ivwITuQr6cezd8elYMeLJu7-P4mSIiY5E\" target=\"_blank\" rel=\"noopener\">Arm</a>都能執行</li>\n<li>上手容易, 我覺得跟C比較真的頗容易,  但跟JS比我覺得還是差一些</li>\n<li>原生支援併發 (goroutine), 透過channel進行通信</li>\n<li>關鍵字少, 30個左右吧</li>\n<li>用字首大小寫, 判別是否是public / private</li>\n<li>沒用到的import 或者是 變數, 都會在編譯時期給予警告</li>\n<li>沒有繼承!</li>\n<li>適合寫些工具, 像是<a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener\">hugo</a>、<a href=\"https://github.com/junegunn/fzf\" target=\"_blank\" rel=\"noopener\">fzf</a>、<a href=\"https://github.com/drone/drone\" target=\"_blank\" rel=\"noopener\">Drone</a>、<a href=\"https://github.com/docker\" target=\"_blank\" rel=\"noopener\">Docker</a></li>\n<li>適合其他語言大部分的業務, RestAPI, RPC, WebSocket</li>\n<li>內含<a href=\"https://golang.org/pkg/testing/\" target=\"_blank\" rel=\"noopener\">測試框架</a></li>\n<li>不必在煩惱 到底要i++還是++i了, 因為在Go裡沒有++i, 也不能透過i++賦值給其他的變數</li>\n</ul>\n<h3 id=\"從Node到Golang\"><a href=\"#從Node到Golang\" class=\"headerlink\" title=\"從Node到Golang\"></a>從Node到Golang</h3><h4 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h4><p>NodeJS</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"hello world\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; node app.js</span><br></pre></td></tr></table></figure>\n\n<p>Golang的對等寫法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go run main.go</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Array-和-Slice\"><a href=\"#Array-和-Slice\" class=\"headerlink\" title=\"Array 和 Slice\"></a>Array 和 Slice</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">\"it\"</span>, <span class=\"string\">\"home\"</span>];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names := []<span class=\"keyword\">string</span> &#123; <span class=\"string\">\"it\"</span>, <span class=\"string\">\"home\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"印出後面幾個字的子字串\"><a href=\"#印出後面幾個字的子字串\" class=\"headerlink\" title=\"印出後面幾個字的子字串\"></a>印出後面幾個字的子字串</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> game = <span class=\"string\">\"it home iron man\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(game.substr(<span class=\"number\">8</span>, game.length));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">game := <span class=\"string\">\"it home iron man\"</span></span><br><span class=\"line\">fmt.Println(game[<span class=\"number\">8</span>: ])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gender = <span class=\"string\">'female'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (gender) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'female'</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"you are a girl\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'male'</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"your are a boy\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"wtf\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gender := <span class=\"string\">\"female\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> gender &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"female\"</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"you are a girl\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"male\"</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"your are a boy\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"wtf\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看得出來Go省略了break這關鍵字</p>\n<h3 id=\"Loop\"><a href=\"#Loop\" class=\"headerlink\" title=\"Loop\"></a>Loop</h3><p>Javascript有for loop, while loop, do while loop<br>Go只有for loop 就能模擬上面三個</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">    fmt.Println(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// key value pairs</span></span><br><span class=\"line\">kvs := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>:    <span class=\"string\">\"it home\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"website\"</span>: <span class=\"string\">\"https://ithelp.ithome.com.tw\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> kvs &#123;</span><br><span class=\"line\">    fmt.Println(key, value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Post = &#123;</span><br><span class=\"line\">    ID: <span class=\"number\">10213107</span></span><br><span class=\"line\">    Title: <span class=\"string\">\"下班加減學點Golang\"</span>,</span><br><span class=\"line\">    Author: <span class=\"string\">\"Nathan\"</span>,</span><br><span class=\"line\">    Difficulty: <span class=\"string\">\"Beginner\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Post <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ID <span class=\"keyword\">int</span></span><br><span class=\"line\">  Title <span class=\"keyword\">string</span></span><br><span class=\"line\">  Author <span class=\"keyword\">string</span></span><br><span class=\"line\">  Difficulty <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">p := Post &#123;</span><br><span class=\"line\">  ID: <span class=\"number\">10213107</span>,</span><br><span class=\"line\">  Title : <span class=\"string\">\"下班加減學點Golang\"</span>,</span><br><span class=\"line\">  Author: <span class=\"string\">\"Nathan\"</span>,</span><br><span class=\"line\">  Difficulty:<span class=\"string\">\"Beginner\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Go能透過定義抽象的struct與其屬性, 在實例化<br>也能透過map[string]interface來定義</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Post := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">  <span class=\"string\">\"ID\"</span>: <span class=\"number\">10213107</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Title\"</span> : <span class=\"string\">\"下班加減學點Golang\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Author\"</span>: <span class=\"string\">\"Nathan\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"Difficulty\"</span>:<span class=\"string\">\"Beginner\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>從上面幾個例子就能看的出來Node跟Go語法結構上很類似,<br>所以學過Node再來學Go好像就沒那麼難了 XD<br>之後會慢慢補充Go的更多東西. </p>\n<p>謝謝各位</p>\n<p><a href=\"https://ithelp.ithome.com.tw/users/20104930/ironman/2647\" target=\"_blank\" rel=\"noopener\">下班加減學點Golang與Docker-鐵人賽連結</a></p>"},{"title":"第一隻Go程式","date":"2020-12-20T08:50:06.000Z","_content":"# 安裝Go跟開發環境\n[Golang下載](https://golang.org/dl/)\n[Install doc](https://golang.org/doc/install)\n[VsCode](https://code.visualstudio.com/)\n<!-- more -->\n## Install the GO on Linux\n```bash=\n# Download file\nwget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go1.12.7.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n\n# Check installation\ngo env\n```\n![goenv](https://i.imgur.com/j62hYTR.png)\n其他名稱會在後面講package時會稍微提到.\n\n### Upgrade Go\n```bash\n# Download file\nwget https://dl.google.com/go/go$VERSION.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go$VERSION.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n#### Upgrade by shell script\n[update-golang](https://github.com/udhos/update-golang)\n\n\n### Workspaces\n[Workspaces](https://golang.org/doc/code.html#Workspaces)\n[Setting GoPath](https://github.com/golang/go/wiki/SettingGOPATH)\n在GoPath所顯示的目錄下創建以下資料夾\n* src : go source file\n* pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件\n* bin : 編譯後可執行檔案\n```bash\nmkdir -p $GOPATH/src $GOPATH/pkg $GOPATH/bin\n```\n\n### Hello Go\n```bash\nmkdir -p $GOPATH/src/hello\ncd $GOPATH/src/hello\ncode .\n```\n以VsCode開啟該目錄\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello Go\")\n}\n```\n```bash\n# 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下\ngo install hello\n# 執行\n$GOPATH/bin/hello\n> Hello  Go\n```\n\n##  Main package\nGo每支檔案都會需要宣告這是屬於哪個package的, 相當於C#的namespace概念.\n主要的會有一個叫做main的package包, 做為這隻可執行程式的入口包. \n如果該專案沒有main包時, 就沒法被編譯成可執行檔案. \n所以如果是要做成共享套件, 就可以不必有main包的存在於該專案內. \n\nmain裡面會有main方法作為程式的執行進入點.\n```go=1\n// main包宣告\npackage main\n\n// 匯入fmt包\nimport (\n  \"fmt\"\n )\n \n // main 方法, 作為執行程式的入口\n func main() {\n    fmt.Println(\"Hello IThome\")\n }\n```\n\n**import**  \n用來導入其他的包, 要用雙引號作為字串來使用.\n- 單行匯入\n```go\nimport \"包A\"\nimport \"包B\"\n```\n- 多行匯入, 宣告順序不影響真正的匯入結果\n```go\nimport (\n  \"包A\"\n  \"包B\"\n)\n```\n\n要是我有一個包在$GOPATH/src/底下的資料夾路徑是這樣的\n* github.com\n    * ithome\n        * packageA\n那我要引入 packageA的話要按照$GOPATH開始計算的路徑, 使用/進行路徑分隔.\n也因為跟資料夾路徑有關, 所以建議上都是把資料夾名稱跟package名稱取名成一致.\n```go\nimport (\n  \"github.com/ithome/packageA\"\n)\n```\n\n### 安裝第三方套件\n今天想安裝mysql套件, 他的遠端路徑是 github.com/go-sql-driver/mysql\n依照 /作路徑分隔的話.\n第一段表示網域名稱\n第二段表示作者或者是機構名稱\n第三段則是專案名稱\n\n透過go get指令, 透過這指令下載原始碼並且編譯.\n由於go get需要GOPATH已經被設置, Go1.8之後GOPATH預設在用戶目錄的go資料夾下.\n\n```bash\ngo get  github.com/go-sql-driver/mysql\n```\n\ngo get 參數說明:\n- -d 只有下載, 不會安裝\n- -v verbose, 顯示下載編譯時的log\n- -u 更新既有的依賴包\n\n\n有了基本包的概念, 就能寫簡單的範例了.\n```bash\n# 安裝logrus這log套件\ngo get github.com/sirupsen/logrus\n```\n**go/src/packagedemo/mylib/add.go**\n```go=1\npackage mylib\n\nfunc Add(a, b int) int {\n  return a + b\n}\n```\n\n**go/src/packageDemo/main.go**\n```go=1\npackage main\nimport (\n  \"fmt\"\n  \"packagedemo/mylib\"\n  // 這裡使用log 這別名來取代logrus這包名\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  fmt.Println(mylib.Add(1,2))\n  log.Info(\"IThome Iron man\")\n}\n```\n執行\n```bash\ngo run main.go\n# 輸出 :\n# 3\n# INFO[0000] IThome Iron man  \n```","source":"_posts/第一隻Go程式.md","raw":"---\ntitle: 第一隻Go程式\ndate: 2020-12-20 16:50:06\ncategories: \"Go\"\ntags:\n    - Go\n    - iT邦鐵人賽11Th\n---\n# 安裝Go跟開發環境\n[Golang下載](https://golang.org/dl/)\n[Install doc](https://golang.org/doc/install)\n[VsCode](https://code.visualstudio.com/)\n<!-- more -->\n## Install the GO on Linux\n```bash=\n# Download file\nwget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go1.12.7.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n\n# Check installation\ngo env\n```\n![goenv](https://i.imgur.com/j62hYTR.png)\n其他名稱會在後面講package時會稍微提到.\n\n### Upgrade Go\n```bash\n# Download file\nwget https://dl.google.com/go/go$VERSION.linux-amd64.tar.gz\n# Extract it into /usr/local\ntar -C /usr/local -xzf go$VERSION.linux-amd64.tar.gz\n# Add /usr/local/go/bin to the Path environment variable\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n#### Upgrade by shell script\n[update-golang](https://github.com/udhos/update-golang)\n\n\n### Workspaces\n[Workspaces](https://golang.org/doc/code.html#Workspaces)\n[Setting GoPath](https://github.com/golang/go/wiki/SettingGOPATH)\n在GoPath所顯示的目錄下創建以下資料夾\n* src : go source file\n* pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件\n* bin : 編譯後可執行檔案\n```bash\nmkdir -p $GOPATH/src $GOPATH/pkg $GOPATH/bin\n```\n\n### Hello Go\n```bash\nmkdir -p $GOPATH/src/hello\ncd $GOPATH/src/hello\ncode .\n```\n以VsCode開啟該目錄\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello Go\")\n}\n```\n```bash\n# 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下\ngo install hello\n# 執行\n$GOPATH/bin/hello\n> Hello  Go\n```\n\n##  Main package\nGo每支檔案都會需要宣告這是屬於哪個package的, 相當於C#的namespace概念.\n主要的會有一個叫做main的package包, 做為這隻可執行程式的入口包. \n如果該專案沒有main包時, 就沒法被編譯成可執行檔案. \n所以如果是要做成共享套件, 就可以不必有main包的存在於該專案內. \n\nmain裡面會有main方法作為程式的執行進入點.\n```go=1\n// main包宣告\npackage main\n\n// 匯入fmt包\nimport (\n  \"fmt\"\n )\n \n // main 方法, 作為執行程式的入口\n func main() {\n    fmt.Println(\"Hello IThome\")\n }\n```\n\n**import**  \n用來導入其他的包, 要用雙引號作為字串來使用.\n- 單行匯入\n```go\nimport \"包A\"\nimport \"包B\"\n```\n- 多行匯入, 宣告順序不影響真正的匯入結果\n```go\nimport (\n  \"包A\"\n  \"包B\"\n)\n```\n\n要是我有一個包在$GOPATH/src/底下的資料夾路徑是這樣的\n* github.com\n    * ithome\n        * packageA\n那我要引入 packageA的話要按照$GOPATH開始計算的路徑, 使用/進行路徑分隔.\n也因為跟資料夾路徑有關, 所以建議上都是把資料夾名稱跟package名稱取名成一致.\n```go\nimport (\n  \"github.com/ithome/packageA\"\n)\n```\n\n### 安裝第三方套件\n今天想安裝mysql套件, 他的遠端路徑是 github.com/go-sql-driver/mysql\n依照 /作路徑分隔的話.\n第一段表示網域名稱\n第二段表示作者或者是機構名稱\n第三段則是專案名稱\n\n透過go get指令, 透過這指令下載原始碼並且編譯.\n由於go get需要GOPATH已經被設置, Go1.8之後GOPATH預設在用戶目錄的go資料夾下.\n\n```bash\ngo get  github.com/go-sql-driver/mysql\n```\n\ngo get 參數說明:\n- -d 只有下載, 不會安裝\n- -v verbose, 顯示下載編譯時的log\n- -u 更新既有的依賴包\n\n\n有了基本包的概念, 就能寫簡單的範例了.\n```bash\n# 安裝logrus這log套件\ngo get github.com/sirupsen/logrus\n```\n**go/src/packagedemo/mylib/add.go**\n```go=1\npackage mylib\n\nfunc Add(a, b int) int {\n  return a + b\n}\n```\n\n**go/src/packageDemo/main.go**\n```go=1\npackage main\nimport (\n  \"fmt\"\n  \"packagedemo/mylib\"\n  // 這裡使用log 這別名來取代logrus這包名\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n  fmt.Println(mylib.Add(1,2))\n  log.Info(\"IThome Iron man\")\n}\n```\n執行\n```bash\ngo run main.go\n# 輸出 :\n# 3\n# INFO[0000] IThome Iron man  \n```","slug":"第一隻Go程式","published":1,"updated":"2020-12-20T12:24:40.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckix55cmn001ock6xuuzkj4es","content":"<h1 id=\"安裝Go跟開發環境\"><a href=\"#安裝Go跟開發環境\" class=\"headerlink\" title=\"安裝Go跟開發環境\"></a>安裝Go跟開發環境</h1><p><a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">Golang下載</a><br><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">Install doc</a><br><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VsCode</a></p>\n<a id=\"more\"></a>\n<h2 id=\"Install-the-GO-on-Linux\"><a href=\"#Install-the-GO-on-Linux\" class=\"headerlink\" title=\"Install the GO on Linux\"></a>Install the GO on Linux</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check installation</span></span><br><span class=\"line\">go env</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/j62hYTR.png\" alt=\"goenv\"><br>其他名稱會在後面講package時會稍微提到.</p>\n<h3 id=\"Upgrade-Go\"><a href=\"#Upgrade-Go\" class=\"headerlink\" title=\"Upgrade Go\"></a>Upgrade Go</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Upgrade-by-shell-script\"><a href=\"#Upgrade-by-shell-script\" class=\"headerlink\" title=\"Upgrade by shell script\"></a>Upgrade by shell script</h4><p><a href=\"https://github.com/udhos/update-golang\" target=\"_blank\" rel=\"noopener\">update-golang</a></p>\n<h3 id=\"Workspaces\"><a href=\"#Workspaces\" class=\"headerlink\" title=\"Workspaces\"></a>Workspaces</h3><p><a href=\"https://golang.org/doc/code.html#Workspaces\" target=\"_blank\" rel=\"noopener\">Workspaces</a><br><a href=\"https://github.com/golang/go/wiki/SettingGOPATH\" target=\"_blank\" rel=\"noopener\">Setting GoPath</a><br>在GoPath所顯示的目錄下創建以下資料夾</p>\n<ul>\n<li>src : go source file</li>\n<li>pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件</li>\n<li>bin : 編譯後可執行檔案<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src <span class=\"variable\">$GOPATH</span>/pkg <span class=\"variable\">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Hello-Go\"><a href=\"#Hello-Go\" class=\"headerlink\" title=\"Hello Go\"></a>Hello Go</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\">code .</span><br></pre></td></tr></table></figure>\n\n<p>以VsCode開啟該目錄</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello Go\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下</span></span><br><span class=\"line\">go install hello</span><br><span class=\"line\"><span class=\"comment\"># 執行</span></span><br><span class=\"line\"><span class=\"variable\">$GOPATH</span>/bin/hello</span><br><span class=\"line\">&gt; Hello  Go</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Main-package\"><a href=\"#Main-package\" class=\"headerlink\" title=\"Main package\"></a>Main package</h2><p>Go每支檔案都會需要宣告這是屬於哪個package的, 相當於C#的namespace概念.<br>主要的會有一個叫做main的package包, 做為這隻可執行程式的入口包.<br>如果該專案沒有main包時, 就沒法被編譯成可執行檔案.<br>所以如果是要做成共享套件, 就可以不必有main包的存在於該專案內. </p>\n<p>main裡面會有main方法作為程式的執行進入點.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main包宣告</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匯入fmt包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"> )</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// main 方法, 作為執行程式的入口</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Hello IThome\"</span>)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>import</strong><br>用來導入其他的包, 要用雙引號作為字串來使用.</p>\n<ul>\n<li><p>單行匯入</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"包A\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"包B\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多行匯入, 宣告順序不影響真正的匯入結果</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"包A\"</span></span><br><span class=\"line\">  <span class=\"string\">\"包B\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>要是我有一個包在$GOPATH/src/底下的資料夾路徑是這樣的</p>\n<ul>\n<li>github.com<ul>\n<li>ithome<ul>\n<li>packageA<br>那我要引入 packageA的話要按照$GOPATH開始計算的路徑, 使用/進行路徑分隔.<br>也因為跟資料夾路徑有關, 所以建議上都是把資料夾名稱跟package名稱取名成一致.<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"github.com/ithome/packageA\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安裝第三方套件\"><a href=\"#安裝第三方套件\" class=\"headerlink\" title=\"安裝第三方套件\"></a>安裝第三方套件</h3><p>今天想安裝mysql套件, 他的遠端路徑是 github.com/go-sql-driver/mysql<br>依照 /作路徑分隔的話.<br>第一段表示網域名稱<br>第二段表示作者或者是機構名稱<br>第三段則是專案名稱</p>\n<p>透過go get指令, 透過這指令下載原始碼並且編譯.<br>由於go get需要GOPATH已經被設置, Go1.8之後GOPATH預設在用戶目錄的go資料夾下.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get  github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>\n\n<p>go get 參數說明:</p>\n<ul>\n<li>-d 只有下載, 不會安裝</li>\n<li>-v verbose, 顯示下載編譯時的log</li>\n<li>-u 更新既有的依賴包</li>\n</ul>\n<p>有了基本包的概念, 就能寫簡單的範例了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安裝logrus這log套件</span></span><br><span class=\"line\">go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure>\n\n<p><strong>go/src/packagedemo/mylib/add.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> mylib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>go/src/packageDemo/main.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"packagedemo/mylib\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 這裡使用log 這別名來取代logrus這包名</span></span><br><span class=\"line\">  log <span class=\"string\">\"github.com/sirupsen/logrus\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(mylib.Add(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">  log.Info(<span class=\"string\">\"IThome Iron man\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>執行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br><span class=\"line\"><span class=\"comment\"># 輸出 :</span></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># INFO[0000] IThome Iron man</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"安裝Go跟開發環境\"><a href=\"#安裝Go跟開發環境\" class=\"headerlink\" title=\"安裝Go跟開發環境\"></a>安裝Go跟開發環境</h1><p><a href=\"https://golang.org/dl/\" target=\"_blank\" rel=\"noopener\">Golang下載</a><br><a href=\"https://golang.org/doc/install\" target=\"_blank\" rel=\"noopener\">Install doc</a><br><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">VsCode</a></p>","more":"<h2 id=\"Install-the-GO-on-Linux\"><a href=\"#Install-the-GO-on-Linux\" class=\"headerlink\" title=\"Install the GO on Linux\"></a>Install the GO on Linux</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.12.7.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Check installation</span></span><br><span class=\"line\">go env</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://i.imgur.com/j62hYTR.png\" alt=\"goenv\"><br>其他名稱會在後面講package時會稍微提到.</p>\n<h3 id=\"Upgrade-Go\"><a href=\"#Upgrade-Go\" class=\"headerlink\" title=\"Upgrade Go\"></a>Upgrade Go</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Download file</span></span><br><span class=\"line\">wget https://dl.google.com/go/go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Extract it into /usr/local</span></span><br><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go<span class=\"variable\">$VERSION</span>.linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># Add /usr/local/go/bin to the Path environment variable</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/go/bin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Upgrade-by-shell-script\"><a href=\"#Upgrade-by-shell-script\" class=\"headerlink\" title=\"Upgrade by shell script\"></a>Upgrade by shell script</h4><p><a href=\"https://github.com/udhos/update-golang\" target=\"_blank\" rel=\"noopener\">update-golang</a></p>\n<h3 id=\"Workspaces\"><a href=\"#Workspaces\" class=\"headerlink\" title=\"Workspaces\"></a>Workspaces</h3><p><a href=\"https://golang.org/doc/code.html#Workspaces\" target=\"_blank\" rel=\"noopener\">Workspaces</a><br><a href=\"https://github.com/golang/go/wiki/SettingGOPATH\" target=\"_blank\" rel=\"noopener\">Setting GoPath</a><br>在GoPath所顯示的目錄下創建以下資料夾</p>\n<ul>\n<li>src : go source file</li>\n<li>pkg : 編譯產生的文件, .a檔案(一包object file) ; 暫態緩存文件</li>\n<li>bin : 編譯後可執行檔案<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src <span class=\"variable\">$GOPATH</span>/pkg <span class=\"variable\">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"Hello-Go\"><a href=\"#Hello-Go\" class=\"headerlink\" title=\"Hello Go\"></a>Hello Go</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/hello</span><br><span class=\"line\">code .</span><br></pre></td></tr></table></figure>\n\n<p>以VsCode開啟該目錄</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"Hello Go\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 編譯產生可執行的二進制檔案, 會被安裝到$GOPATH/bin底下</span></span><br><span class=\"line\">go install hello</span><br><span class=\"line\"><span class=\"comment\"># 執行</span></span><br><span class=\"line\"><span class=\"variable\">$GOPATH</span>/bin/hello</span><br><span class=\"line\">&gt; Hello  Go</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Main-package\"><a href=\"#Main-package\" class=\"headerlink\" title=\"Main package\"></a>Main package</h2><p>Go每支檔案都會需要宣告這是屬於哪個package的, 相當於C#的namespace概念.<br>主要的會有一個叫做main的package包, 做為這隻可執行程式的入口包.<br>如果該專案沒有main包時, 就沒法被編譯成可執行檔案.<br>所以如果是要做成共享套件, 就可以不必有main包的存在於該專案內. </p>\n<p>main裡面會有main方法作為程式的執行進入點.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main包宣告</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匯入fmt包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"> )</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">// main 方法, 作為執行程式的入口</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">\"Hello IThome\"</span>)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>import</strong><br>用來導入其他的包, 要用雙引號作為字串來使用.</p>\n<ul>\n<li><p>單行匯入</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"包A\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"包B\"</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多行匯入, 宣告順序不影響真正的匯入結果</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"包A\"</span></span><br><span class=\"line\">  <span class=\"string\">\"包B\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>要是我有一個包在$GOPATH/src/底下的資料夾路徑是這樣的</p>\n<ul>\n<li>github.com<ul>\n<li>ithome<ul>\n<li>packageA<br>那我要引入 packageA的話要按照$GOPATH開始計算的路徑, 使用/進行路徑分隔.<br>也因為跟資料夾路徑有關, 所以建議上都是把資料夾名稱跟package名稱取名成一致.<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"github.com/ithome/packageA\"</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"安裝第三方套件\"><a href=\"#安裝第三方套件\" class=\"headerlink\" title=\"安裝第三方套件\"></a>安裝第三方套件</h3><p>今天想安裝mysql套件, 他的遠端路徑是 github.com/go-sql-driver/mysql<br>依照 /作路徑分隔的話.<br>第一段表示網域名稱<br>第二段表示作者或者是機構名稱<br>第三段則是專案名稱</p>\n<p>透過go get指令, 透過這指令下載原始碼並且編譯.<br>由於go get需要GOPATH已經被設置, Go1.8之後GOPATH預設在用戶目錄的go資料夾下.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get  github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>\n\n<p>go get 參數說明:</p>\n<ul>\n<li>-d 只有下載, 不會安裝</li>\n<li>-v verbose, 顯示下載編譯時的log</li>\n<li>-u 更新既有的依賴包</li>\n</ul>\n<p>有了基本包的概念, 就能寫簡單的範例了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安裝logrus這log套件</span></span><br><span class=\"line\">go get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure>\n\n<p><strong>go/src/packagedemo/mylib/add.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> mylib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>go/src/packageDemo/main.go</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"packagedemo/mylib\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 這裡使用log 這別名來取代logrus這包名</span></span><br><span class=\"line\">  log <span class=\"string\">\"github.com/sirupsen/logrus\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(mylib.Add(<span class=\"number\">1</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\">  log.Info(<span class=\"string\">\"IThome Iron man\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>執行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go run main.go</span><br><span class=\"line\"><span class=\"comment\"># 輸出 :</span></span><br><span class=\"line\"><span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># INFO[0000] IThome Iron man</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckix55cly0005ck6xb7r4m354","category_id":"ckix55cm30007ck6xat9t2typ","_id":"ckix55cm9000ick6xusqxh484"},{"post_id":"ckix55cm20006ck6x86a3lpdz","category_id":"ckix55cm30007ck6xat9t2typ","_id":"ckix55cmb000mck6xou5mvkyk"},{"post_id":"ckix55cma000kck6x2jgv85jv","category_id":"ckix55cm9000hck6xhg5yka3p","_id":"ckix55cmd000sck6xgwf58ds0"},{"post_id":"ckix55cm6000cck6xtqts9d1v","category_id":"ckix55cm9000hck6xhg5yka3p","_id":"ckix55cme000wck6xgiojmj5k"},{"post_id":"ckix55cm8000fck6xqc066qau","category_id":"ckix55cm9000hck6xhg5yka3p","_id":"ckix55cmf0010ck6xgewbkj1i"},{"post_id":"ckix55cm9000gck6x9xhdykg0","category_id":"ckix55cm9000hck6xhg5yka3p","_id":"ckix55cmh0015ck6x9oryw6st"},{"post_id":"ckix55cmm001lck6xm6qfiwbx","category_id":"ckix55cm9000hck6xhg5yka3p","_id":"ckix55cmo001sck6xoywpi3ra"},{"post_id":"ckix55cmj001dck6xbsr4ac3k","category_id":"ckix55cml001hck6xlp738xyf","_id":"ckix55cmo001uck6xl2nkej1n"},{"post_id":"ckix55cmn001ock6xuuzkj4es","category_id":"ckix55cm9000hck6xhg5yka3p","_id":"ckix55cmo001xck6xqz8rxq17"}],"PostTag":[{"post_id":"ckix55clr0000ck6x5i3chx6q","tag_id":"ckix55clx0004ck6xntzvpe3y","_id":"ckix55cm4000ack6xxtkxlgjz"},{"post_id":"ckix55clv0002ck6xqc0bpn5l","tag_id":"ckix55cm40009ck6xmuhfyxae","_id":"ckix55cmc000qck6xuqrbfhix"},{"post_id":"ckix55clv0002ck6xqc0bpn5l","tag_id":"ckix55cm7000eck6xz80tjh6s","_id":"ckix55cmd000uck6x6knfrs30"},{"post_id":"ckix55clv0002ck6xqc0bpn5l","tag_id":"ckix55cma000jck6xkbqj2vyr","_id":"ckix55cme000yck6xxrrca364"},{"post_id":"ckix55cly0005ck6xb7r4m354","tag_id":"ckix55cmb000ock6x17zasxzd","_id":"ckix55cmf0011ck6xf95mguf8"},{"post_id":"ckix55cm20006ck6x86a3lpdz","tag_id":"ckix55cmb000ock6x17zasxzd","_id":"ckix55cmi0019ck6xqmevtyqx"},{"post_id":"ckix55cm20006ck6x86a3lpdz","tag_id":"ckix55cmg0013ck6xv7ycskzv","_id":"ckix55cmj001bck6xzw4fnum9"},{"post_id":"ckix55cmi001ack6x4cugezmw","tag_id":"ckix55cm40009ck6xmuhfyxae","_id":"ckix55cmk001eck6xcqayh7u8"},{"post_id":"ckix55cmi001ack6x4cugezmw","tag_id":"ckix55cm7000eck6xz80tjh6s","_id":"ckix55cml001ick6x2463wfr2"},{"post_id":"ckix55cmi001ack6x4cugezmw","tag_id":"ckix55cma000jck6xkbqj2vyr","_id":"ckix55cmm001kck6x7s56y0ln"},{"post_id":"ckix55cml001jck6xzewi2ax6","tag_id":"ckix55cm40009ck6xmuhfyxae","_id":"ckix55cmn001nck6xocnyj9s0"},{"post_id":"ckix55cml001jck6xzewi2ax6","tag_id":"ckix55cm7000eck6xz80tjh6s","_id":"ckix55cmn001pck6x7x5ghxnw"},{"post_id":"ckix55cml001jck6xzewi2ax6","tag_id":"ckix55cma000jck6xkbqj2vyr","_id":"ckix55cmo001rck6x9ceyya60"},{"post_id":"ckix55cm30008ck6xc27h0hvc","tag_id":"ckix55cm40009ck6xmuhfyxae","_id":"ckix55cmo001tck6xl7r989rh"},{"post_id":"ckix55cm30008ck6xc27h0hvc","tag_id":"ckix55cm7000eck6xz80tjh6s","_id":"ckix55cmo001wck6xz1xdhgrm"},{"post_id":"ckix55cm30008ck6xc27h0hvc","tag_id":"ckix55cma000jck6xkbqj2vyr","_id":"ckix55cmo001yck6xovdeqlei"},{"post_id":"ckix55cm4000bck6xbhty60cj","tag_id":"ckix55cm40009ck6xmuhfyxae","_id":"ckix55cmp0020ck6x49rszgfe"},{"post_id":"ckix55cm4000bck6xbhty60cj","tag_id":"ckix55cm7000eck6xz80tjh6s","_id":"ckix55cmp0021ck6xrij8lese"},{"post_id":"ckix55cm4000bck6xbhty60cj","tag_id":"ckix55cma000jck6xkbqj2vyr","_id":"ckix55cmp0023ck6x9r7cexqw"},{"post_id":"ckix55cm6000cck6xtqts9d1v","tag_id":"ckix55cmg0013ck6xv7ycskzv","_id":"ckix55cmp0024ck6xt7xga2vb"},{"post_id":"ckix55cm8000fck6xqc066qau","tag_id":"ckix55cmg0013ck6xv7ycskzv","_id":"ckix55cmp0026ck6xkcx64oxv"},{"post_id":"ckix55cm9000gck6x9xhdykg0","tag_id":"ckix55cmg0013ck6xv7ycskzv","_id":"ckix55cmq0027ck6xcx5k3bf0"},{"post_id":"ckix55cma000kck6x2jgv85jv","tag_id":"ckix55cmg0013ck6xv7ycskzv","_id":"ckix55cmq0029ck6x2maxp0qo"},{"post_id":"ckix55cmb000lck6xoz9svt81","tag_id":"ckix55cmq0028ck6xczdpob0p","_id":"ckix55cmq002cck6x8b6b2b57"},{"post_id":"ckix55cmb000lck6xoz9svt81","tag_id":"ckix55cmq002ack6x82z2z45q","_id":"ckix55cmq002dck6xpqus1rh0"},{"post_id":"ckix55cmc000pck6xxu3dctul","tag_id":"ckix55cmq002bck6xbgynj4i8","_id":"ckix55cmr002gck6xrd90shuk"},{"post_id":"ckix55cmc000pck6xxu3dctul","tag_id":"ckix55cmq002eck6xsqgziwzy","_id":"ckix55cmr002hck6xpf6iw7b3"},{"post_id":"ckix55cmc000rck6xxg9hzqjv","tag_id":"ckix55cma000jck6xkbqj2vyr","_id":"ckix55cmr002jck6xw0fdbkvh"},{"post_id":"ckix55cmc000rck6xxg9hzqjv","tag_id":"ckix55cmq002fck6xaul4tf9p","_id":"ckix55cmr002kck6xxkvbq9n3"},{"post_id":"ckix55cmd000vck6xl4dehyug","tag_id":"ckix55cmr002ick6xizuamjh6","_id":"ckix55cmr002nck6xykulbszr"},{"post_id":"ckix55cmd000vck6xl4dehyug","tag_id":"ckix55cmr002lck6xwyc1g2rs","_id":"ckix55cmr002ock6xl3767pvw"},{"post_id":"ckix55cme000zck6xshyth2ye","tag_id":"ckix55cmr002mck6x68hbkbnk","_id":"ckix55cms002qck6x6rdavur7"},{"post_id":"ckix55cmg0012ck6xet66fpbb","tag_id":"ckix55cmq002bck6xbgynj4i8","_id":"ckix55cms002tck6xpdx1oi0m"},{"post_id":"ckix55cmg0012ck6xet66fpbb","tag_id":"ckix55cms002rck6x40yf2hb0","_id":"ckix55cms002uck6xaz6msmp9"},{"post_id":"ckix55cmg0014ck6xz10gvhc1","tag_id":"ckix55cms002sck6xtkyr23ey","_id":"ckix55cms002wck6xps31szmb"},{"post_id":"ckix55cmg0014ck6xz10gvhc1","tag_id":"ckix55cma000jck6xkbqj2vyr","_id":"ckix55cmt002xck6xvnkt6wz8"},{"post_id":"ckix55cmh0016ck6xw26zz3kh","tag_id":"ckix55cms002sck6xtkyr23ey","_id":"ckix55cmt002zck6xnfw56i1b"},{"post_id":"ckix55cmi0018ck6xl0h67auu","tag_id":"ckix55cms002sck6xtkyr23ey","_id":"ckix55cmt0031ck6xqhsiy3kn"},{"post_id":"ckix55cmj001dck6xbsr4ac3k","tag_id":"ckix55cmt0030ck6xt0apn6x3","_id":"ckix55cmt0033ck6xjrhpoqtr"},{"post_id":"ckix55cmm001lck6xm6qfiwbx","tag_id":"ckix55cmg0013ck6xv7ycskzv","_id":"ckix55cmu0035ck6x294h8gv5"},{"post_id":"ckix55cmm001lck6xm6qfiwbx","tag_id":"ckix55cmt0032ck6xnhf1iczv","_id":"ckix55cmu0036ck6x0hl6kmkp"},{"post_id":"ckix55cmn001ock6xuuzkj4es","tag_id":"ckix55cmg0013ck6xv7ycskzv","_id":"ckix55cmu0037ck6xkvv7vei2"},{"post_id":"ckix55cmn001ock6xuuzkj4es","tag_id":"ckix55cmt0032ck6xnhf1iczv","_id":"ckix55cmu0038ck6xxbz1d1y7"}],"Tag":[{"name":"AWS","_id":"ckix55clx0004ck6xntzvpe3y"},{"name":"Design Pattern","_id":"ckix55cm40009ck6xmuhfyxae"},{"name":"TypeScript","_id":"ckix55cm7000eck6xz80tjh6s"},{"name":"JavaScript","_id":"ckix55cma000jck6xkbqj2vyr"},{"name":"Docker","_id":"ckix55cmb000ock6x17zasxzd"},{"name":"Go","_id":"ckix55cmg0013ck6xv7ycskzv"},{"name":"MQ","_id":"ckix55cmq0028ck6xczdpob0p"},{"name":"RabbitMQ","_id":"ckix55cmq002ack6x82z2z45q"},{"name":"JavaSCript","_id":"ckix55cmq002bck6xbgynj4i8"},{"name":"JS30Day","_id":"ckix55cmq002eck6xsqgziwzy"},{"name":"CleanCode","_id":"ckix55cmq002fck6xaul4tf9p"},{"name":"Redis","_id":"ckix55cmr002ick6xizuamjh6"},{"name":"Lua","_id":"ckix55cmr002lck6xwyc1g2rs"},{"name":"Sportsbook","_id":"ckix55cmr002mck6x68hbkbnk"},{"name":"Pixi","_id":"ckix55cms002rck6x40yf2hb0"},{"name":"Rx","_id":"ckix55cms002sck6xtkyr23ey"},{"name":"TechWeekly","_id":"ckix55cmt0030ck6xt0apn6x3"},{"name":"iT邦鐵人賽11Th","_id":"ckix55cmt0032ck6xnhf1iczv"}]}}